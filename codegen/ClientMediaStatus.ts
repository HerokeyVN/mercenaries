/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as ClientTrackInfo from "./ClientTrackInfo";
export interface IClientMediaStatusArgs {
    tracks?: Map<string, ClientTrackInfo.ClientTrackInfo>;
}
export class ClientMediaStatus {
    public tracks?: Map<string, ClientTrackInfo.ClientTrackInfo>;
    constructor(args?: IClientMediaStatusArgs) {
        if (args != null && args.tracks != null) {
            this.tracks = args.tracks;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ClientMediaStatus");
        if (this.tracks != null) {
            output.writeFieldBegin("tracks", thrift.Thrift.Type.MAP, 1);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRUCT, this.tracks.size);
            this.tracks.forEach((value_1: ClientTrackInfo.ClientTrackInfo, key_1: string): void => {
                output.writeString(key_1);
                value_1.write(output);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ClientMediaStatus {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_2: Map<string, ClientTrackInfo.ClientTrackInfo> = new Map<string, ClientTrackInfo.ClientTrackInfo>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_2: string = input.readString();
                            const value_3: ClientTrackInfo.ClientTrackInfo = ClientTrackInfo.ClientTrackInfo.read(input);
                            value_2.set(key_2, value_3);
                        }
                        input.readMapEnd();
                        _args.tracks = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ClientMediaStatus(_args);
    }
}

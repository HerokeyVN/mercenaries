/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as MediaStream from "./MediaStream";
import * as LayoutExtra from "./LayoutExtra";
export interface IStageInfoArgs {
    layoutType?: number;
    mediaStreams?: Array<MediaStream.MediaStream>;
    layoutExtra?: LayoutExtra.LayoutExtra;
}
export class StageInfo {
    public layoutType?: number;
    public mediaStreams?: Array<MediaStream.MediaStream>;
    public layoutExtra?: LayoutExtra.LayoutExtra;
    constructor(args?: IStageInfoArgs) {
        if (args != null && args.layoutType != null) {
            this.layoutType = args.layoutType;
        }
        if (args != null && args.mediaStreams != null) {
            this.mediaStreams = args.mediaStreams;
        }
        if (args != null && args.layoutExtra != null) {
            this.layoutExtra = args.layoutExtra;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("StageInfo");
        if (this.layoutType != null) {
            output.writeFieldBegin("layoutType", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.layoutType);
            output.writeFieldEnd();
        }
        if (this.mediaStreams != null) {
            output.writeFieldBegin("mediaStreams", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.mediaStreams.length);
            this.mediaStreams.forEach((value_1: MediaStream.MediaStream): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.layoutExtra != null) {
            output.writeFieldBegin("layoutExtra", thrift.Thrift.Type.STRUCT, 3);
            this.layoutExtra.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): StageInfo {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: number = input.readI32();
                        _args.layoutType = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_3: Array<MediaStream.MediaStream> = new Array<MediaStream.MediaStream>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_4: MediaStream.MediaStream = MediaStream.MediaStream.read(input);
                            value_3.push(value_4);
                        }
                        input.readListEnd();
                        _args.mediaStreams = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_5: LayoutExtra.LayoutExtra = LayoutExtra.LayoutExtra.read(input);
                        _args.layoutExtra = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new StageInfo(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as ActionMetadata from "./ActionMetadata";
import * as Actor from "./Actor";
import * as Content from "./Content";
export interface IMediaSyncOutputStateArgs {
    action?: number;
    action_metadata?: ActionMetadata.ActionMetadata;
    actor?: Actor.Actor;
    content?: Content.Content;
    content_source?: number;
    content_id?: string;
    admin_message?: string;
    admin_message_type?: number;
    seed_content_id?: string;
    initiator_id?: string;
}
export class MediaSyncOutputState {
    public action?: number;
    public action_metadata?: ActionMetadata.ActionMetadata;
    public actor?: Actor.Actor;
    public content?: Content.Content;
    public content_source?: number;
    public content_id?: string;
    public admin_message?: string;
    public admin_message_type?: number;
    public seed_content_id?: string;
    public initiator_id?: string;
    constructor(args?: IMediaSyncOutputStateArgs) {
        if (args != null && args.action != null) {
            this.action = args.action;
        }
        if (args != null && args.action_metadata != null) {
            this.action_metadata = args.action_metadata;
        }
        if (args != null && args.actor != null) {
            this.actor = args.actor;
        }
        if (args != null && args.content != null) {
            this.content = args.content;
        }
        if (args != null && args.content_source != null) {
            this.content_source = args.content_source;
        }
        if (args != null && args.content_id != null) {
            this.content_id = args.content_id;
        }
        if (args != null && args.admin_message != null) {
            this.admin_message = args.admin_message;
        }
        if (args != null && args.admin_message_type != null) {
            this.admin_message_type = args.admin_message_type;
        }
        if (args != null && args.seed_content_id != null) {
            this.seed_content_id = args.seed_content_id;
        }
        if (args != null && args.initiator_id != null) {
            this.initiator_id = args.initiator_id;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("MediaSyncOutputState");
        if (this.action != null) {
            output.writeFieldBegin("action", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.action);
            output.writeFieldEnd();
        }
        if (this.action_metadata != null) {
            output.writeFieldBegin("action_metadata", thrift.Thrift.Type.STRUCT, 2);
            this.action_metadata.write(output);
            output.writeFieldEnd();
        }
        if (this.actor != null) {
            output.writeFieldBegin("actor", thrift.Thrift.Type.STRUCT, 3);
            this.actor.write(output);
            output.writeFieldEnd();
        }
        if (this.content != null) {
            output.writeFieldBegin("content", thrift.Thrift.Type.STRUCT, 4);
            this.content.write(output);
            output.writeFieldEnd();
        }
        if (this.content_source != null) {
            output.writeFieldBegin("content_source", thrift.Thrift.Type.I32, 5);
            output.writeI32(this.content_source);
            output.writeFieldEnd();
        }
        if (this.content_id != null) {
            output.writeFieldBegin("content_id", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.content_id);
            output.writeFieldEnd();
        }
        if (this.admin_message != null) {
            output.writeFieldBegin("admin_message", thrift.Thrift.Type.STRING, 7);
            output.writeString(this.admin_message);
            output.writeFieldEnd();
        }
        if (this.admin_message_type != null) {
            output.writeFieldBegin("admin_message_type", thrift.Thrift.Type.I32, 8);
            output.writeI32(this.admin_message_type);
            output.writeFieldEnd();
        }
        if (this.seed_content_id != null) {
            output.writeFieldBegin("seed_content_id", thrift.Thrift.Type.STRING, 9);
            output.writeString(this.seed_content_id);
            output.writeFieldEnd();
        }
        if (this.initiator_id != null) {
            output.writeFieldBegin("initiator_id", thrift.Thrift.Type.STRING, 10);
            output.writeString(this.initiator_id);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): MediaSyncOutputState {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_1: number = input.readI32();
                        _args.action = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: ActionMetadata.ActionMetadata = ActionMetadata.ActionMetadata.read(input);
                        _args.action_metadata = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: Actor.Actor = Actor.Actor.read(input);
                        _args.actor = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: Content.Content = Content.Content.read(input);
                        _args.content = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: number = input.readI32();
                        _args.content_source = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.content_id = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.admin_message = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_8: number = input.readI32();
                        _args.admin_message_type = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.seed_content_id = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_10: string = input.readString();
                        _args.initiator_id = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new MediaSyncOutputState(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as ClientConditionalDeserializationSafe from "./ClientConditionalDeserializationSafe";
import * as ClientEffectDeserializationSafe from "./ClientEffectDeserializationSafe";
export interface IClientRuleFromServerToClientArgs {
    conditionals?: Array<ClientConditionalDeserializationSafe.ClientConditionalDeserializationSafe>;
    effects?: Array<ClientEffectDeserializationSafe.ClientEffectDeserializationSafe>;
    id?: number;
}
export class ClientRuleFromServerToClient {
    public conditionals?: Array<ClientConditionalDeserializationSafe.ClientConditionalDeserializationSafe>;
    public effects?: Array<ClientEffectDeserializationSafe.ClientEffectDeserializationSafe>;
    public id?: number;
    constructor(args?: IClientRuleFromServerToClientArgs) {
        if (args != null && args.conditionals != null) {
            this.conditionals = args.conditionals;
        }
        if (args != null && args.effects != null) {
            this.effects = args.effects;
        }
        if (args != null && args.id != null) {
            this.id = args.id;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ClientRuleFromServerToClient");
        if (this.conditionals != null) {
            output.writeFieldBegin("conditionals", thrift.Thrift.Type.LIST, 1);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.conditionals.length);
            this.conditionals.forEach((value_1: ClientConditionalDeserializationSafe.ClientConditionalDeserializationSafe): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.effects != null) {
            output.writeFieldBegin("effects", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.effects.length);
            this.effects.forEach((value_2: ClientEffectDeserializationSafe.ClientEffectDeserializationSafe): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.id);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ClientRuleFromServerToClient {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_3: Array<ClientConditionalDeserializationSafe.ClientConditionalDeserializationSafe> = new Array<ClientConditionalDeserializationSafe.ClientConditionalDeserializationSafe>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_4: ClientConditionalDeserializationSafe.ClientConditionalDeserializationSafe = ClientConditionalDeserializationSafe.ClientConditionalDeserializationSafe.read(input);
                            value_3.push(value_4);
                        }
                        input.readListEnd();
                        _args.conditionals = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_5: Array<ClientEffectDeserializationSafe.ClientEffectDeserializationSafe> = new Array<ClientEffectDeserializationSafe.ClientEffectDeserializationSafe>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_6: ClientEffectDeserializationSafe.ClientEffectDeserializationSafe = ClientEffectDeserializationSafe.ClientEffectDeserializationSafe.read(input);
                            value_5.push(value_6);
                        }
                        input.readListEnd();
                        _args.effects = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_7: number = input.readI32();
                        _args.id = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ClientRuleFromServerToClient(_args);
    }
}

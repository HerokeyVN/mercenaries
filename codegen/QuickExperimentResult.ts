/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
import * as QuickExperiment from "./QuickExperiment";
export interface IQuickExperimentResultArgs {
    experiments?: Map<string, QuickExperiment.QuickExperiment>;
    userFbid?: number | Int64;
}
export class QuickExperimentResult {
    public experiments?: Map<string, QuickExperiment.QuickExperiment>;
    public userFbid?: Int64;
    constructor(args?: IQuickExperimentResultArgs) {
        if (args != null && args.experiments != null) {
            this.experiments = args.experiments;
        }
        if (args != null && args.userFbid != null) {
            if (typeof args.userFbid === "number") {
                this.userFbid = new Int64(args.userFbid);
            }
            else {
                this.userFbid = args.userFbid;
            }
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("QuickExperimentResult");
        if (this.experiments != null) {
            output.writeFieldBegin("experiments", thrift.Thrift.Type.MAP, 1);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRUCT, this.experiments.size);
            this.experiments.forEach((value_1: QuickExperiment.QuickExperiment, key_1: string): void => {
                output.writeString(key_1);
                value_1.write(output);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.userFbid != null) {
            output.writeFieldBegin("userFbid", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.userFbid);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): QuickExperimentResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_2: Map<string, QuickExperiment.QuickExperiment> = new Map<string, QuickExperiment.QuickExperiment>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_2: string = input.readString();
                            const value_3: QuickExperiment.QuickExperiment = QuickExperiment.QuickExperiment.read(input);
                            value_2.set(key_2, value_3);
                        }
                        input.readMapEnd();
                        _args.experiments = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.userFbid = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new QuickExperimentResult(_args);
    }
}

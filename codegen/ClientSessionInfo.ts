/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IClientSessionInfoArgs {
    cluster?: string;
    conferenceName?: string;
    nonce?: string;
    userId?: string;
    clientSessionId?: string;
}
export class ClientSessionInfo {
    public cluster?: string;
    public conferenceName?: string;
    public nonce?: string;
    public userId?: string;
    public clientSessionId?: string;
    constructor(args?: IClientSessionInfoArgs) {
        if (args != null && args.cluster != null) {
            this.cluster = args.cluster;
        }
        if (args != null && args.conferenceName != null) {
            this.conferenceName = args.conferenceName;
        }
        if (args != null && args.nonce != null) {
            this.nonce = args.nonce;
        }
        if (args != null && args.userId != null) {
            this.userId = args.userId;
        }
        if (args != null && args.clientSessionId != null) {
            this.clientSessionId = args.clientSessionId;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ClientSessionInfo");
        if (this.cluster != null) {
            output.writeFieldBegin("cluster", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.cluster);
            output.writeFieldEnd();
        }
        if (this.conferenceName != null) {
            output.writeFieldBegin("conferenceName", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.conferenceName);
            output.writeFieldEnd();
        }
        if (this.nonce != null) {
            output.writeFieldBegin("nonce", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.nonce);
            output.writeFieldEnd();
        }
        if (this.userId != null) {
            output.writeFieldBegin("userId", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.userId);
            output.writeFieldEnd();
        }
        if (this.clientSessionId != null) {
            output.writeFieldBegin("clientSessionId", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.clientSessionId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ClientSessionInfo {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.cluster = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.conferenceName = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.nonce = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.userId = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.clientSessionId = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ClientSessionInfo(_args);
    }
}

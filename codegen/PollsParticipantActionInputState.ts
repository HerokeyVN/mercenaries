/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as PollCreateInputState from "./PollCreateInputState";
import * as PollRemoveInputState from "./PollRemoveInputState";
import * as PollVoteInputState from "./PollVoteInputState";
import * as PollRemoveVoteInputState from "./PollRemoveVoteInputState";
import * as PollPingInputState from "./PollPingInputState";
import * as PollCloneE2EEState from "./PollCloneE2EEState";
export interface IPollsParticipantActionInputStateArgs {
    create?: PollCreateInputState.PollCreateInputState;
    remove?: PollRemoveInputState.PollRemoveInputState;
    vote?: PollVoteInputState.PollVoteInputState;
    remove_vote?: PollRemoveVoteInputState.PollRemoveVoteInputState;
    ping?: PollPingInputState.PollPingInputState;
    clone_poll_state?: PollCloneE2EEState.PollCloneE2EEState;
}
export class PollsParticipantActionInputState {
    public create?: PollCreateInputState.PollCreateInputState;
    public remove?: PollRemoveInputState.PollRemoveInputState;
    public vote?: PollVoteInputState.PollVoteInputState;
    public remove_vote?: PollRemoveVoteInputState.PollRemoveVoteInputState;
    public ping?: PollPingInputState.PollPingInputState;
    public clone_poll_state?: PollCloneE2EEState.PollCloneE2EEState;
    constructor(args?: IPollsParticipantActionInputStateArgs) {
        if (args != null && args.create != null) {
            this.create = args.create;
        }
        if (args != null && args.remove != null) {
            this.remove = args.remove;
        }
        if (args != null && args.vote != null) {
            this.vote = args.vote;
        }
        if (args != null && args.remove_vote != null) {
            this.remove_vote = args.remove_vote;
        }
        if (args != null && args.ping != null) {
            this.ping = args.ping;
        }
        if (args != null && args.clone_poll_state != null) {
            this.clone_poll_state = args.clone_poll_state;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("PollsParticipantActionInputState");
        if (this.create != null) {
            output.writeFieldBegin("create", thrift.Thrift.Type.STRUCT, 1);
            this.create.write(output);
            output.writeFieldEnd();
        }
        if (this.remove != null) {
            output.writeFieldBegin("remove", thrift.Thrift.Type.STRUCT, 2);
            this.remove.write(output);
            output.writeFieldEnd();
        }
        if (this.vote != null) {
            output.writeFieldBegin("vote", thrift.Thrift.Type.STRUCT, 3);
            this.vote.write(output);
            output.writeFieldEnd();
        }
        if (this.remove_vote != null) {
            output.writeFieldBegin("remove_vote", thrift.Thrift.Type.STRUCT, 4);
            this.remove_vote.write(output);
            output.writeFieldEnd();
        }
        if (this.ping != null) {
            output.writeFieldBegin("ping", thrift.Thrift.Type.STRUCT, 6);
            this.ping.write(output);
            output.writeFieldEnd();
        }
        if (this.clone_poll_state != null) {
            output.writeFieldBegin("clone_poll_state", thrift.Thrift.Type.STRUCT, 8);
            this.clone_poll_state.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): PollsParticipantActionInputState {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_1: PollCreateInputState.PollCreateInputState = PollCreateInputState.PollCreateInputState.read(input);
                        _args.create = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: PollRemoveInputState.PollRemoveInputState = PollRemoveInputState.PollRemoveInputState.read(input);
                        _args.remove = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: PollVoteInputState.PollVoteInputState = PollVoteInputState.PollVoteInputState.read(input);
                        _args.vote = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: PollRemoveVoteInputState.PollRemoveVoteInputState = PollRemoveVoteInputState.PollRemoveVoteInputState.read(input);
                        _args.remove_vote = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_5: PollPingInputState.PollPingInputState = PollPingInputState.PollPingInputState.read(input);
                        _args.ping = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_6: PollCloneE2EEState.PollCloneE2EEState = PollCloneE2EEState.PollCloneE2EEState.read(input);
                        _args.clone_poll_state = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new PollsParticipantActionInputState(_args);
    }
}

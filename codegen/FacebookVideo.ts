/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as Video from "./Video";
import * as SizedUrl from "./SizedUrl";
import * as CaptionLocales from "./CaptionLocales";
import * as ReelsMetadata from "./ReelsMetadata";
export interface IFacebookVideoArgs {
    content_id?: string;
    video?: Video.Video;
    thumbnail?: SizedUrl.SizedUrl;
    title?: string;
    subtitle?: string;
    is_live_streaming?: boolean;
    is_reportable?: boolean;
    available_caption_locales?: Array<CaptionLocales.CaptionLocales>;
    is_non_interactable?: boolean;
    content_rating?: string;
    tracking?: string;
    saved_state?: number;
    is_reels?: boolean;
    reels_metadata?: ReelsMetadata.ReelsMetadata;
}
export class FacebookVideo {
    public content_id?: string;
    public video?: Video.Video;
    public thumbnail?: SizedUrl.SizedUrl;
    public title?: string;
    public subtitle?: string;
    public is_live_streaming?: boolean;
    public is_reportable?: boolean;
    public available_caption_locales?: Array<CaptionLocales.CaptionLocales>;
    public is_non_interactable?: boolean;
    public content_rating?: string;
    public tracking?: string;
    public saved_state?: number;
    public is_reels?: boolean;
    public reels_metadata?: ReelsMetadata.ReelsMetadata;
    constructor(args?: IFacebookVideoArgs) {
        if (args != null && args.content_id != null) {
            this.content_id = args.content_id;
        }
        if (args != null && args.video != null) {
            this.video = args.video;
        }
        if (args != null && args.thumbnail != null) {
            this.thumbnail = args.thumbnail;
        }
        if (args != null && args.title != null) {
            this.title = args.title;
        }
        if (args != null && args.subtitle != null) {
            this.subtitle = args.subtitle;
        }
        if (args != null && args.is_live_streaming != null) {
            this.is_live_streaming = args.is_live_streaming;
        }
        if (args != null && args.is_reportable != null) {
            this.is_reportable = args.is_reportable;
        }
        if (args != null && args.available_caption_locales != null) {
            this.available_caption_locales = args.available_caption_locales;
        }
        if (args != null && args.is_non_interactable != null) {
            this.is_non_interactable = args.is_non_interactable;
        }
        if (args != null && args.content_rating != null) {
            this.content_rating = args.content_rating;
        }
        if (args != null && args.tracking != null) {
            this.tracking = args.tracking;
        }
        if (args != null && args.saved_state != null) {
            this.saved_state = args.saved_state;
        }
        if (args != null && args.is_reels != null) {
            this.is_reels = args.is_reels;
        }
        if (args != null && args.reels_metadata != null) {
            this.reels_metadata = args.reels_metadata;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("FacebookVideo");
        if (this.content_id != null) {
            output.writeFieldBegin("content_id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.content_id);
            output.writeFieldEnd();
        }
        if (this.video != null) {
            output.writeFieldBegin("video", thrift.Thrift.Type.STRUCT, 2);
            this.video.write(output);
            output.writeFieldEnd();
        }
        if (this.thumbnail != null) {
            output.writeFieldBegin("thumbnail", thrift.Thrift.Type.STRUCT, 3);
            this.thumbnail.write(output);
            output.writeFieldEnd();
        }
        if (this.title != null) {
            output.writeFieldBegin("title", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.title);
            output.writeFieldEnd();
        }
        if (this.subtitle != null) {
            output.writeFieldBegin("subtitle", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.subtitle);
            output.writeFieldEnd();
        }
        if (this.is_live_streaming != null) {
            output.writeFieldBegin("is_live_streaming", thrift.Thrift.Type.BOOL, 6);
            output.writeBool(this.is_live_streaming);
            output.writeFieldEnd();
        }
        if (this.is_reportable != null) {
            output.writeFieldBegin("is_reportable", thrift.Thrift.Type.BOOL, 7);
            output.writeBool(this.is_reportable);
            output.writeFieldEnd();
        }
        if (this.available_caption_locales != null) {
            output.writeFieldBegin("available_caption_locales", thrift.Thrift.Type.LIST, 8);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.available_caption_locales.length);
            this.available_caption_locales.forEach((value_1: CaptionLocales.CaptionLocales): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.is_non_interactable != null) {
            output.writeFieldBegin("is_non_interactable", thrift.Thrift.Type.BOOL, 9);
            output.writeBool(this.is_non_interactable);
            output.writeFieldEnd();
        }
        if (this.content_rating != null) {
            output.writeFieldBegin("content_rating", thrift.Thrift.Type.STRING, 10);
            output.writeString(this.content_rating);
            output.writeFieldEnd();
        }
        if (this.tracking != null) {
            output.writeFieldBegin("tracking", thrift.Thrift.Type.STRING, 11);
            output.writeString(this.tracking);
            output.writeFieldEnd();
        }
        if (this.saved_state != null) {
            output.writeFieldBegin("saved_state", thrift.Thrift.Type.I32, 12);
            output.writeI32(this.saved_state);
            output.writeFieldEnd();
        }
        if (this.is_reels != null) {
            output.writeFieldBegin("is_reels", thrift.Thrift.Type.BOOL, 13);
            output.writeBool(this.is_reels);
            output.writeFieldEnd();
        }
        if (this.reels_metadata != null) {
            output.writeFieldBegin("reels_metadata", thrift.Thrift.Type.STRUCT, 14);
            this.reels_metadata.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): FacebookVideo {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.content_id = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: Video.Video = Video.Video.read(input);
                        _args.video = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: SizedUrl.SizedUrl = SizedUrl.SizedUrl.read(input);
                        _args.thumbnail = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.title = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.subtitle = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_7: boolean = input.readBool();
                        _args.is_live_streaming = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_8: boolean = input.readBool();
                        _args.is_reportable = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_9: Array<CaptionLocales.CaptionLocales> = new Array<CaptionLocales.CaptionLocales>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_10: CaptionLocales.CaptionLocales = CaptionLocales.CaptionLocales.read(input);
                            value_9.push(value_10);
                        }
                        input.readListEnd();
                        _args.available_caption_locales = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_11: boolean = input.readBool();
                        _args.is_non_interactable = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_12: string = input.readString();
                        _args.content_rating = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_13: string = input.readString();
                        _args.tracking = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_14: number = input.readI32();
                        _args.saved_state = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_15: boolean = input.readBool();
                        _args.is_reels = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_16: ReelsMetadata.ReelsMetadata = ReelsMetadata.ReelsMetadata.read(input);
                        _args.reels_metadata = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new FacebookVideo(_args);
    }
}

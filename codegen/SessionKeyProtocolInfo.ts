/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
import * as EpochInfo from "./EpochInfo";
export interface ISessionKeyProtocolInfoArgs {
    epochId?: number | Int64;
    isKeyDistributor?: boolean;
    epochInfo?: EpochInfo.EpochInfo;
    keyDistributorId?: string;
}
export class SessionKeyProtocolInfo {
    public epochId?: Int64;
    public isKeyDistributor?: boolean;
    public epochInfo?: EpochInfo.EpochInfo;
    public keyDistributorId?: string;
    constructor(args?: ISessionKeyProtocolInfoArgs) {
        if (args != null && args.epochId != null) {
            if (typeof args.epochId === "number") {
                this.epochId = new Int64(args.epochId);
            }
            else {
                this.epochId = args.epochId;
            }
        }
        if (args != null && args.isKeyDistributor != null) {
            this.isKeyDistributor = args.isKeyDistributor;
        }
        if (args != null && args.epochInfo != null) {
            this.epochInfo = args.epochInfo;
        }
        if (args != null && args.keyDistributorId != null) {
            this.keyDistributorId = args.keyDistributorId;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("SessionKeyProtocolInfo");
        if (this.epochId != null) {
            output.writeFieldBegin("epochId", thrift.Thrift.Type.I64, 1);
            output.writeI64(this.epochId);
            output.writeFieldEnd();
        }
        if (this.isKeyDistributor != null) {
            output.writeFieldBegin("isKeyDistributor", thrift.Thrift.Type.BOOL, 2);
            output.writeBool(this.isKeyDistributor);
            output.writeFieldEnd();
        }
        if (this.epochInfo != null) {
            output.writeFieldBegin("epochInfo", thrift.Thrift.Type.STRUCT, 3);
            this.epochInfo.write(output);
            output.writeFieldEnd();
        }
        if (this.keyDistributorId != null) {
            output.writeFieldBegin("keyDistributorId", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.keyDistributorId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): SessionKeyProtocolInfo {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_1: Int64 = input.readI64();
                        _args.epochId = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_2: boolean = input.readBool();
                        _args.isKeyDistributor = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: EpochInfo.EpochInfo = EpochInfo.EpochInfo.read(input);
                        _args.epochInfo = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.keyDistributorId = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new SessionKeyProtocolInfo(_args);
    }
}

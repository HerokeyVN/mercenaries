/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as VideoRequestPayload from "./VideoRequestPayload";
import * as NotifyMediaStatePayload from "./NotifyMediaStatePayload";
import * as GenericDataMessage from "./GenericDataMessage";
export interface IRingPayloadArgs {
    videoRequestPayload?: VideoRequestPayload.VideoRequestPayload;
    initialMediaState?: NotifyMediaStatePayload.NotifyMediaStatePayload;
    callType?: string;
    extraParams?: Array<GenericDataMessage.GenericDataMessage>;
}
export class RingPayload {
    public videoRequestPayload?: VideoRequestPayload.VideoRequestPayload;
    public initialMediaState?: NotifyMediaStatePayload.NotifyMediaStatePayload;
    public callType?: string;
    public extraParams?: Array<GenericDataMessage.GenericDataMessage>;
    constructor(args?: IRingPayloadArgs) {
        if (args != null && args.videoRequestPayload != null) {
            this.videoRequestPayload = args.videoRequestPayload;
        }
        if (args != null && args.initialMediaState != null) {
            this.initialMediaState = args.initialMediaState;
        }
        if (args != null && args.callType != null) {
            this.callType = args.callType;
        }
        if (args != null && args.extraParams != null) {
            this.extraParams = args.extraParams;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RingPayload");
        if (this.videoRequestPayload != null) {
            output.writeFieldBegin("videoRequestPayload", thrift.Thrift.Type.STRUCT, 1);
            this.videoRequestPayload.write(output);
            output.writeFieldEnd();
        }
        if (this.initialMediaState != null) {
            output.writeFieldBegin("initialMediaState", thrift.Thrift.Type.STRUCT, 2);
            this.initialMediaState.write(output);
            output.writeFieldEnd();
        }
        if (this.callType != null) {
            output.writeFieldBegin("callType", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.callType);
            output.writeFieldEnd();
        }
        if (this.extraParams != null) {
            output.writeFieldBegin("extraParams", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.extraParams.length);
            this.extraParams.forEach((value_1: GenericDataMessage.GenericDataMessage): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RingPayload {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: VideoRequestPayload.VideoRequestPayload = VideoRequestPayload.VideoRequestPayload.read(input);
                        _args.videoRequestPayload = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: NotifyMediaStatePayload.NotifyMediaStatePayload = NotifyMediaStatePayload.NotifyMediaStatePayload.read(input);
                        _args.initialMediaState = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.callType = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_5: Array<GenericDataMessage.GenericDataMessage> = new Array<GenericDataMessage.GenericDataMessage>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_6: GenericDataMessage.GenericDataMessage = GenericDataMessage.GenericDataMessage.read(input);
                            value_5.push(value_6);
                        }
                        input.readListEnd();
                        _args.extraParams = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RingPayload(_args);
    }
}

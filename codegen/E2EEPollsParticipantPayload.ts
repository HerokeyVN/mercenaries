/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as PollsParticipantActionInputState from "./PollsParticipantActionInputState";
export interface IE2EEPollsParticipantPayloadArgs {
    action?: PollsParticipantActionInputState.PollsParticipantActionInputState;
    request_id?: string;
}
export class E2EEPollsParticipantPayload {
    public action?: PollsParticipantActionInputState.PollsParticipantActionInputState;
    public request_id?: string;
    constructor(args?: IE2EEPollsParticipantPayloadArgs) {
        if (args != null && args.action != null) {
            this.action = args.action;
        }
        if (args != null && args.request_id != null) {
            this.request_id = args.request_id;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("E2EEPollsParticipantPayload");
        if (this.action != null) {
            output.writeFieldBegin("action", thrift.Thrift.Type.STRUCT, 1);
            this.action.write(output);
            output.writeFieldEnd();
        }
        if (this.request_id != null) {
            output.writeFieldBegin("request_id", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.request_id);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): E2EEPollsParticipantPayload {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_1: PollsParticipantActionInputState.PollsParticipantActionInputState = PollsParticipantActionInputState.PollsParticipantActionInputState.read(input);
                        _args.action = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.request_id = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new E2EEPollsParticipantPayload(_args);
    }
}

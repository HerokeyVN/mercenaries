/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
export interface IRaisedHandsQueuerStateInfoArgs {
    state?: number;
    start_time?: number | Int64;
    is_new_state?: boolean;
}
export class RaisedHandsQueuerStateInfo {
    public state?: number;
    public start_time?: Int64;
    public is_new_state?: boolean;
    constructor(args?: IRaisedHandsQueuerStateInfoArgs) {
        if (args != null && args.state != null) {
            this.state = args.state;
        }
        if (args != null && args.start_time != null) {
            if (typeof args.start_time === "number") {
                this.start_time = new Int64(args.start_time);
            }
            else {
                this.start_time = args.start_time;
            }
        }
        if (args != null && args.is_new_state != null) {
            this.is_new_state = args.is_new_state;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RaisedHandsQueuerStateInfo");
        if (this.state != null) {
            output.writeFieldBegin("state", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.state);
            output.writeFieldEnd();
        }
        if (this.start_time != null) {
            output.writeFieldBegin("start_time", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.start_time);
            output.writeFieldEnd();
        }
        if (this.is_new_state != null) {
            output.writeFieldBegin("is_new_state", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.is_new_state);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RaisedHandsQueuerStateInfo {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_1: number = input.readI32();
                        _args.state = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_2: Int64 = input.readI64();
                        _args.start_time = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_3: boolean = input.readBool();
                        _args.is_new_state = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RaisedHandsQueuerStateInfo(_args);
    }
}

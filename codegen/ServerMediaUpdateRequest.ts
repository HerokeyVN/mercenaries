/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
import * as ServerMediaUpdate from "./ServerMediaUpdate";
import * as SessionDescription from "./SessionDescription";
import * as DataMessage from "./DataMessage";
import * as ClientMediaStatus from "./ClientMediaStatus";
import * as State from "./State";
import * as MultipleRelaysAllocationParameters from "./MultipleRelaysAllocationParameters";
import * as SessionDescriptionUpdate from "./SessionDescriptionUpdate";
import * as RelayInfo from "./RelayInfo";
export interface IServerMediaUpdateRequestArgs {
    fromVersion?: number | Int64;
    toVersion?: number | Int64;
    mediaUpdates?: Array<ServerMediaUpdate.ServerMediaUpdate>;
    offer?: SessionDescription.SessionDescription;
    appMessages?: Array<DataMessage.DataMessage>;
    answer?: SessionDescription.SessionDescription;
    mediaStatus?: ClientMediaStatus.ClientMediaStatus;
    renegotiationRequested?: boolean;
    prAnswer?: SessionDescription.SessionDescription;
    stateStore?: Map<string, State.State>;
    sdpOriginLocalId?: string;
    multipleRelaysParameters?: MultipleRelaysAllocationParameters.MultipleRelaysAllocationParameters;
    multipleVideoStreamsAllowed?: boolean;
    renegotiationOffer?: SessionDescription.SessionDescription;
    mediaPath?: number;
    update?: SessionDescriptionUpdate.SessionDescriptionUpdate;
    screenShareStreamAllowed?: boolean;
    stateStoreV2?: Map<number, State.State>;
    allowedCustomVideoContentTypes?: Set<number>;
    relayInfo?: RelayInfo.RelayInfo;
}
export class ServerMediaUpdateRequest {
    public fromVersion?: Int64;
    public toVersion?: Int64;
    public mediaUpdates?: Array<ServerMediaUpdate.ServerMediaUpdate>;
    public offer?: SessionDescription.SessionDescription;
    public appMessages?: Array<DataMessage.DataMessage>;
    public answer?: SessionDescription.SessionDescription;
    public mediaStatus?: ClientMediaStatus.ClientMediaStatus;
    public renegotiationRequested?: boolean;
    public prAnswer?: SessionDescription.SessionDescription;
    public stateStore?: Map<string, State.State>;
    public sdpOriginLocalId?: string;
    public multipleRelaysParameters?: MultipleRelaysAllocationParameters.MultipleRelaysAllocationParameters;
    public multipleVideoStreamsAllowed?: boolean;
    public renegotiationOffer?: SessionDescription.SessionDescription;
    public mediaPath?: number;
    public update?: SessionDescriptionUpdate.SessionDescriptionUpdate;
    public screenShareStreamAllowed?: boolean;
    public stateStoreV2?: Map<number, State.State>;
    public allowedCustomVideoContentTypes?: Set<number>;
    public relayInfo?: RelayInfo.RelayInfo;
    constructor(args?: IServerMediaUpdateRequestArgs) {
        if (args != null && args.fromVersion != null) {
            if (typeof args.fromVersion === "number") {
                this.fromVersion = new Int64(args.fromVersion);
            }
            else {
                this.fromVersion = args.fromVersion;
            }
        }
        if (args != null && args.toVersion != null) {
            if (typeof args.toVersion === "number") {
                this.toVersion = new Int64(args.toVersion);
            }
            else {
                this.toVersion = args.toVersion;
            }
        }
        if (args != null && args.mediaUpdates != null) {
            this.mediaUpdates = args.mediaUpdates;
        }
        if (args != null && args.offer != null) {
            this.offer = args.offer;
        }
        if (args != null && args.appMessages != null) {
            this.appMessages = args.appMessages;
        }
        if (args != null && args.answer != null) {
            this.answer = args.answer;
        }
        if (args != null && args.mediaStatus != null) {
            this.mediaStatus = args.mediaStatus;
        }
        if (args != null && args.renegotiationRequested != null) {
            this.renegotiationRequested = args.renegotiationRequested;
        }
        if (args != null && args.prAnswer != null) {
            this.prAnswer = args.prAnswer;
        }
        if (args != null && args.stateStore != null) {
            this.stateStore = args.stateStore;
        }
        if (args != null && args.sdpOriginLocalId != null) {
            this.sdpOriginLocalId = args.sdpOriginLocalId;
        }
        if (args != null && args.multipleRelaysParameters != null) {
            this.multipleRelaysParameters = args.multipleRelaysParameters;
        }
        if (args != null && args.multipleVideoStreamsAllowed != null) {
            this.multipleVideoStreamsAllowed = args.multipleVideoStreamsAllowed;
        }
        if (args != null && args.renegotiationOffer != null) {
            this.renegotiationOffer = args.renegotiationOffer;
        }
        if (args != null && args.mediaPath != null) {
            this.mediaPath = args.mediaPath;
        }
        if (args != null && args.update != null) {
            this.update = args.update;
        }
        if (args != null && args.screenShareStreamAllowed != null) {
            this.screenShareStreamAllowed = args.screenShareStreamAllowed;
        }
        if (args != null && args.stateStoreV2 != null) {
            this.stateStoreV2 = args.stateStoreV2;
        }
        if (args != null && args.allowedCustomVideoContentTypes != null) {
            this.allowedCustomVideoContentTypes = args.allowedCustomVideoContentTypes;
        }
        if (args != null && args.relayInfo != null) {
            this.relayInfo = args.relayInfo;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ServerMediaUpdateRequest");
        if (this.fromVersion != null) {
            output.writeFieldBegin("fromVersion", thrift.Thrift.Type.I64, 1);
            output.writeI64(this.fromVersion);
            output.writeFieldEnd();
        }
        if (this.toVersion != null) {
            output.writeFieldBegin("toVersion", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.toVersion);
            output.writeFieldEnd();
        }
        if (this.mediaUpdates != null) {
            output.writeFieldBegin("mediaUpdates", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.mediaUpdates.length);
            this.mediaUpdates.forEach((value_1: ServerMediaUpdate.ServerMediaUpdate): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.offer != null) {
            output.writeFieldBegin("offer", thrift.Thrift.Type.STRUCT, 4);
            this.offer.write(output);
            output.writeFieldEnd();
        }
        if (this.appMessages != null) {
            output.writeFieldBegin("appMessages", thrift.Thrift.Type.LIST, 5);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.appMessages.length);
            this.appMessages.forEach((value_2: DataMessage.DataMessage): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.answer != null) {
            output.writeFieldBegin("answer", thrift.Thrift.Type.STRUCT, 6);
            this.answer.write(output);
            output.writeFieldEnd();
        }
        if (this.mediaStatus != null) {
            output.writeFieldBegin("mediaStatus", thrift.Thrift.Type.STRUCT, 7);
            this.mediaStatus.write(output);
            output.writeFieldEnd();
        }
        if (this.renegotiationRequested != null) {
            output.writeFieldBegin("renegotiationRequested", thrift.Thrift.Type.BOOL, 8);
            output.writeBool(this.renegotiationRequested);
            output.writeFieldEnd();
        }
        if (this.prAnswer != null) {
            output.writeFieldBegin("prAnswer", thrift.Thrift.Type.STRUCT, 9);
            this.prAnswer.write(output);
            output.writeFieldEnd();
        }
        if (this.stateStore != null) {
            output.writeFieldBegin("stateStore", thrift.Thrift.Type.MAP, 10);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRUCT, this.stateStore.size);
            this.stateStore.forEach((value_3: State.State, key_1: string): void => {
                output.writeString(key_1);
                value_3.write(output);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.sdpOriginLocalId != null) {
            output.writeFieldBegin("sdpOriginLocalId", thrift.Thrift.Type.STRING, 11);
            output.writeString(this.sdpOriginLocalId);
            output.writeFieldEnd();
        }
        if (this.multipleRelaysParameters != null) {
            output.writeFieldBegin("multipleRelaysParameters", thrift.Thrift.Type.STRUCT, 12);
            this.multipleRelaysParameters.write(output);
            output.writeFieldEnd();
        }
        if (this.multipleVideoStreamsAllowed != null) {
            output.writeFieldBegin("multipleVideoStreamsAllowed", thrift.Thrift.Type.BOOL, 13);
            output.writeBool(this.multipleVideoStreamsAllowed);
            output.writeFieldEnd();
        }
        if (this.renegotiationOffer != null) {
            output.writeFieldBegin("renegotiationOffer", thrift.Thrift.Type.STRUCT, 14);
            this.renegotiationOffer.write(output);
            output.writeFieldEnd();
        }
        if (this.mediaPath != null) {
            output.writeFieldBegin("mediaPath", thrift.Thrift.Type.I32, 15);
            output.writeI32(this.mediaPath);
            output.writeFieldEnd();
        }
        if (this.update != null) {
            output.writeFieldBegin("update", thrift.Thrift.Type.STRUCT, 16);
            this.update.write(output);
            output.writeFieldEnd();
        }
        if (this.screenShareStreamAllowed != null) {
            output.writeFieldBegin("screenShareStreamAllowed", thrift.Thrift.Type.BOOL, 17);
            output.writeBool(this.screenShareStreamAllowed);
            output.writeFieldEnd();
        }
        if (this.stateStoreV2 != null) {
            output.writeFieldBegin("stateStoreV2", thrift.Thrift.Type.MAP, 18);
            output.writeMapBegin(thrift.Thrift.Type.I32, thrift.Thrift.Type.STRUCT, this.stateStoreV2.size);
            this.stateStoreV2.forEach((value_4: State.State, key_2: number): void => {
                output.writeI32(key_2);
                value_4.write(output);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.allowedCustomVideoContentTypes != null) {
            output.writeFieldBegin("allowedCustomVideoContentTypes", thrift.Thrift.Type.SET, 19);
            output.writeSetBegin(thrift.Thrift.Type.I32, this.allowedCustomVideoContentTypes.size);
            this.allowedCustomVideoContentTypes.forEach((value_5: number): void => {
                output.writeI32(value_5);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.relayInfo != null) {
            output.writeFieldBegin("relayInfo", thrift.Thrift.Type.STRUCT, 20);
            this.relayInfo.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ServerMediaUpdateRequest {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_6: Int64 = input.readI64();
                        _args.fromVersion = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_7: Int64 = input.readI64();
                        _args.toVersion = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_8: Array<ServerMediaUpdate.ServerMediaUpdate> = new Array<ServerMediaUpdate.ServerMediaUpdate>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_9: ServerMediaUpdate.ServerMediaUpdate = ServerMediaUpdate.ServerMediaUpdate.read(input);
                            value_8.push(value_9);
                        }
                        input.readListEnd();
                        _args.mediaUpdates = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_10: SessionDescription.SessionDescription = SessionDescription.SessionDescription.read(input);
                        _args.offer = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_11: Array<DataMessage.DataMessage> = new Array<DataMessage.DataMessage>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_12: DataMessage.DataMessage = DataMessage.DataMessage.read(input);
                            value_11.push(value_12);
                        }
                        input.readListEnd();
                        _args.appMessages = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_13: SessionDescription.SessionDescription = SessionDescription.SessionDescription.read(input);
                        _args.answer = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_14: ClientMediaStatus.ClientMediaStatus = ClientMediaStatus.ClientMediaStatus.read(input);
                        _args.mediaStatus = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_15: boolean = input.readBool();
                        _args.renegotiationRequested = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_16: SessionDescription.SessionDescription = SessionDescription.SessionDescription.read(input);
                        _args.prAnswer = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_17: Map<string, State.State> = new Map<string, State.State>();
                        const metadata_3: thrift.TMap = input.readMapBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const key_3: string = input.readString();
                            const value_18: State.State = State.State.read(input);
                            value_17.set(key_3, value_18);
                        }
                        input.readMapEnd();
                        _args.stateStore = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_19: string = input.readString();
                        _args.sdpOriginLocalId = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_20: MultipleRelaysAllocationParameters.MultipleRelaysAllocationParameters = MultipleRelaysAllocationParameters.MultipleRelaysAllocationParameters.read(input);
                        _args.multipleRelaysParameters = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_21: boolean = input.readBool();
                        _args.multipleVideoStreamsAllowed = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_22: SessionDescription.SessionDescription = SessionDescription.SessionDescription.read(input);
                        _args.renegotiationOffer = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_23: number = input.readI32();
                        _args.mediaPath = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_24: SessionDescriptionUpdate.SessionDescriptionUpdate = SessionDescriptionUpdate.SessionDescriptionUpdate.read(input);
                        _args.update = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_25: boolean = input.readBool();
                        _args.screenShareStreamAllowed = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_26: Map<number, State.State> = new Map<number, State.State>();
                        const metadata_4: thrift.TMap = input.readMapBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const key_4: number = input.readI32();
                            const value_27: State.State = State.State.read(input);
                            value_26.set(key_4, value_27);
                        }
                        input.readMapEnd();
                        _args.stateStoreV2 = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_28: Set<number> = new Set<number>();
                        const metadata_5: thrift.TSet = input.readSetBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_29: number = input.readI32();
                            value_28.add(value_29);
                        }
                        input.readSetEnd();
                        _args.allowedCustomVideoContentTypes = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_30: RelayInfo.RelayInfo = RelayInfo.RelayInfo.read(input);
                        _args.relayInfo = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ServerMediaUpdateRequest(_args);
    }
}

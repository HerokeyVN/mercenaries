/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as ActiveConversationWave from "./ActiveConversationWave";
export interface ISidebandInputStateArgs {
    sideband_type?: number;
    participant_ids?: Array<string>;
    wave?: ActiveConversationWave.ActiveConversationWave;
    availability?: number;
    active_conversation_id?: string;
    conversation_context?: string;
}
export class SidebandInputState {
    public sideband_type?: number;
    public participant_ids?: Array<string>;
    public wave?: ActiveConversationWave.ActiveConversationWave;
    public availability?: number;
    public active_conversation_id?: string;
    public conversation_context?: string;
    constructor(args?: ISidebandInputStateArgs) {
        if (args != null && args.sideband_type != null) {
            this.sideband_type = args.sideband_type;
        }
        if (args != null && args.participant_ids != null) {
            this.participant_ids = args.participant_ids;
        }
        if (args != null && args.wave != null) {
            this.wave = args.wave;
        }
        if (args != null && args.availability != null) {
            this.availability = args.availability;
        }
        if (args != null && args.active_conversation_id != null) {
            this.active_conversation_id = args.active_conversation_id;
        }
        if (args != null && args.conversation_context != null) {
            this.conversation_context = args.conversation_context;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("SidebandInputState");
        if (this.sideband_type != null) {
            output.writeFieldBegin("sideband_type", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.sideband_type);
            output.writeFieldEnd();
        }
        if (this.participant_ids != null) {
            output.writeFieldBegin("participant_ids", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.participant_ids.length);
            this.participant_ids.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.wave != null) {
            output.writeFieldBegin("wave", thrift.Thrift.Type.STRUCT, 3);
            this.wave.write(output);
            output.writeFieldEnd();
        }
        if (this.availability != null) {
            output.writeFieldBegin("availability", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.availability);
            output.writeFieldEnd();
        }
        if (this.active_conversation_id != null) {
            output.writeFieldBegin("active_conversation_id", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.active_conversation_id);
            output.writeFieldEnd();
        }
        if (this.conversation_context != null) {
            output.writeFieldBegin("conversation_context", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.conversation_context);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): SidebandInputState {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: number = input.readI32();
                        _args.sideband_type = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_3: Array<string> = new Array<string>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_4: string = input.readString();
                            value_3.push(value_4);
                        }
                        input.readListEnd();
                        _args.participant_ids = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_5: ActiveConversationWave.ActiveConversationWave = ActiveConversationWave.ActiveConversationWave.read(input);
                        _args.wave = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_6: number = input.readI32();
                        _args.availability = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.active_conversation_id = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.conversation_context = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new SidebandInputState(_args);
    }
}

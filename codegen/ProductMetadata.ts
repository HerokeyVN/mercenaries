/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as UserProfile from "./UserProfile";
export interface IProductMetadataArgs {
    callerInfo?: UserProfile.UserProfile;
    liveBroadcastId?: string;
    callingTags?: number;
    backingIdentifier?: string;
}
export class ProductMetadata {
    public callerInfo?: UserProfile.UserProfile;
    public liveBroadcastId?: string;
    public callingTags?: number;
    public backingIdentifier?: string;
    constructor(args?: IProductMetadataArgs) {
        if (args != null && args.callerInfo != null) {
            this.callerInfo = args.callerInfo;
        }
        if (args != null && args.liveBroadcastId != null) {
            this.liveBroadcastId = args.liveBroadcastId;
        }
        if (args != null && args.callingTags != null) {
            this.callingTags = args.callingTags;
        }
        if (args != null && args.backingIdentifier != null) {
            this.backingIdentifier = args.backingIdentifier;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ProductMetadata");
        if (this.callerInfo != null) {
            output.writeFieldBegin("callerInfo", thrift.Thrift.Type.STRUCT, 1);
            this.callerInfo.write(output);
            output.writeFieldEnd();
        }
        if (this.liveBroadcastId != null) {
            output.writeFieldBegin("liveBroadcastId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.liveBroadcastId);
            output.writeFieldEnd();
        }
        if (this.callingTags != null) {
            output.writeFieldBegin("callingTags", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.callingTags);
            output.writeFieldEnd();
        }
        if (this.backingIdentifier != null) {
            output.writeFieldBegin("backingIdentifier", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.backingIdentifier);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ProductMetadata {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_1: UserProfile.UserProfile = UserProfile.UserProfile.read(input);
                        _args.callerInfo = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.liveBroadcastId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: number = input.readI32();
                        _args.callingTags = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.backingIdentifier = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ProductMetadata(_args);
    }
}

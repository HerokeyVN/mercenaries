/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface ISfuAllocationArgs {
    smcTier?: string;
    region?: string;
    isUsfu?: boolean;
    isEdge?: boolean;
}
export class SfuAllocation {
    public smcTier?: string;
    public region?: string;
    public isUsfu?: boolean;
    public isEdge?: boolean;
    constructor(args?: ISfuAllocationArgs) {
        if (args != null && args.smcTier != null) {
            this.smcTier = args.smcTier;
        }
        if (args != null && args.region != null) {
            this.region = args.region;
        }
        if (args != null && args.isUsfu != null) {
            this.isUsfu = args.isUsfu;
        }
        if (args != null && args.isEdge != null) {
            this.isEdge = args.isEdge;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("SfuAllocation");
        if (this.smcTier != null) {
            output.writeFieldBegin("smcTier", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.smcTier);
            output.writeFieldEnd();
        }
        if (this.region != null) {
            output.writeFieldBegin("region", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.region);
            output.writeFieldEnd();
        }
        if (this.isUsfu != null) {
            output.writeFieldBegin("isUsfu", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.isUsfu);
            output.writeFieldEnd();
        }
        if (this.isEdge != null) {
            output.writeFieldBegin("isEdge", thrift.Thrift.Type.BOOL, 4);
            output.writeBool(this.isEdge);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): SfuAllocation {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.smcTier = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.region = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_3: boolean = input.readBool();
                        _args.isUsfu = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_4: boolean = input.readBool();
                        _args.isEdge = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new SfuAllocation(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
import * as SpeakerDetail from "./SpeakerDetail";
export interface IDominantSpeakerNotificationArgs {
    userId?: string;
    cname?: string;
    trackIds?: Array<string>;
    transactionId?: number | Int64;
    dominantSpeakers?: Array<SpeakerDetail.SpeakerDetail>;
}
export class DominantSpeakerNotification {
    public userId?: string;
    public cname?: string;
    public trackIds?: Array<string>;
    public transactionId?: Int64;
    public dominantSpeakers?: Array<SpeakerDetail.SpeakerDetail>;
    constructor(args?: IDominantSpeakerNotificationArgs) {
        if (args != null && args.userId != null) {
            this.userId = args.userId;
        }
        if (args != null && args.cname != null) {
            this.cname = args.cname;
        }
        if (args != null && args.trackIds != null) {
            this.trackIds = args.trackIds;
        }
        if (args != null && args.transactionId != null) {
            if (typeof args.transactionId === "number") {
                this.transactionId = new Int64(args.transactionId);
            }
            else {
                this.transactionId = args.transactionId;
            }
        }
        if (args != null && args.dominantSpeakers != null) {
            this.dominantSpeakers = args.dominantSpeakers;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DominantSpeakerNotification");
        if (this.userId != null) {
            output.writeFieldBegin("userId", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.userId);
            output.writeFieldEnd();
        }
        if (this.cname != null) {
            output.writeFieldBegin("cname", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.cname);
            output.writeFieldEnd();
        }
        if (this.trackIds != null) {
            output.writeFieldBegin("trackIds", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.trackIds.length);
            this.trackIds.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.transactionId != null) {
            output.writeFieldBegin("transactionId", thrift.Thrift.Type.I64, 5);
            output.writeI64(this.transactionId);
            output.writeFieldEnd();
        }
        if (this.dominantSpeakers != null) {
            output.writeFieldBegin("dominantSpeakers", thrift.Thrift.Type.LIST, 6);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.dominantSpeakers.length);
            this.dominantSpeakers.forEach((value_2: SpeakerDetail.SpeakerDetail): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DominantSpeakerNotification {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.userId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.cname = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_5: Array<string> = new Array<string>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_6: string = input.readString();
                            value_5.push(value_6);
                        }
                        input.readListEnd();
                        _args.trackIds = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_7: Int64 = input.readI64();
                        _args.transactionId = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_8: Array<SpeakerDetail.SpeakerDetail> = new Array<SpeakerDetail.SpeakerDetail>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_9: SpeakerDetail.SpeakerDetail = SpeakerDetail.SpeakerDetail.read(input);
                            value_8.push(value_9);
                        }
                        input.readListEnd();
                        _args.dominantSpeakers = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DominantSpeakerNotification(_args);
    }
}

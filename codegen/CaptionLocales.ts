/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface ICaptionLocalesArgs {
    locale?: string;
    localized_language?: string;
    localized_country?: string;
    localized_creation_method?: string;
    captions_url?: string;
}
export class CaptionLocales {
    public locale?: string;
    public localized_language?: string;
    public localized_country?: string;
    public localized_creation_method?: string;
    public captions_url?: string;
    constructor(args?: ICaptionLocalesArgs) {
        if (args != null && args.locale != null) {
            this.locale = args.locale;
        }
        if (args != null && args.localized_language != null) {
            this.localized_language = args.localized_language;
        }
        if (args != null && args.localized_country != null) {
            this.localized_country = args.localized_country;
        }
        if (args != null && args.localized_creation_method != null) {
            this.localized_creation_method = args.localized_creation_method;
        }
        if (args != null && args.captions_url != null) {
            this.captions_url = args.captions_url;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CaptionLocales");
        if (this.locale != null) {
            output.writeFieldBegin("locale", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.locale);
            output.writeFieldEnd();
        }
        if (this.localized_language != null) {
            output.writeFieldBegin("localized_language", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.localized_language);
            output.writeFieldEnd();
        }
        if (this.localized_country != null) {
            output.writeFieldBegin("localized_country", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.localized_country);
            output.writeFieldEnd();
        }
        if (this.localized_creation_method != null) {
            output.writeFieldBegin("localized_creation_method", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.localized_creation_method);
            output.writeFieldEnd();
        }
        if (this.captions_url != null) {
            output.writeFieldBegin("captions_url", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.captions_url);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CaptionLocales {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.locale = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.localized_language = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.localized_country = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.localized_creation_method = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.captions_url = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CaptionLocales(_args);
    }
}

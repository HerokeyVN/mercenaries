/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IScreenshareFloorControlInputStateArgs {
    floorControlAction?: number;
    floorControlStream?: number;
    floorControlIntent?: number;
    session_id?: string;
    clientEndpointId?: string;
}
export class ScreenshareFloorControlInputState {
    public floorControlAction?: number;
    public floorControlStream?: number;
    public floorControlIntent?: number;
    public session_id?: string;
    public clientEndpointId?: string;
    constructor(args?: IScreenshareFloorControlInputStateArgs) {
        if (args != null && args.floorControlAction != null) {
            this.floorControlAction = args.floorControlAction;
        }
        if (args != null && args.floorControlStream != null) {
            this.floorControlStream = args.floorControlStream;
        }
        if (args != null && args.floorControlIntent != null) {
            this.floorControlIntent = args.floorControlIntent;
        }
        if (args != null && args.session_id != null) {
            this.session_id = args.session_id;
        }
        if (args != null && args.clientEndpointId != null) {
            this.clientEndpointId = args.clientEndpointId;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ScreenshareFloorControlInputState");
        if (this.floorControlAction != null) {
            output.writeFieldBegin("floorControlAction", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.floorControlAction);
            output.writeFieldEnd();
        }
        if (this.floorControlStream != null) {
            output.writeFieldBegin("floorControlStream", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.floorControlStream);
            output.writeFieldEnd();
        }
        if (this.floorControlIntent != null) {
            output.writeFieldBegin("floorControlIntent", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.floorControlIntent);
            output.writeFieldEnd();
        }
        if (this.session_id != null) {
            output.writeFieldBegin("session_id", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.session_id);
            output.writeFieldEnd();
        }
        if (this.clientEndpointId != null) {
            output.writeFieldBegin("clientEndpointId", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.clientEndpointId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ScreenshareFloorControlInputState {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_1: number = input.readI32();
                        _args.floorControlAction = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: number = input.readI32();
                        _args.floorControlStream = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: number = input.readI32();
                        _args.floorControlIntent = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.session_id = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.clientEndpointId = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ScreenshareFloorControlInputState(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
import * as InitiatorInfo from "./InitiatorInfo";
export interface ICountdownTimerArgs {
    uuid?: string;
    last_action_timestamp?: number | Int64;
    total_duration?: number | Int64;
    initiator?: InitiatorInfo.InitiatorInfo;
    status?: number;
    remaining_duration?: number | Int64;
}
export class CountdownTimer {
    public uuid?: string;
    public last_action_timestamp?: Int64;
    public total_duration?: Int64;
    public initiator?: InitiatorInfo.InitiatorInfo;
    public status?: number;
    public remaining_duration?: Int64;
    constructor(args?: ICountdownTimerArgs) {
        if (args != null && args.uuid != null) {
            this.uuid = args.uuid;
        }
        if (args != null && args.last_action_timestamp != null) {
            if (typeof args.last_action_timestamp === "number") {
                this.last_action_timestamp = new Int64(args.last_action_timestamp);
            }
            else {
                this.last_action_timestamp = args.last_action_timestamp;
            }
        }
        if (args != null && args.total_duration != null) {
            if (typeof args.total_duration === "number") {
                this.total_duration = new Int64(args.total_duration);
            }
            else {
                this.total_duration = args.total_duration;
            }
        }
        if (args != null && args.initiator != null) {
            this.initiator = args.initiator;
        }
        if (args != null && args.status != null) {
            this.status = args.status;
        }
        if (args != null && args.remaining_duration != null) {
            if (typeof args.remaining_duration === "number") {
                this.remaining_duration = new Int64(args.remaining_duration);
            }
            else {
                this.remaining_duration = args.remaining_duration;
            }
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CountdownTimer");
        if (this.uuid != null) {
            output.writeFieldBegin("uuid", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.uuid);
            output.writeFieldEnd();
        }
        if (this.last_action_timestamp != null) {
            output.writeFieldBegin("last_action_timestamp", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.last_action_timestamp);
            output.writeFieldEnd();
        }
        if (this.total_duration != null) {
            output.writeFieldBegin("total_duration", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.total_duration);
            output.writeFieldEnd();
        }
        if (this.initiator != null) {
            output.writeFieldBegin("initiator", thrift.Thrift.Type.STRUCT, 4);
            this.initiator.write(output);
            output.writeFieldEnd();
        }
        if (this.status != null) {
            output.writeFieldBegin("status", thrift.Thrift.Type.I32, 5);
            output.writeI32(this.status);
            output.writeFieldEnd();
        }
        if (this.remaining_duration != null) {
            output.writeFieldBegin("remaining_duration", thrift.Thrift.Type.I64, 6);
            output.writeI64(this.remaining_duration);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CountdownTimer {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.uuid = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_2: Int64 = input.readI64();
                        _args.last_action_timestamp = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_3: Int64 = input.readI64();
                        _args.total_duration = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: InitiatorInfo.InitiatorInfo = InitiatorInfo.InitiatorInfo.read(input);
                        _args.initiator = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: number = input.readI32();
                        _args.status = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_6: Int64 = input.readI64();
                        _args.remaining_duration = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CountdownTimer(_args);
    }
}

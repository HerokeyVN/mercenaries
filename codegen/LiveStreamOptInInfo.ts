/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface ILiveStreamOptInInfoArgs {
    audience?: number;
    target?: number;
    targetName?: string;
    hostId?: string;
    targetSize?: string;
}
export class LiveStreamOptInInfo {
    public audience?: number;
    public target?: number;
    public targetName?: string;
    public hostId?: string;
    public targetSize?: string;
    constructor(args?: ILiveStreamOptInInfoArgs) {
        if (args != null && args.audience != null) {
            this.audience = args.audience;
        }
        if (args != null && args.target != null) {
            this.target = args.target;
        }
        if (args != null && args.targetName != null) {
            this.targetName = args.targetName;
        }
        if (args != null && args.hostId != null) {
            this.hostId = args.hostId;
        }
        if (args != null && args.targetSize != null) {
            this.targetSize = args.targetSize;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("LiveStreamOptInInfo");
        if (this.audience != null) {
            output.writeFieldBegin("audience", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.audience);
            output.writeFieldEnd();
        }
        if (this.target != null) {
            output.writeFieldBegin("target", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.target);
            output.writeFieldEnd();
        }
        if (this.targetName != null) {
            output.writeFieldBegin("targetName", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.targetName);
            output.writeFieldEnd();
        }
        if (this.hostId != null) {
            output.writeFieldBegin("hostId", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.hostId);
            output.writeFieldEnd();
        }
        if (this.targetSize != null) {
            output.writeFieldBegin("targetSize", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.targetSize);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): LiveStreamOptInInfo {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_1: number = input.readI32();
                        _args.audience = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: number = input.readI32();
                        _args.target = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.targetName = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.hostId = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.targetSize = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new LiveStreamOptInInfo(_args);
    }
}

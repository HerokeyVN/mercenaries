/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
export interface IClientTrackInfoArgs {
    enabled?: boolean;
    pausedUplink?: number;
    pausedDownlink?: number;
    owner?: string;
    label?: number;
    customVideoContentType?: number;
    name?: string;
    customAudioContentType?: number;
    nodeId?: number | Int64;
}
export class ClientTrackInfo {
    public enabled?: boolean;
    public pausedUplink?: number;
    public pausedDownlink?: number;
    public owner?: string;
    public label?: number;
    public customVideoContentType?: number;
    public name?: string;
    public customAudioContentType?: number;
    public nodeId?: Int64;
    constructor(args?: IClientTrackInfoArgs) {
        if (args != null && args.enabled != null) {
            this.enabled = args.enabled;
        }
        if (args != null && args.pausedUplink != null) {
            this.pausedUplink = args.pausedUplink;
        }
        if (args != null && args.pausedDownlink != null) {
            this.pausedDownlink = args.pausedDownlink;
        }
        if (args != null && args.owner != null) {
            this.owner = args.owner;
        }
        if (args != null && args.label != null) {
            this.label = args.label;
        }
        if (args != null && args.customVideoContentType != null) {
            this.customVideoContentType = args.customVideoContentType;
        }
        if (args != null && args.name != null) {
            this.name = args.name;
        }
        if (args != null && args.customAudioContentType != null) {
            this.customAudioContentType = args.customAudioContentType;
        }
        if (args != null && args.nodeId != null) {
            if (typeof args.nodeId === "number") {
                this.nodeId = new Int64(args.nodeId);
            }
            else {
                this.nodeId = args.nodeId;
            }
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ClientTrackInfo");
        if (this.enabled != null) {
            output.writeFieldBegin("enabled", thrift.Thrift.Type.BOOL, 1);
            output.writeBool(this.enabled);
            output.writeFieldEnd();
        }
        if (this.pausedUplink != null) {
            output.writeFieldBegin("pausedUplink", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.pausedUplink);
            output.writeFieldEnd();
        }
        if (this.pausedDownlink != null) {
            output.writeFieldBegin("pausedDownlink", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.pausedDownlink);
            output.writeFieldEnd();
        }
        if (this.owner != null) {
            output.writeFieldBegin("owner", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.owner);
            output.writeFieldEnd();
        }
        if (this.label != null) {
            output.writeFieldBegin("label", thrift.Thrift.Type.I32, 5);
            output.writeI32(this.label);
            output.writeFieldEnd();
        }
        if (this.customVideoContentType != null) {
            output.writeFieldBegin("customVideoContentType", thrift.Thrift.Type.I32, 6);
            output.writeI32(this.customVideoContentType);
            output.writeFieldEnd();
        }
        if (this.name != null) {
            output.writeFieldBegin("name", thrift.Thrift.Type.STRING, 7);
            output.writeString(this.name);
            output.writeFieldEnd();
        }
        if (this.customAudioContentType != null) {
            output.writeFieldBegin("customAudioContentType", thrift.Thrift.Type.I32, 8);
            output.writeI32(this.customAudioContentType);
            output.writeFieldEnd();
        }
        if (this.nodeId != null) {
            output.writeFieldBegin("nodeId", thrift.Thrift.Type.I64, 9);
            output.writeI64(this.nodeId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ClientTrackInfo {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_1: boolean = input.readBool();
                        _args.enabled = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: number = input.readI32();
                        _args.pausedUplink = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: number = input.readI32();
                        _args.pausedDownlink = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.owner = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: number = input.readI32();
                        _args.label = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_6: number = input.readI32();
                        _args.customVideoContentType = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.name = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_8: number = input.readI32();
                        _args.customAudioContentType = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_9: Int64 = input.readI64();
                        _args.nodeId = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ClientTrackInfo(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as Bandwidth from "./Bandwidth";
import * as CryptoParam from "./CryptoParam";
export interface ISessionDescriptionArgs {
    sessionId?: string;
    sessionVersion?: string;
    supportsMsid?: boolean;
    useIceLite?: boolean;
    features?: Array<string>;
    connectionRole?: number;
    bandwidth?: Bandwidth.Bandwidth;
    transportBundle?: Array<string>;
    commonCryptos?: Array<CryptoParam.CryptoParam>;
}
export class SessionDescription {
    public sessionId?: string;
    public sessionVersion?: string;
    public supportsMsid?: boolean;
    public useIceLite?: boolean;
    public features?: Array<string>;
    public connectionRole?: number;
    public bandwidth?: Bandwidth.Bandwidth;
    public transportBundle?: Array<string>;
    public commonCryptos?: Array<CryptoParam.CryptoParam>;
    constructor(args?: ISessionDescriptionArgs) {
        if (args != null && args.sessionId != null) {
            this.sessionId = args.sessionId;
        }
        if (args != null && args.sessionVersion != null) {
            this.sessionVersion = args.sessionVersion;
        }
        if (args != null && args.supportsMsid != null) {
            this.supportsMsid = args.supportsMsid;
        }
        if (args != null && args.useIceLite != null) {
            this.useIceLite = args.useIceLite;
        }
        if (args != null && args.features != null) {
            this.features = args.features;
        }
        if (args != null && args.connectionRole != null) {
            this.connectionRole = args.connectionRole;
        }
        if (args != null && args.bandwidth != null) {
            this.bandwidth = args.bandwidth;
        }
        if (args != null && args.transportBundle != null) {
            this.transportBundle = args.transportBundle;
        }
        if (args != null && args.commonCryptos != null) {
            this.commonCryptos = args.commonCryptos;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("SessionDescription");
        if (this.sessionId != null) {
            output.writeFieldBegin("sessionId", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.sessionId);
            output.writeFieldEnd();
        }
        if (this.sessionVersion != null) {
            output.writeFieldBegin("sessionVersion", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.sessionVersion);
            output.writeFieldEnd();
        }
        if (this.supportsMsid != null) {
            output.writeFieldBegin("supportsMsid", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.supportsMsid);
            output.writeFieldEnd();
        }
        if (this.useIceLite != null) {
            output.writeFieldBegin("useIceLite", thrift.Thrift.Type.BOOL, 4);
            output.writeBool(this.useIceLite);
            output.writeFieldEnd();
        }
        if (this.features != null) {
            output.writeFieldBegin("features", thrift.Thrift.Type.LIST, 5);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.features.length);
            this.features.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.connectionRole != null) {
            output.writeFieldBegin("connectionRole", thrift.Thrift.Type.I32, 6);
            output.writeI32(this.connectionRole);
            output.writeFieldEnd();
        }
        if (this.bandwidth != null) {
            output.writeFieldBegin("bandwidth", thrift.Thrift.Type.STRUCT, 7);
            this.bandwidth.write(output);
            output.writeFieldEnd();
        }
        if (this.transportBundle != null) {
            output.writeFieldBegin("transportBundle", thrift.Thrift.Type.LIST, 8);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.transportBundle.length);
            this.transportBundle.forEach((value_2: string): void => {
                output.writeString(value_2);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.commonCryptos != null) {
            output.writeFieldBegin("commonCryptos", thrift.Thrift.Type.LIST, 9);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.commonCryptos.length);
            this.commonCryptos.forEach((value_3: CryptoParam.CryptoParam): void => {
                value_3.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): SessionDescription {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.sessionId = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.sessionVersion = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_6: boolean = input.readBool();
                        _args.supportsMsid = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_7: boolean = input.readBool();
                        _args.useIceLite = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_8: Array<string> = new Array<string>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_9: string = input.readString();
                            value_8.push(value_9);
                        }
                        input.readListEnd();
                        _args.features = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_10: number = input.readI32();
                        _args.connectionRole = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_11: Bandwidth.Bandwidth = Bandwidth.Bandwidth.read(input);
                        _args.bandwidth = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_12: Array<string> = new Array<string>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_13: string = input.readString();
                            value_12.push(value_13);
                        }
                        input.readListEnd();
                        _args.transportBundle = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_14: Array<CryptoParam.CryptoParam> = new Array<CryptoParam.CryptoParam>();
                        const metadata_3: thrift.TList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_15: CryptoParam.CryptoParam = CryptoParam.CryptoParam.read(input);
                            value_14.push(value_15);
                        }
                        input.readListEnd();
                        _args.commonCryptos = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new SessionDescription(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IE2eeDataArgs {
    encryptedTopic?: string;
    encryptedData?: string;
    senderId?: string;
    targetIds?: Set<Buffer>;
    messageType?: number;
}
export class E2eeData {
    public encryptedTopic?: string;
    public encryptedData?: string;
    public senderId?: string;
    public targetIds?: Set<Buffer>;
    public messageType?: number;
    constructor(args?: IE2eeDataArgs) {
        if (args != null && args.encryptedTopic != null) {
            this.encryptedTopic = args.encryptedTopic;
        }
        if (args != null && args.encryptedData != null) {
            this.encryptedData = args.encryptedData;
        }
        if (args != null && args.senderId != null) {
            this.senderId = args.senderId;
        }
        if (args != null && args.targetIds != null) {
            this.targetIds = args.targetIds;
        }
        if (args != null && args.messageType != null) {
            this.messageType = args.messageType;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("E2eeData");
        if (this.encryptedTopic != null) {
            output.writeFieldBegin("encryptedTopic", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.encryptedTopic);
            output.writeFieldEnd();
        }
        if (this.encryptedData != null) {
            output.writeFieldBegin("encryptedData", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.encryptedData);
            output.writeFieldEnd();
        }
        if (this.senderId != null) {
            output.writeFieldBegin("senderId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.senderId);
            output.writeFieldEnd();
        }
        if (this.targetIds != null) {
            output.writeFieldBegin("targetIds", thrift.Thrift.Type.SET, 4);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.targetIds.size);
            this.targetIds.forEach((value_1: Buffer): void => {
                output.writeBinary(value_1);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.messageType != null) {
            output.writeFieldBegin("messageType", thrift.Thrift.Type.I32, 5);
            output.writeI32(this.messageType);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): E2eeData {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.encryptedTopic = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.encryptedData = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.senderId = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_5: Set<Buffer> = new Set<Buffer>();
                        const metadata_1: thrift.TSet = input.readSetBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_6: Buffer = input.readBinary();
                            value_5.add(value_6);
                        }
                        input.readSetEnd();
                        _args.targetIds = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_7: number = input.readI32();
                        _args.messageType = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new E2eeData(_args);
    }
}

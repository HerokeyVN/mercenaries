/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as RtcpFbVal from "./RtcpFbVal";
export interface ICodecDescriptionArgs {
    payloadType?: number;
    encodingName?: number;
    clockRateKhz?: number;
    numAudioChannels?: number;
    fmtParameters?: Map<number, string>;
    enabledOptions?: Set<number>;
    rtcpFbParameters?: Map<string, string>;
    rtcpFbParamList?: Array<RtcpFbVal.RtcpFbVal>;
    videoWidth?: number;
    videoHeight?: number;
}
export class CodecDescription {
    public payloadType?: number;
    public encodingName?: number;
    public clockRateKhz?: number;
    public numAudioChannels?: number;
    public fmtParameters?: Map<number, string>;
    public enabledOptions?: Set<number>;
    public rtcpFbParameters?: Map<string, string>;
    public rtcpFbParamList?: Array<RtcpFbVal.RtcpFbVal>;
    public videoWidth?: number;
    public videoHeight?: number;
    constructor(args?: ICodecDescriptionArgs) {
        if (args != null && args.payloadType != null) {
            this.payloadType = args.payloadType;
        }
        if (args != null && args.encodingName != null) {
            this.encodingName = args.encodingName;
        }
        if (args != null && args.clockRateKhz != null) {
            this.clockRateKhz = args.clockRateKhz;
        }
        if (args != null && args.numAudioChannels != null) {
            this.numAudioChannels = args.numAudioChannels;
        }
        if (args != null && args.fmtParameters != null) {
            this.fmtParameters = args.fmtParameters;
        }
        if (args != null && args.enabledOptions != null) {
            this.enabledOptions = args.enabledOptions;
        }
        if (args != null && args.rtcpFbParameters != null) {
            this.rtcpFbParameters = args.rtcpFbParameters;
        }
        if (args != null && args.rtcpFbParamList != null) {
            this.rtcpFbParamList = args.rtcpFbParamList;
        }
        if (args != null && args.videoWidth != null) {
            this.videoWidth = args.videoWidth;
        }
        if (args != null && args.videoHeight != null) {
            this.videoHeight = args.videoHeight;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CodecDescription");
        if (this.payloadType != null) {
            output.writeFieldBegin("payloadType", thrift.Thrift.Type.BYTE, 1);
            output.writeByte(this.payloadType);
            output.writeFieldEnd();
        }
        if (this.encodingName != null) {
            output.writeFieldBegin("encodingName", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.encodingName);
            output.writeFieldEnd();
        }
        if (this.clockRateKhz != null) {
            output.writeFieldBegin("clockRateKhz", thrift.Thrift.Type.BYTE, 3);
            output.writeByte(this.clockRateKhz);
            output.writeFieldEnd();
        }
        if (this.numAudioChannels != null) {
            output.writeFieldBegin("numAudioChannels", thrift.Thrift.Type.BYTE, 4);
            output.writeByte(this.numAudioChannels);
            output.writeFieldEnd();
        }
        if (this.fmtParameters != null) {
            output.writeFieldBegin("fmtParameters", thrift.Thrift.Type.MAP, 5);
            output.writeMapBegin(thrift.Thrift.Type.I32, thrift.Thrift.Type.STRING, this.fmtParameters.size);
            this.fmtParameters.forEach((value_1: string, key_1: number): void => {
                output.writeI32(key_1);
                output.writeString(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.enabledOptions != null) {
            output.writeFieldBegin("enabledOptions", thrift.Thrift.Type.SET, 6);
            output.writeSetBegin(thrift.Thrift.Type.I32, this.enabledOptions.size);
            this.enabledOptions.forEach((value_2: number): void => {
                output.writeI32(value_2);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.rtcpFbParameters != null) {
            output.writeFieldBegin("rtcpFbParameters", thrift.Thrift.Type.MAP, 7);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.rtcpFbParameters.size);
            this.rtcpFbParameters.forEach((value_3: string, key_2: string): void => {
                output.writeString(key_2);
                output.writeString(value_3);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.rtcpFbParamList != null) {
            output.writeFieldBegin("rtcpFbParamList", thrift.Thrift.Type.LIST, 10);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.rtcpFbParamList.length);
            this.rtcpFbParamList.forEach((value_4: RtcpFbVal.RtcpFbVal): void => {
                value_4.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.videoWidth != null) {
            output.writeFieldBegin("videoWidth", thrift.Thrift.Type.I32, 8);
            output.writeI32(this.videoWidth);
            output.writeFieldEnd();
        }
        if (this.videoHeight != null) {
            output.writeFieldBegin("videoHeight", thrift.Thrift.Type.I32, 9);
            output.writeI32(this.videoHeight);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CodecDescription {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.BYTE) {
                        const value_5: number = input.readByte();
                        _args.payloadType = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_6: number = input.readI32();
                        _args.encodingName = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BYTE) {
                        const value_7: number = input.readByte();
                        _args.clockRateKhz = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.BYTE) {
                        const value_8: number = input.readByte();
                        _args.numAudioChannels = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_9: Map<number, string> = new Map<number, string>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_3: number = input.readI32();
                            const value_10: string = input.readString();
                            value_9.set(key_3, value_10);
                        }
                        input.readMapEnd();
                        _args.fmtParameters = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_11: Set<number> = new Set<number>();
                        const metadata_2: thrift.TSet = input.readSetBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_12: number = input.readI32();
                            value_11.add(value_12);
                        }
                        input.readSetEnd();
                        _args.enabledOptions = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_13: Map<string, string> = new Map<string, string>();
                        const metadata_3: thrift.TMap = input.readMapBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const key_4: string = input.readString();
                            const value_14: string = input.readString();
                            value_13.set(key_4, value_14);
                        }
                        input.readMapEnd();
                        _args.rtcpFbParameters = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_15: Array<RtcpFbVal.RtcpFbVal> = new Array<RtcpFbVal.RtcpFbVal>();
                        const metadata_4: thrift.TList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_16: RtcpFbVal.RtcpFbVal = RtcpFbVal.RtcpFbVal.read(input);
                            value_15.push(value_16);
                        }
                        input.readListEnd();
                        _args.rtcpFbParamList = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_17: number = input.readI32();
                        _args.videoWidth = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_18: number = input.readI32();
                        _args.videoHeight = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CodecDescription(_args);
    }
}

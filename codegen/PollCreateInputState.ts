/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as PollOption from "./PollOption";
export interface IPollCreateInputStateArgs {
    title?: string;
    options?: Array<PollOption.PollOption>;
    type?: number;
    poll_id?: string;
}
export class PollCreateInputState {
    public title?: string;
    public options?: Array<PollOption.PollOption>;
    public type?: number;
    public poll_id?: string;
    constructor(args?: IPollCreateInputStateArgs) {
        if (args != null && args.title != null) {
            this.title = args.title;
        }
        if (args != null && args.options != null) {
            this.options = args.options;
        }
        if (args != null && args.type != null) {
            this.type = args.type;
        }
        if (args != null && args.poll_id != null) {
            this.poll_id = args.poll_id;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("PollCreateInputState");
        if (this.title != null) {
            output.writeFieldBegin("title", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.title);
            output.writeFieldEnd();
        }
        if (this.options != null) {
            output.writeFieldBegin("options", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.options.length);
            this.options.forEach((value_1: PollOption.PollOption): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.type != null) {
            output.writeFieldBegin("type", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.type);
            output.writeFieldEnd();
        }
        if (this.poll_id != null) {
            output.writeFieldBegin("poll_id", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.poll_id);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): PollCreateInputState {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.title = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_3: Array<PollOption.PollOption> = new Array<PollOption.PollOption>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_4: PollOption.PollOption = PollOption.PollOption.read(input);
                            value_3.push(value_4);
                        }
                        input.readListEnd();
                        _args.options = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: number = input.readI32();
                        _args.type = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.poll_id = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new PollCreateInputState(_args);
    }
}

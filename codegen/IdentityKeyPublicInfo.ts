/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IIdentityKeyPublicInfoArgs {
    mode?: number;
    deviceId?: number;
    publicKey?: Buffer;
}
export class IdentityKeyPublicInfo {
    public mode?: number;
    public deviceId?: number;
    public publicKey?: Buffer;
    constructor(args?: IIdentityKeyPublicInfoArgs) {
        if (args != null && args.mode != null) {
            this.mode = args.mode;
        }
        if (args != null && args.deviceId != null) {
            this.deviceId = args.deviceId;
        }
        if (args != null && args.publicKey != null) {
            this.publicKey = args.publicKey;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("IdentityKeyPublicInfo");
        if (this.mode != null) {
            output.writeFieldBegin("mode", thrift.Thrift.Type.I16, 1);
            output.writeI16(this.mode);
            output.writeFieldEnd();
        }
        if (this.deviceId != null) {
            output.writeFieldBegin("deviceId", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.deviceId);
            output.writeFieldEnd();
        }
        if (this.publicKey != null) {
            output.writeFieldBegin("publicKey", thrift.Thrift.Type.STRING, 3);
            output.writeBinary(this.publicKey);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): IdentityKeyPublicInfo {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I16) {
                        const value_1: number = input.readI16();
                        _args.mode = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: number = input.readI32();
                        _args.deviceId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: Buffer = input.readBinary();
                        _args.publicKey = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new IdentityKeyPublicInfo(_args);
    }
}

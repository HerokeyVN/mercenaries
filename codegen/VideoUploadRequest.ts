/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IVideoUploadRequestArgs {
    cname?: string;
    quality_DEPRECATED?: number;
    qualityMask?: number;
    perSsrcTargetBitrateBpsMap?: Map<number | Int64, number | Int64>;
}
export class VideoUploadRequest {
    public cname?: string;
    public quality_DEPRECATED?: number;
    public qualityMask?: number;
    public perSsrcTargetBitrateBpsMap?: Map<Int64, Int64>;
    constructor(args?: IVideoUploadRequestArgs) {
        if (args != null && args.cname != null) {
            this.cname = args.cname;
        }
        if (args != null && args.quality_DEPRECATED != null) {
            this.quality_DEPRECATED = args.quality_DEPRECATED;
        }
        if (args != null && args.qualityMask != null) {
            this.qualityMask = args.qualityMask;
        }
        if (args != null && args.perSsrcTargetBitrateBpsMap != null) {
            this.perSsrcTargetBitrateBpsMap = args.perSsrcTargetBitrateBpsMap;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("VideoUploadRequest");
        if (this.cname != null) {
            output.writeFieldBegin("cname", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.cname);
            output.writeFieldEnd();
        }
        if (this.quality_DEPRECATED != null) {
            output.writeFieldBegin("quality_DEPRECATED", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.quality_DEPRECATED);
            output.writeFieldEnd();
        }
        if (this.qualityMask != null) {
            output.writeFieldBegin("qualityMask", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.qualityMask);
            output.writeFieldEnd();
        }
        if (this.perSsrcTargetBitrateBpsMap != null) {
            output.writeFieldBegin("perSsrcTargetBitrateBpsMap", thrift.Thrift.Type.MAP, 4);
            output.writeMapBegin(thrift.Thrift.Type.I64, thrift.Thrift.Type.I64, this.perSsrcTargetBitrateBpsMap.size);
            this.perSsrcTargetBitrateBpsMap.forEach((value_1: Int64, key_1: Int64): void => {
                output.writeI64(key_1);
                output.writeI64(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): VideoUploadRequest {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.cname = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: number = input.readI32();
                        _args.quality_DEPRECATED = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_4: number = input.readI32();
                        _args.qualityMask = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_5: Map<Int64, Int64> = new Map<Int64, Int64>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_2: Int64 = input.readI64();
                            const value_6: Int64 = input.readI64();
                            value_5.set(key_2, value_6);
                        }
                        input.readMapEnd();
                        _args.perSsrcTargetBitrateBpsMap = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new VideoUploadRequest(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
import * as RtcSender from "./RtcSender";
import * as RtcReceiver from "./RtcReceiver";
export interface IRtcMessageHeaderArgs {
    type?: number;
    conferenceName?: string;
    transactionId?: string;
    retryCount?: number;
    serverInfoData?: string;
    responseStatusCode?: number;
    extensions?: Map<string, string>;
    sequenceNumber?: number | Int64;
    clientSessionId?: string;
    responseStatusMessage?: string;
    responseSubCode?: number;
    collisionKey?: string;
    conferenceType?: number;
    serverSessionId?: string;
    rtcHandle?: string;
    retryAfterMsec?: number;
    receiverUserId?: string;
    clientStack?: number;
    serverMsgTime?: number | Int64;
    sender?: RtcSender.RtcSender;
    receiver?: RtcReceiver.RtcReceiver;
    messageTags?: Set<number>;
    conferenceId?: number | Int64;
    protocolVersion?: number;
    bodyCompressionVersion?: number | Int64;
}
export class RtcMessageHeader {
    public type?: number;
    public conferenceName?: string;
    public transactionId?: string;
    public retryCount?: number;
    public serverInfoData?: string;
    public responseStatusCode?: number;
    public extensions?: Map<string, string>;
    public sequenceNumber?: Int64;
    public clientSessionId?: string;
    public responseStatusMessage?: string;
    public responseSubCode?: number;
    public collisionKey?: string;
    public conferenceType?: number;
    public serverSessionId?: string;
    public rtcHandle?: string;
    public retryAfterMsec?: number;
    public receiverUserId?: string;
    public clientStack?: number;
    public serverMsgTime?: Int64;
    public sender?: RtcSender.RtcSender;
    public receiver?: RtcReceiver.RtcReceiver;
    public messageTags?: Set<number>;
    public conferenceId?: Int64;
    public protocolVersion?: number;
    public bodyCompressionVersion?: Int64;
    constructor(args?: IRtcMessageHeaderArgs) {
        if (args != null && args.type != null) {
            this.type = args.type;
        }
        if (args != null && args.conferenceName != null) {
            this.conferenceName = args.conferenceName;
        }
        if (args != null && args.transactionId != null) {
            this.transactionId = args.transactionId;
        }
        if (args != null && args.retryCount != null) {
            this.retryCount = args.retryCount;
        }
        if (args != null && args.serverInfoData != null) {
            this.serverInfoData = args.serverInfoData;
        }
        if (args != null && args.responseStatusCode != null) {
            this.responseStatusCode = args.responseStatusCode;
        }
        if (args != null && args.extensions != null) {
            this.extensions = args.extensions;
        }
        if (args != null && args.sequenceNumber != null) {
            if (typeof args.sequenceNumber === "number") {
                this.sequenceNumber = new Int64(args.sequenceNumber);
            }
            else {
                this.sequenceNumber = args.sequenceNumber;
            }
        }
        if (args != null && args.clientSessionId != null) {
            this.clientSessionId = args.clientSessionId;
        }
        if (args != null && args.responseStatusMessage != null) {
            this.responseStatusMessage = args.responseStatusMessage;
        }
        if (args != null && args.responseSubCode != null) {
            this.responseSubCode = args.responseSubCode;
        }
        if (args != null && args.collisionKey != null) {
            this.collisionKey = args.collisionKey;
        }
        if (args != null && args.conferenceType != null) {
            this.conferenceType = args.conferenceType;
        }
        if (args != null && args.serverSessionId != null) {
            this.serverSessionId = args.serverSessionId;
        }
        if (args != null && args.rtcHandle != null) {
            this.rtcHandle = args.rtcHandle;
        }
        if (args != null && args.retryAfterMsec != null) {
            this.retryAfterMsec = args.retryAfterMsec;
        }
        if (args != null && args.receiverUserId != null) {
            this.receiverUserId = args.receiverUserId;
        }
        if (args != null && args.clientStack != null) {
            this.clientStack = args.clientStack;
        }
        if (args != null && args.serverMsgTime != null) {
            if (typeof args.serverMsgTime === "number") {
                this.serverMsgTime = new Int64(args.serverMsgTime);
            }
            else {
                this.serverMsgTime = args.serverMsgTime;
            }
        }
        if (args != null && args.sender != null) {
            this.sender = args.sender;
        }
        if (args != null && args.receiver != null) {
            this.receiver = args.receiver;
        }
        if (args != null && args.messageTags != null) {
            this.messageTags = args.messageTags;
        }
        if (args != null && args.conferenceId != null) {
            if (typeof args.conferenceId === "number") {
                this.conferenceId = new Int64(args.conferenceId);
            }
            else {
                this.conferenceId = args.conferenceId;
            }
        }
        if (args != null && args.protocolVersion != null) {
            this.protocolVersion = args.protocolVersion;
        }
        if (args != null && args.bodyCompressionVersion != null) {
            if (typeof args.bodyCompressionVersion === "number") {
                this.bodyCompressionVersion = new Int64(args.bodyCompressionVersion);
            }
            else {
                this.bodyCompressionVersion = args.bodyCompressionVersion;
            }
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RtcMessageHeader");
        if (this.type != null) {
            output.writeFieldBegin("type", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.type);
            output.writeFieldEnd();
        }
        if (this.conferenceName != null) {
            output.writeFieldBegin("conferenceName", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.conferenceName);
            output.writeFieldEnd();
        }
        if (this.transactionId != null) {
            output.writeFieldBegin("transactionId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.transactionId);
            output.writeFieldEnd();
        }
        if (this.retryCount != null) {
            output.writeFieldBegin("retryCount", thrift.Thrift.Type.I16, 4);
            output.writeI16(this.retryCount);
            output.writeFieldEnd();
        }
        if (this.serverInfoData != null) {
            output.writeFieldBegin("serverInfoData", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.serverInfoData);
            output.writeFieldEnd();
        }
        if (this.responseStatusCode != null) {
            output.writeFieldBegin("responseStatusCode", thrift.Thrift.Type.I32, 6);
            output.writeI32(this.responseStatusCode);
            output.writeFieldEnd();
        }
        if (this.extensions != null) {
            output.writeFieldBegin("extensions", thrift.Thrift.Type.MAP, 7);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.extensions.size);
            this.extensions.forEach((value_1: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.sequenceNumber != null) {
            output.writeFieldBegin("sequenceNumber", thrift.Thrift.Type.I64, 8);
            output.writeI64(this.sequenceNumber);
            output.writeFieldEnd();
        }
        if (this.clientSessionId != null) {
            output.writeFieldBegin("clientSessionId", thrift.Thrift.Type.STRING, 9);
            output.writeString(this.clientSessionId);
            output.writeFieldEnd();
        }
        if (this.responseStatusMessage != null) {
            output.writeFieldBegin("responseStatusMessage", thrift.Thrift.Type.STRING, 10);
            output.writeString(this.responseStatusMessage);
            output.writeFieldEnd();
        }
        if (this.responseSubCode != null) {
            output.writeFieldBegin("responseSubCode", thrift.Thrift.Type.I32, 11);
            output.writeI32(this.responseSubCode);
            output.writeFieldEnd();
        }
        if (this.collisionKey != null) {
            output.writeFieldBegin("collisionKey", thrift.Thrift.Type.STRING, 12);
            output.writeString(this.collisionKey);
            output.writeFieldEnd();
        }
        if (this.conferenceType != null) {
            output.writeFieldBegin("conferenceType", thrift.Thrift.Type.I32, 13);
            output.writeI32(this.conferenceType);
            output.writeFieldEnd();
        }
        if (this.serverSessionId != null) {
            output.writeFieldBegin("serverSessionId", thrift.Thrift.Type.STRING, 14);
            output.writeString(this.serverSessionId);
            output.writeFieldEnd();
        }
        if (this.rtcHandle != null) {
            output.writeFieldBegin("rtcHandle", thrift.Thrift.Type.STRING, 15);
            output.writeString(this.rtcHandle);
            output.writeFieldEnd();
        }
        if (this.retryAfterMsec != null) {
            output.writeFieldBegin("retryAfterMsec", thrift.Thrift.Type.I32, 16);
            output.writeI32(this.retryAfterMsec);
            output.writeFieldEnd();
        }
        if (this.receiverUserId != null) {
            output.writeFieldBegin("receiverUserId", thrift.Thrift.Type.STRING, 17);
            output.writeString(this.receiverUserId);
            output.writeFieldEnd();
        }
        if (this.clientStack != null) {
            output.writeFieldBegin("clientStack", thrift.Thrift.Type.I32, 18);
            output.writeI32(this.clientStack);
            output.writeFieldEnd();
        }
        if (this.serverMsgTime != null) {
            output.writeFieldBegin("serverMsgTime", thrift.Thrift.Type.I64, 19);
            output.writeI64(this.serverMsgTime);
            output.writeFieldEnd();
        }
        if (this.sender != null) {
            output.writeFieldBegin("sender", thrift.Thrift.Type.STRUCT, 20);
            this.sender.write(output);
            output.writeFieldEnd();
        }
        if (this.receiver != null) {
            output.writeFieldBegin("receiver", thrift.Thrift.Type.STRUCT, 21);
            this.receiver.write(output);
            output.writeFieldEnd();
        }
        if (this.messageTags != null) {
            output.writeFieldBegin("messageTags", thrift.Thrift.Type.SET, 22);
            output.writeSetBegin(thrift.Thrift.Type.I32, this.messageTags.size);
            this.messageTags.forEach((value_2: number): void => {
                output.writeI32(value_2);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.conferenceId != null) {
            output.writeFieldBegin("conferenceId", thrift.Thrift.Type.I64, 23);
            output.writeI64(this.conferenceId);
            output.writeFieldEnd();
        }
        if (this.protocolVersion != null) {
            output.writeFieldBegin("protocolVersion", thrift.Thrift.Type.I32, 24);
            output.writeI32(this.protocolVersion);
            output.writeFieldEnd();
        }
        if (this.bodyCompressionVersion != null) {
            output.writeFieldBegin("bodyCompressionVersion", thrift.Thrift.Type.I64, 25);
            output.writeI64(this.bodyCompressionVersion);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RtcMessageHeader {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: number = input.readI32();
                        _args.type = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.conferenceName = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.transactionId = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I16) {
                        const value_6: number = input.readI16();
                        _args.retryCount = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.serverInfoData = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_8: number = input.readI32();
                        _args.responseStatusCode = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_9: Map<string, string> = new Map<string, string>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_2: string = input.readString();
                            const value_10: string = input.readString();
                            value_9.set(key_2, value_10);
                        }
                        input.readMapEnd();
                        _args.extensions = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_11: Int64 = input.readI64();
                        _args.sequenceNumber = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_12: string = input.readString();
                        _args.clientSessionId = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_13: string = input.readString();
                        _args.responseStatusMessage = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_14: number = input.readI32();
                        _args.responseSubCode = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_15: string = input.readString();
                        _args.collisionKey = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_16: number = input.readI32();
                        _args.conferenceType = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_17: string = input.readString();
                        _args.serverSessionId = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_18: string = input.readString();
                        _args.rtcHandle = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_19: number = input.readI32();
                        _args.retryAfterMsec = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_20: string = input.readString();
                        _args.receiverUserId = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_21: number = input.readI32();
                        _args.clientStack = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_22: Int64 = input.readI64();
                        _args.serverMsgTime = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_23: RtcSender.RtcSender = RtcSender.RtcSender.read(input);
                        _args.sender = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 21:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_24: RtcReceiver.RtcReceiver = RtcReceiver.RtcReceiver.read(input);
                        _args.receiver = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 22:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_25: Set<number> = new Set<number>();
                        const metadata_2: thrift.TSet = input.readSetBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_26: number = input.readI32();
                            value_25.add(value_26);
                        }
                        input.readSetEnd();
                        _args.messageTags = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 23:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_27: Int64 = input.readI64();
                        _args.conferenceId = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 24:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_28: number = input.readI32();
                        _args.protocolVersion = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 25:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_29: Int64 = input.readI64();
                        _args.bodyCompressionVersion = value_29;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RtcMessageHeader(_args);
    }
}

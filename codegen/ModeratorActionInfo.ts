/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
export interface IModeratorActionInfoArgs {
    action_uuid?: string;
    action_type?: number;
    action_issued_by?: string;
    action_context?: string;
    action_issued_time?: number | Int64;
}
export class ModeratorActionInfo {
    public action_uuid?: string;
    public action_type?: number;
    public action_issued_by?: string;
    public action_context?: string;
    public action_issued_time?: Int64;
    constructor(args?: IModeratorActionInfoArgs) {
        if (args != null && args.action_uuid != null) {
            this.action_uuid = args.action_uuid;
        }
        if (args != null && args.action_type != null) {
            this.action_type = args.action_type;
        }
        if (args != null && args.action_issued_by != null) {
            this.action_issued_by = args.action_issued_by;
        }
        if (args != null && args.action_context != null) {
            this.action_context = args.action_context;
        }
        if (args != null && args.action_issued_time != null) {
            if (typeof args.action_issued_time === "number") {
                this.action_issued_time = new Int64(args.action_issued_time);
            }
            else {
                this.action_issued_time = args.action_issued_time;
            }
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ModeratorActionInfo");
        if (this.action_uuid != null) {
            output.writeFieldBegin("action_uuid", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.action_uuid);
            output.writeFieldEnd();
        }
        if (this.action_type != null) {
            output.writeFieldBegin("action_type", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.action_type);
            output.writeFieldEnd();
        }
        if (this.action_issued_by != null) {
            output.writeFieldBegin("action_issued_by", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.action_issued_by);
            output.writeFieldEnd();
        }
        if (this.action_context != null) {
            output.writeFieldBegin("action_context", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.action_context);
            output.writeFieldEnd();
        }
        if (this.action_issued_time != null) {
            output.writeFieldBegin("action_issued_time", thrift.Thrift.Type.I64, 5);
            output.writeI64(this.action_issued_time);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ModeratorActionInfo {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.action_uuid = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: number = input.readI32();
                        _args.action_type = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.action_issued_by = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.action_context = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_5: Int64 = input.readI64();
                        _args.action_issued_time = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ModeratorActionInfo(_args);
    }
}

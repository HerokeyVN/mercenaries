/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IReceiveTrackDebugInfoArgs {
    trackId?: string;
    numSimulcastLayersSupported?: number;
    numSimulcastLayersAllocated?: number;
    spatialLayerIndex?: number;
}
export class ReceiveTrackDebugInfo {
    public trackId?: string;
    public numSimulcastLayersSupported?: number;
    public numSimulcastLayersAllocated?: number;
    public spatialLayerIndex?: number;
    constructor(args?: IReceiveTrackDebugInfoArgs) {
        if (args != null && args.trackId != null) {
            this.trackId = args.trackId;
        }
        if (args != null && args.numSimulcastLayersSupported != null) {
            this.numSimulcastLayersSupported = args.numSimulcastLayersSupported;
        }
        if (args != null && args.numSimulcastLayersAllocated != null) {
            this.numSimulcastLayersAllocated = args.numSimulcastLayersAllocated;
        }
        if (args != null && args.spatialLayerIndex != null) {
            this.spatialLayerIndex = args.spatialLayerIndex;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ReceiveTrackDebugInfo");
        if (this.trackId != null) {
            output.writeFieldBegin("trackId", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.trackId);
            output.writeFieldEnd();
        }
        if (this.numSimulcastLayersSupported != null) {
            output.writeFieldBegin("numSimulcastLayersSupported", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.numSimulcastLayersSupported);
            output.writeFieldEnd();
        }
        if (this.numSimulcastLayersAllocated != null) {
            output.writeFieldBegin("numSimulcastLayersAllocated", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.numSimulcastLayersAllocated);
            output.writeFieldEnd();
        }
        if (this.spatialLayerIndex != null) {
            output.writeFieldBegin("spatialLayerIndex", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.spatialLayerIndex);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ReceiveTrackDebugInfo {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.trackId = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: number = input.readI32();
                        _args.numSimulcastLayersSupported = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: number = input.readI32();
                        _args.numSimulcastLayersAllocated = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_4: number = input.readI32();
                        _args.spatialLayerIndex = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ReceiveTrackDebugInfo(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IExtmapArgs {
    id?: number;
    uri?: number;
    extensionAttributes?: Array<number>;
}
export class Extmap {
    public id?: number;
    public uri?: number;
    public extensionAttributes?: Array<number>;
    constructor(args?: IExtmapArgs) {
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.uri != null) {
            this.uri = args.uri;
        }
        if (args != null && args.extensionAttributes != null) {
            this.extensionAttributes = args.extensionAttributes;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Extmap");
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.id);
            output.writeFieldEnd();
        }
        if (this.uri != null) {
            output.writeFieldBegin("uri", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.uri);
            output.writeFieldEnd();
        }
        if (this.extensionAttributes != null) {
            output.writeFieldBegin("extensionAttributes", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.I32, this.extensionAttributes.length);
            this.extensionAttributes.forEach((value_1: number): void => {
                output.writeI32(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Extmap {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: number = input.readI32();
                        _args.id = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: number = input.readI32();
                        _args.uri = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_4: Array<number> = new Array<number>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_5: number = input.readI32();
                            value_4.push(value_5);
                        }
                        input.readListEnd();
                        _args.extensionAttributes = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new Extmap(_args);
    }
}

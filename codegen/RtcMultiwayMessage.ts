/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as RtcMessageHeader from "./RtcMessageHeader";
import * as RtcMessageBody from "./RtcMessageBody";
export interface IRtcMultiwayMessageArgs {
    messageHeader?: RtcMessageHeader.RtcMessageHeader;
    messageBody?: RtcMessageBody.RtcMessageBody;
}
export class RtcMultiwayMessage {
    public messageHeader?: RtcMessageHeader.RtcMessageHeader;
    public messageBody?: RtcMessageBody.RtcMessageBody;
    constructor(args?: IRtcMultiwayMessageArgs) {
        if (args != null && args.messageHeader != null) {
            this.messageHeader = args.messageHeader;
        }
        if (args != null && args.messageBody != null) {
            this.messageBody = args.messageBody;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RtcMultiwayMessage");
        if (this.messageHeader != null) {
            output.writeFieldBegin("messageHeader", thrift.Thrift.Type.STRUCT, 1);
            this.messageHeader.write(output);
            output.writeFieldEnd();
        }
        if (this.messageBody != null) {
            output.writeFieldBegin("messageBody", thrift.Thrift.Type.STRUCT, 2);
            this.messageBody.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RtcMultiwayMessage {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_1: RtcMessageHeader.RtcMessageHeader = RtcMessageHeader.RtcMessageHeader.read(input);
                        _args.messageHeader = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: RtcMessageBody.RtcMessageBody = RtcMessageBody.RtcMessageBody.read(input);
                        _args.messageBody = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RtcMultiwayMessage(_args);
    }
}

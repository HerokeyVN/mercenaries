/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as Poll from "./Poll";
import * as ParticipantPermissions from "./ParticipantPermissions";
export interface IPollsConferenceOutputStateArgs {
    polls?: Array<Poll.Poll>;
    participant_id_to_processed_action_uuids?: Map<string, Set<string>>;
    permissions?: Map<string, ParticipantPermissions.ParticipantPermissions>;
    users_with_creation_enabled?: Set<string>;
    is_creation_enabled_for_all?: boolean;
    creation_gk?: string;
    is_online_learning_call?: boolean;
}
export class PollsConferenceOutputState {
    public polls?: Array<Poll.Poll>;
    public participant_id_to_processed_action_uuids?: Map<string, Set<string>>;
    public permissions?: Map<string, ParticipantPermissions.ParticipantPermissions>;
    public users_with_creation_enabled?: Set<string>;
    public is_creation_enabled_for_all?: boolean;
    public creation_gk?: string;
    public is_online_learning_call?: boolean;
    constructor(args?: IPollsConferenceOutputStateArgs) {
        if (args != null && args.polls != null) {
            this.polls = args.polls;
        }
        if (args != null && args.participant_id_to_processed_action_uuids != null) {
            this.participant_id_to_processed_action_uuids = args.participant_id_to_processed_action_uuids;
        }
        if (args != null && args.permissions != null) {
            this.permissions = args.permissions;
        }
        if (args != null && args.users_with_creation_enabled != null) {
            this.users_with_creation_enabled = args.users_with_creation_enabled;
        }
        if (args != null && args.is_creation_enabled_for_all != null) {
            this.is_creation_enabled_for_all = args.is_creation_enabled_for_all;
        }
        if (args != null && args.creation_gk != null) {
            this.creation_gk = args.creation_gk;
        }
        if (args != null && args.is_online_learning_call != null) {
            this.is_online_learning_call = args.is_online_learning_call;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("PollsConferenceOutputState");
        if (this.polls != null) {
            output.writeFieldBegin("polls", thrift.Thrift.Type.LIST, 1);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.polls.length);
            this.polls.forEach((value_1: Poll.Poll): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.participant_id_to_processed_action_uuids != null) {
            output.writeFieldBegin("participant_id_to_processed_action_uuids", thrift.Thrift.Type.MAP, 2);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.SET, this.participant_id_to_processed_action_uuids.size);
            this.participant_id_to_processed_action_uuids.forEach((value_2: Set<string>, key_1: string): void => {
                output.writeString(key_1);
                output.writeSetBegin(thrift.Thrift.Type.STRING, value_2.size);
                value_2.forEach((value_3: string): void => {
                    output.writeString(value_3);
                });
                output.writeSetEnd();
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.permissions != null) {
            output.writeFieldBegin("permissions", thrift.Thrift.Type.MAP, 3);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRUCT, this.permissions.size);
            this.permissions.forEach((value_4: ParticipantPermissions.ParticipantPermissions, key_2: string): void => {
                output.writeString(key_2);
                value_4.write(output);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.users_with_creation_enabled != null) {
            output.writeFieldBegin("users_with_creation_enabled", thrift.Thrift.Type.SET, 4);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.users_with_creation_enabled.size);
            this.users_with_creation_enabled.forEach((value_5: string): void => {
                output.writeString(value_5);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.is_creation_enabled_for_all != null) {
            output.writeFieldBegin("is_creation_enabled_for_all", thrift.Thrift.Type.BOOL, 5);
            output.writeBool(this.is_creation_enabled_for_all);
            output.writeFieldEnd();
        }
        if (this.creation_gk != null) {
            output.writeFieldBegin("creation_gk", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.creation_gk);
            output.writeFieldEnd();
        }
        if (this.is_online_learning_call != null) {
            output.writeFieldBegin("is_online_learning_call", thrift.Thrift.Type.BOOL, 7);
            output.writeBool(this.is_online_learning_call);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): PollsConferenceOutputState {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_6: Array<Poll.Poll> = new Array<Poll.Poll>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_7: Poll.Poll = Poll.Poll.read(input);
                            value_6.push(value_7);
                        }
                        input.readListEnd();
                        _args.polls = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_8: Map<string, Set<string>> = new Map<string, Set<string>>();
                        const metadata_2: thrift.TMap = input.readMapBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const key_3: string = input.readString();
                            const value_9: Set<string> = new Set<string>();
                            const metadata_3: thrift.TSet = input.readSetBegin();
                            const size_3: number = metadata_3.size;
                            for (let i_3: number = 0; i_3 < size_3; i_3++) {
                                const value_10: string = input.readString();
                                value_9.add(value_10);
                            }
                            input.readSetEnd();
                            value_8.set(key_3, value_9);
                        }
                        input.readMapEnd();
                        _args.participant_id_to_processed_action_uuids = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_11: Map<string, ParticipantPermissions.ParticipantPermissions> = new Map<string, ParticipantPermissions.ParticipantPermissions>();
                        const metadata_4: thrift.TMap = input.readMapBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const key_4: string = input.readString();
                            const value_12: ParticipantPermissions.ParticipantPermissions = ParticipantPermissions.ParticipantPermissions.read(input);
                            value_11.set(key_4, value_12);
                        }
                        input.readMapEnd();
                        _args.permissions = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_13: Set<string> = new Set<string>();
                        const metadata_5: thrift.TSet = input.readSetBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_14: string = input.readString();
                            value_13.add(value_14);
                        }
                        input.readSetEnd();
                        _args.users_with_creation_enabled = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_15: boolean = input.readBool();
                        _args.is_creation_enabled_for_all = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_16: string = input.readString();
                        _args.creation_gk = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_17: boolean = input.readBool();
                        _args.is_online_learning_call = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new PollsConferenceOutputState(_args);
    }
}

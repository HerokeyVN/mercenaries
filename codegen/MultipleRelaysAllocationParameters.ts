/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IMultipleRelaysAllocationParametersArgs {
    callerUserId?: string;
    calleeUserId?: string;
    sessionId?: string;
}
export class MultipleRelaysAllocationParameters {
    public callerUserId?: string;
    public calleeUserId?: string;
    public sessionId?: string;
    constructor(args?: IMultipleRelaysAllocationParametersArgs) {
        if (args != null && args.callerUserId != null) {
            this.callerUserId = args.callerUserId;
        }
        if (args != null && args.calleeUserId != null) {
            this.calleeUserId = args.calleeUserId;
        }
        if (args != null && args.sessionId != null) {
            this.sessionId = args.sessionId;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("MultipleRelaysAllocationParameters");
        if (this.callerUserId != null) {
            output.writeFieldBegin("callerUserId", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.callerUserId);
            output.writeFieldEnd();
        }
        if (this.calleeUserId != null) {
            output.writeFieldBegin("calleeUserId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.calleeUserId);
            output.writeFieldEnd();
        }
        if (this.sessionId != null) {
            output.writeFieldBegin("sessionId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.sessionId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): MultipleRelaysAllocationParameters {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.callerUserId = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.calleeUserId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.sessionId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new MultipleRelaysAllocationParameters(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as RaisedHandsQueuer from "./RaisedHandsQueuer";
export interface IRaisedHandsQueueParticipantOutputStateArgs {
    queue?: Array<RaisedHandsQueuer.RaisedHandsQueuer>;
    is_raise_hand_feature_enabled?: boolean;
    processed_action_uuids?: Set<string>;
    use_rtss?: boolean;
}
export class RaisedHandsQueueParticipantOutputState {
    public queue?: Array<RaisedHandsQueuer.RaisedHandsQueuer>;
    public is_raise_hand_feature_enabled?: boolean;
    public processed_action_uuids?: Set<string>;
    public use_rtss?: boolean;
    constructor(args?: IRaisedHandsQueueParticipantOutputStateArgs) {
        if (args != null && args.queue != null) {
            this.queue = args.queue;
        }
        if (args != null && args.is_raise_hand_feature_enabled != null) {
            this.is_raise_hand_feature_enabled = args.is_raise_hand_feature_enabled;
        }
        if (args != null && args.processed_action_uuids != null) {
            this.processed_action_uuids = args.processed_action_uuids;
        }
        if (args != null && args.use_rtss != null) {
            this.use_rtss = args.use_rtss;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RaisedHandsQueueParticipantOutputState");
        if (this.queue != null) {
            output.writeFieldBegin("queue", thrift.Thrift.Type.LIST, 1);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.queue.length);
            this.queue.forEach((value_1: RaisedHandsQueuer.RaisedHandsQueuer): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.is_raise_hand_feature_enabled != null) {
            output.writeFieldBegin("is_raise_hand_feature_enabled", thrift.Thrift.Type.BOOL, 2);
            output.writeBool(this.is_raise_hand_feature_enabled);
            output.writeFieldEnd();
        }
        if (this.processed_action_uuids != null) {
            output.writeFieldBegin("processed_action_uuids", thrift.Thrift.Type.SET, 4);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.processed_action_uuids.size);
            this.processed_action_uuids.forEach((value_2: string): void => {
                output.writeString(value_2);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.use_rtss != null) {
            output.writeFieldBegin("use_rtss", thrift.Thrift.Type.BOOL, 6);
            output.writeBool(this.use_rtss);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RaisedHandsQueueParticipantOutputState {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_3: Array<RaisedHandsQueuer.RaisedHandsQueuer> = new Array<RaisedHandsQueuer.RaisedHandsQueuer>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_4: RaisedHandsQueuer.RaisedHandsQueuer = RaisedHandsQueuer.RaisedHandsQueuer.read(input);
                            value_3.push(value_4);
                        }
                        input.readListEnd();
                        _args.queue = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_5: boolean = input.readBool();
                        _args.is_raise_hand_feature_enabled = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_6: Set<string> = new Set<string>();
                        const metadata_2: thrift.TSet = input.readSetBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_7: string = input.readString();
                            value_6.add(value_7);
                        }
                        input.readSetEnd();
                        _args.processed_action_uuids = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_8: boolean = input.readBool();
                        _args.use_rtss = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RaisedHandsQueueParticipantOutputState(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as Emoji from "./Emoji";
export interface IEmojiReactionsInputStateArgs {
    emoji?: Emoji.Emoji;
    reaction_source?: number;
    is_rtss_preferred?: boolean;
}
export class EmojiReactionsInputState {
    public emoji?: Emoji.Emoji;
    public reaction_source?: number;
    public is_rtss_preferred?: boolean;
    constructor(args?: IEmojiReactionsInputStateArgs) {
        if (args != null && args.emoji != null) {
            this.emoji = args.emoji;
        }
        if (args != null && args.reaction_source != null) {
            this.reaction_source = args.reaction_source;
        }
        if (args != null && args.is_rtss_preferred != null) {
            this.is_rtss_preferred = args.is_rtss_preferred;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("EmojiReactionsInputState");
        if (this.emoji != null) {
            output.writeFieldBegin("emoji", thrift.Thrift.Type.STRUCT, 1);
            this.emoji.write(output);
            output.writeFieldEnd();
        }
        if (this.reaction_source != null) {
            output.writeFieldBegin("reaction_source", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.reaction_source);
            output.writeFieldEnd();
        }
        if (this.is_rtss_preferred != null) {
            output.writeFieldBegin("is_rtss_preferred", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.is_rtss_preferred);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): EmojiReactionsInputState {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_1: Emoji.Emoji = Emoji.Emoji.read(input);
                        _args.emoji = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: number = input.readI32();
                        _args.reaction_source = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_3: boolean = input.readBool();
                        _args.is_rtss_preferred = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new EmojiReactionsInputState(_args);
    }
}

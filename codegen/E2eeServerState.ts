/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as E2eeProtocolVersion from "./E2eeProtocolVersion";
import * as E2eeServerStateConfig from "./E2eeServerStateConfig";
import * as E2eeEndpointInfo from "./E2eeEndpointInfo";
import * as E2eeServerStateCapability from "./E2eeServerStateCapability";
import * as KeyNegotiationProtocolConfig from "./KeyNegotiationProtocolConfig";
export interface IE2eeServerStateArgs {
    cipherSuites?: Array<number>;
    protocolVersion?: E2eeProtocolVersion.E2eeProtocolVersion;
    config?: E2eeServerStateConfig.E2eeServerStateConfig;
    endpointInfos?: Map<string, E2eeEndpointInfo.E2eeEndpointInfo>;
    e2eeServerStateCapabilities?: Map<number, E2eeServerStateCapability.E2eeServerStateCapability>;
    negotiatedE2eeKeyNegotiationProtocol?: number;
    keyNegotiationProtocolConfig?: KeyNegotiationProtocolConfig.KeyNegotiationProtocolConfig;
    serverInfraMandatedExpStatus?: number;
}
export class E2eeServerState {
    public cipherSuites?: Array<number>;
    public protocolVersion?: E2eeProtocolVersion.E2eeProtocolVersion;
    public config?: E2eeServerStateConfig.E2eeServerStateConfig;
    public endpointInfos?: Map<string, E2eeEndpointInfo.E2eeEndpointInfo>;
    public e2eeServerStateCapabilities?: Map<number, E2eeServerStateCapability.E2eeServerStateCapability>;
    public negotiatedE2eeKeyNegotiationProtocol?: number;
    public keyNegotiationProtocolConfig?: KeyNegotiationProtocolConfig.KeyNegotiationProtocolConfig;
    public serverInfraMandatedExpStatus?: number;
    constructor(args?: IE2eeServerStateArgs) {
        if (args != null && args.cipherSuites != null) {
            this.cipherSuites = args.cipherSuites;
        }
        if (args != null && args.protocolVersion != null) {
            this.protocolVersion = args.protocolVersion;
        }
        if (args != null && args.config != null) {
            this.config = args.config;
        }
        if (args != null && args.endpointInfos != null) {
            this.endpointInfos = args.endpointInfos;
        }
        if (args != null && args.e2eeServerStateCapabilities != null) {
            this.e2eeServerStateCapabilities = args.e2eeServerStateCapabilities;
        }
        if (args != null && args.negotiatedE2eeKeyNegotiationProtocol != null) {
            this.negotiatedE2eeKeyNegotiationProtocol = args.negotiatedE2eeKeyNegotiationProtocol;
        }
        if (args != null && args.keyNegotiationProtocolConfig != null) {
            this.keyNegotiationProtocolConfig = args.keyNegotiationProtocolConfig;
        }
        if (args != null && args.serverInfraMandatedExpStatus != null) {
            this.serverInfraMandatedExpStatus = args.serverInfraMandatedExpStatus;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("E2eeServerState");
        if (this.cipherSuites != null) {
            output.writeFieldBegin("cipherSuites", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.I16, this.cipherSuites.length);
            this.cipherSuites.forEach((value_1: number): void => {
                output.writeI16(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.protocolVersion != null) {
            output.writeFieldBegin("protocolVersion", thrift.Thrift.Type.STRUCT, 3);
            this.protocolVersion.write(output);
            output.writeFieldEnd();
        }
        if (this.config != null) {
            output.writeFieldBegin("config", thrift.Thrift.Type.STRUCT, 4);
            this.config.write(output);
            output.writeFieldEnd();
        }
        if (this.endpointInfos != null) {
            output.writeFieldBegin("endpointInfos", thrift.Thrift.Type.MAP, 5);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRUCT, this.endpointInfos.size);
            this.endpointInfos.forEach((value_2: E2eeEndpointInfo.E2eeEndpointInfo, key_1: string): void => {
                output.writeString(key_1);
                value_2.write(output);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.e2eeServerStateCapabilities != null) {
            output.writeFieldBegin("e2eeServerStateCapabilities", thrift.Thrift.Type.MAP, 6);
            output.writeMapBegin(thrift.Thrift.Type.I32, thrift.Thrift.Type.STRUCT, this.e2eeServerStateCapabilities.size);
            this.e2eeServerStateCapabilities.forEach((value_3: E2eeServerStateCapability.E2eeServerStateCapability, key_2: number): void => {
                output.writeI32(key_2);
                value_3.write(output);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.negotiatedE2eeKeyNegotiationProtocol != null) {
            output.writeFieldBegin("negotiatedE2eeKeyNegotiationProtocol", thrift.Thrift.Type.I32, 7);
            output.writeI32(this.negotiatedE2eeKeyNegotiationProtocol);
            output.writeFieldEnd();
        }
        if (this.keyNegotiationProtocolConfig != null) {
            output.writeFieldBegin("keyNegotiationProtocolConfig", thrift.Thrift.Type.STRUCT, 8);
            this.keyNegotiationProtocolConfig.write(output);
            output.writeFieldEnd();
        }
        if (this.serverInfraMandatedExpStatus != null) {
            output.writeFieldBegin("serverInfraMandatedExpStatus", thrift.Thrift.Type.I32, 9);
            output.writeI32(this.serverInfraMandatedExpStatus);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): E2eeServerState {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_4: Array<number> = new Array<number>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_5: number = input.readI16();
                            value_4.push(value_5);
                        }
                        input.readListEnd();
                        _args.cipherSuites = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_6: E2eeProtocolVersion.E2eeProtocolVersion = E2eeProtocolVersion.E2eeProtocolVersion.read(input);
                        _args.protocolVersion = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_7: E2eeServerStateConfig.E2eeServerStateConfig = E2eeServerStateConfig.E2eeServerStateConfig.read(input);
                        _args.config = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_8: Map<string, E2eeEndpointInfo.E2eeEndpointInfo> = new Map<string, E2eeEndpointInfo.E2eeEndpointInfo>();
                        const metadata_2: thrift.TMap = input.readMapBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const key_3: string = input.readString();
                            const value_9: E2eeEndpointInfo.E2eeEndpointInfo = E2eeEndpointInfo.E2eeEndpointInfo.read(input);
                            value_8.set(key_3, value_9);
                        }
                        input.readMapEnd();
                        _args.endpointInfos = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_10: Map<number, E2eeServerStateCapability.E2eeServerStateCapability> = new Map<number, E2eeServerStateCapability.E2eeServerStateCapability>();
                        const metadata_3: thrift.TMap = input.readMapBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const key_4: number = input.readI32();
                            const value_11: E2eeServerStateCapability.E2eeServerStateCapability = E2eeServerStateCapability.E2eeServerStateCapability.read(input);
                            value_10.set(key_4, value_11);
                        }
                        input.readMapEnd();
                        _args.e2eeServerStateCapabilities = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_12: number = input.readI32();
                        _args.negotiatedE2eeKeyNegotiationProtocol = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_13: KeyNegotiationProtocolConfig.KeyNegotiationProtocolConfig = KeyNegotiationProtocolConfig.KeyNegotiationProtocolConfig.read(input);
                        _args.keyNegotiationProtocolConfig = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_14: number = input.readI32();
                        _args.serverInfraMandatedExpStatus = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new E2eeServerState(_args);
    }
}

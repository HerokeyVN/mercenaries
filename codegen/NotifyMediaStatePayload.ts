/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
import * as TrackInfo from "./TrackInfo";
export interface INotifyMediaStatePayloadArgs {
    videoOn?: boolean;
    audioOn?: boolean;
    speakerOn?: boolean;
    version?: number | Int64;
    trackInfos?: Map<string, TrackInfo.TrackInfo>;
}
export class NotifyMediaStatePayload {
    public videoOn?: boolean;
    public audioOn?: boolean;
    public speakerOn?: boolean;
    public version?: Int64;
    public trackInfos?: Map<string, TrackInfo.TrackInfo>;
    constructor(args?: INotifyMediaStatePayloadArgs) {
        if (args != null && args.videoOn != null) {
            this.videoOn = args.videoOn;
        }
        if (args != null && args.audioOn != null) {
            this.audioOn = args.audioOn;
        }
        if (args != null && args.speakerOn != null) {
            this.speakerOn = args.speakerOn;
        }
        if (args != null && args.version != null) {
            if (typeof args.version === "number") {
                this.version = new Int64(args.version);
            }
            else {
                this.version = args.version;
            }
        }
        if (args != null && args.trackInfos != null) {
            this.trackInfos = args.trackInfos;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("NotifyMediaStatePayload");
        if (this.videoOn != null) {
            output.writeFieldBegin("videoOn", thrift.Thrift.Type.BOOL, 1);
            output.writeBool(this.videoOn);
            output.writeFieldEnd();
        }
        if (this.audioOn != null) {
            output.writeFieldBegin("audioOn", thrift.Thrift.Type.BOOL, 6);
            output.writeBool(this.audioOn);
            output.writeFieldEnd();
        }
        if (this.speakerOn != null) {
            output.writeFieldBegin("speakerOn", thrift.Thrift.Type.BOOL, 7);
            output.writeBool(this.speakerOn);
            output.writeFieldEnd();
        }
        if (this.version != null) {
            output.writeFieldBegin("version", thrift.Thrift.Type.I64, 8);
            output.writeI64(this.version);
            output.writeFieldEnd();
        }
        if (this.trackInfos != null) {
            output.writeFieldBegin("trackInfos", thrift.Thrift.Type.MAP, 9);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRUCT, this.trackInfos.size);
            this.trackInfos.forEach((value_1: TrackInfo.TrackInfo, key_1: string): void => {
                output.writeString(key_1);
                value_1.write(output);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): NotifyMediaStatePayload {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_2: boolean = input.readBool();
                        _args.videoOn = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_3: boolean = input.readBool();
                        _args.audioOn = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_4: boolean = input.readBool();
                        _args.speakerOn = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_5: Int64 = input.readI64();
                        _args.version = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_6: Map<string, TrackInfo.TrackInfo> = new Map<string, TrackInfo.TrackInfo>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_2: string = input.readString();
                            const value_7: TrackInfo.TrackInfo = TrackInfo.TrackInfo.read(input);
                            value_6.set(key_2, value_7);
                        }
                        input.readMapEnd();
                        _args.trackInfos = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new NotifyMediaStatePayload(_args);
    }
}

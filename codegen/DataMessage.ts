/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as DataHeader from "./DataHeader";
import * as DataMessageBody from "./DataMessageBody";
export interface IDataMessageArgs {
    header?: DataHeader.DataHeader;
    data_DEPRECATED?: string;
    body?: DataMessageBody.DataMessageBody;
}
export class DataMessage {
    public header?: DataHeader.DataHeader;
    public data_DEPRECATED?: string;
    public body?: DataMessageBody.DataMessageBody;
    constructor(args?: IDataMessageArgs) {
        if (args != null && args.header != null) {
            this.header = args.header;
        }
        if (args != null && args.data_DEPRECATED != null) {
            this.data_DEPRECATED = args.data_DEPRECATED;
        }
        if (args != null && args.body != null) {
            this.body = args.body;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DataMessage");
        if (this.header != null) {
            output.writeFieldBegin("header", thrift.Thrift.Type.STRUCT, 1);
            this.header.write(output);
            output.writeFieldEnd();
        }
        if (this.data_DEPRECATED != null) {
            output.writeFieldBegin("data_DEPRECATED", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.data_DEPRECATED);
            output.writeFieldEnd();
        }
        if (this.body != null) {
            output.writeFieldBegin("body", thrift.Thrift.Type.STRUCT, 3);
            this.body.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DataMessage {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_1: DataHeader.DataHeader = DataHeader.DataHeader.read(input);
                        _args.header = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.data_DEPRECATED = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: DataMessageBody.DataMessageBody = DataMessageBody.DataMessageBody.read(input);
                        _args.body = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DataMessage(_args);
    }
}

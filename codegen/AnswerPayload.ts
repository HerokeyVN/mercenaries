/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as Sdp from "./Sdp";
import * as VideoRequestPayload from "./VideoRequestPayload";
import * as NotifyMediaStatePayload from "./NotifyMediaStatePayload";
import * as StreamInfo from "./StreamInfo";
import * as TrackInfo from "./TrackInfo";
export interface IAnswerPayloadArgs {
    sdpThrift?: Sdp.Sdp;
    videoRequestPayload?: VideoRequestPayload.VideoRequestPayload;
    selectedFbExperiments?: string;
    initialMediaState?: NotifyMediaStatePayload.NotifyMediaStatePayload;
    callType?: string;
    negotiatedEscalationSupport?: boolean;
    escalationConferenceName?: string;
    sdpString?: string;
    userCapabilities?: string;
    sdpNegotiationSupport?: boolean;
    streamInfos_DEPRECATED?: Map<string, StreamInfo.StreamInfo>;
    collisionContext?: string;
    trackInfos?: Map<string, TrackInfo.TrackInfo>;
}
export class AnswerPayload {
    public sdpThrift?: Sdp.Sdp;
    public videoRequestPayload?: VideoRequestPayload.VideoRequestPayload;
    public selectedFbExperiments?: string;
    public initialMediaState?: NotifyMediaStatePayload.NotifyMediaStatePayload;
    public callType?: string;
    public negotiatedEscalationSupport?: boolean;
    public escalationConferenceName?: string;
    public sdpString?: string;
    public userCapabilities?: string;
    public sdpNegotiationSupport?: boolean;
    public streamInfos_DEPRECATED?: Map<string, StreamInfo.StreamInfo>;
    public collisionContext?: string;
    public trackInfos?: Map<string, TrackInfo.TrackInfo>;
    constructor(args?: IAnswerPayloadArgs) {
        if (args != null && args.sdpThrift != null) {
            this.sdpThrift = args.sdpThrift;
        }
        if (args != null && args.videoRequestPayload != null) {
            this.videoRequestPayload = args.videoRequestPayload;
        }
        if (args != null && args.selectedFbExperiments != null) {
            this.selectedFbExperiments = args.selectedFbExperiments;
        }
        if (args != null && args.initialMediaState != null) {
            this.initialMediaState = args.initialMediaState;
        }
        if (args != null && args.callType != null) {
            this.callType = args.callType;
        }
        if (args != null && args.negotiatedEscalationSupport != null) {
            this.negotiatedEscalationSupport = args.negotiatedEscalationSupport;
        }
        if (args != null && args.escalationConferenceName != null) {
            this.escalationConferenceName = args.escalationConferenceName;
        }
        if (args != null && args.sdpString != null) {
            this.sdpString = args.sdpString;
        }
        if (args != null && args.userCapabilities != null) {
            this.userCapabilities = args.userCapabilities;
        }
        if (args != null && args.sdpNegotiationSupport != null) {
            this.sdpNegotiationSupport = args.sdpNegotiationSupport;
        }
        if (args != null && args.streamInfos_DEPRECATED != null) {
            this.streamInfos_DEPRECATED = args.streamInfos_DEPRECATED;
        }
        if (args != null && args.collisionContext != null) {
            this.collisionContext = args.collisionContext;
        }
        if (args != null && args.trackInfos != null) {
            this.trackInfos = args.trackInfos;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("AnswerPayload");
        if (this.sdpThrift != null) {
            output.writeFieldBegin("sdpThrift", thrift.Thrift.Type.STRUCT, 1);
            this.sdpThrift.write(output);
            output.writeFieldEnd();
        }
        if (this.videoRequestPayload != null) {
            output.writeFieldBegin("videoRequestPayload", thrift.Thrift.Type.STRUCT, 4);
            this.videoRequestPayload.write(output);
            output.writeFieldEnd();
        }
        if (this.selectedFbExperiments != null) {
            output.writeFieldBegin("selectedFbExperiments", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.selectedFbExperiments);
            output.writeFieldEnd();
        }
        if (this.initialMediaState != null) {
            output.writeFieldBegin("initialMediaState", thrift.Thrift.Type.STRUCT, 7);
            this.initialMediaState.write(output);
            output.writeFieldEnd();
        }
        if (this.callType != null) {
            output.writeFieldBegin("callType", thrift.Thrift.Type.STRING, 8);
            output.writeString(this.callType);
            output.writeFieldEnd();
        }
        if (this.negotiatedEscalationSupport != null) {
            output.writeFieldBegin("negotiatedEscalationSupport", thrift.Thrift.Type.BOOL, 11);
            output.writeBool(this.negotiatedEscalationSupport);
            output.writeFieldEnd();
        }
        if (this.escalationConferenceName != null) {
            output.writeFieldBegin("escalationConferenceName", thrift.Thrift.Type.STRING, 12);
            output.writeString(this.escalationConferenceName);
            output.writeFieldEnd();
        }
        if (this.sdpString != null) {
            output.writeFieldBegin("sdpString", thrift.Thrift.Type.STRING, 13);
            output.writeString(this.sdpString);
            output.writeFieldEnd();
        }
        if (this.userCapabilities != null) {
            output.writeFieldBegin("userCapabilities", thrift.Thrift.Type.STRING, 14);
            output.writeString(this.userCapabilities);
            output.writeFieldEnd();
        }
        if (this.sdpNegotiationSupport != null) {
            output.writeFieldBegin("sdpNegotiationSupport", thrift.Thrift.Type.BOOL, 15);
            output.writeBool(this.sdpNegotiationSupport);
            output.writeFieldEnd();
        }
        if (this.streamInfos_DEPRECATED != null) {
            output.writeFieldBegin("streamInfos_DEPRECATED", thrift.Thrift.Type.MAP, 16);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRUCT, this.streamInfos_DEPRECATED.size);
            this.streamInfos_DEPRECATED.forEach((value_1: StreamInfo.StreamInfo, key_1: string): void => {
                output.writeString(key_1);
                value_1.write(output);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.collisionContext != null) {
            output.writeFieldBegin("collisionContext", thrift.Thrift.Type.STRING, 18);
            output.writeString(this.collisionContext);
            output.writeFieldEnd();
        }
        if (this.trackInfos != null) {
            output.writeFieldBegin("trackInfos", thrift.Thrift.Type.MAP, 19);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRUCT, this.trackInfos.size);
            this.trackInfos.forEach((value_2: TrackInfo.TrackInfo, key_2: string): void => {
                output.writeString(key_2);
                value_2.write(output);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): AnswerPayload {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: Sdp.Sdp = Sdp.Sdp.read(input);
                        _args.sdpThrift = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: VideoRequestPayload.VideoRequestPayload = VideoRequestPayload.VideoRequestPayload.read(input);
                        _args.videoRequestPayload = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.selectedFbExperiments = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_6: NotifyMediaStatePayload.NotifyMediaStatePayload = NotifyMediaStatePayload.NotifyMediaStatePayload.read(input);
                        _args.initialMediaState = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.callType = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_8: boolean = input.readBool();
                        _args.negotiatedEscalationSupport = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.escalationConferenceName = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_10: string = input.readString();
                        _args.sdpString = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_11: string = input.readString();
                        _args.userCapabilities = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_12: boolean = input.readBool();
                        _args.sdpNegotiationSupport = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_13: Map<string, StreamInfo.StreamInfo> = new Map<string, StreamInfo.StreamInfo>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_3: string = input.readString();
                            const value_14: StreamInfo.StreamInfo = StreamInfo.StreamInfo.read(input);
                            value_13.set(key_3, value_14);
                        }
                        input.readMapEnd();
                        _args.streamInfos_DEPRECATED = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_15: string = input.readString();
                        _args.collisionContext = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_16: Map<string, TrackInfo.TrackInfo> = new Map<string, TrackInfo.TrackInfo>();
                        const metadata_2: thrift.TMap = input.readMapBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const key_4: string = input.readString();
                            const value_17: TrackInfo.TrackInfo = TrackInfo.TrackInfo.read(input);
                            value_16.set(key_4, value_17);
                        }
                        input.readMapEnd();
                        _args.trackInfos = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new AnswerPayload(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
import * as IceCandidateSdp from "./IceCandidateSdp";
export interface IIceCandidateArgs {
    candidateSdpString?: string;
    sdpMLineIndex?: number | Int64;
    sdpMid?: string;
    candidateSdpThrift?: IceCandidateSdp.IceCandidateSdp;
}
export class IceCandidate {
    public candidateSdpString?: string;
    public sdpMLineIndex?: Int64;
    public sdpMid?: string;
    public candidateSdpThrift?: IceCandidateSdp.IceCandidateSdp;
    constructor(args?: IIceCandidateArgs) {
        if (args != null && args.candidateSdpString != null) {
            this.candidateSdpString = args.candidateSdpString;
        }
        if (args != null && args.sdpMLineIndex != null) {
            if (typeof args.sdpMLineIndex === "number") {
                this.sdpMLineIndex = new Int64(args.sdpMLineIndex);
            }
            else {
                this.sdpMLineIndex = args.sdpMLineIndex;
            }
        }
        if (args != null && args.sdpMid != null) {
            this.sdpMid = args.sdpMid;
        }
        if (args != null && args.candidateSdpThrift != null) {
            this.candidateSdpThrift = args.candidateSdpThrift;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("IceCandidate");
        if (this.candidateSdpString != null) {
            output.writeFieldBegin("candidateSdpString", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.candidateSdpString);
            output.writeFieldEnd();
        }
        if (this.sdpMLineIndex != null) {
            output.writeFieldBegin("sdpMLineIndex", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.sdpMLineIndex);
            output.writeFieldEnd();
        }
        if (this.sdpMid != null) {
            output.writeFieldBegin("sdpMid", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.sdpMid);
            output.writeFieldEnd();
        }
        if (this.candidateSdpThrift != null) {
            output.writeFieldBegin("candidateSdpThrift", thrift.Thrift.Type.STRUCT, 4);
            this.candidateSdpThrift.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): IceCandidate {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.candidateSdpString = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_2: Int64 = input.readI64();
                        _args.sdpMLineIndex = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.sdpMid = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: IceCandidateSdp.IceCandidateSdp = IceCandidateSdp.IceCandidateSdp.read(input);
                        _args.candidateSdpThrift = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new IceCandidate(_args);
    }
}

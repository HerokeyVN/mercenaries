/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IEndpointArgs {
    userId?: string;
    deviceId?: string;
    appId?: string;
    appVersion?: string;
    appBuildNumber?: string;
    clientStackInfo?: string;
    familyDeviceId?: string;
}
export class Endpoint {
    public userId?: string;
    public deviceId?: string;
    public appId?: string;
    public appVersion?: string;
    public appBuildNumber?: string;
    public clientStackInfo?: string;
    public familyDeviceId?: string;
    constructor(args?: IEndpointArgs) {
        if (args != null && args.userId != null) {
            this.userId = args.userId;
        }
        if (args != null && args.deviceId != null) {
            this.deviceId = args.deviceId;
        }
        if (args != null && args.appId != null) {
            this.appId = args.appId;
        }
        if (args != null && args.appVersion != null) {
            this.appVersion = args.appVersion;
        }
        if (args != null && args.appBuildNumber != null) {
            this.appBuildNumber = args.appBuildNumber;
        }
        if (args != null && args.clientStackInfo != null) {
            this.clientStackInfo = args.clientStackInfo;
        }
        if (args != null && args.familyDeviceId != null) {
            this.familyDeviceId = args.familyDeviceId;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Endpoint");
        if (this.userId != null) {
            output.writeFieldBegin("userId", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.userId);
            output.writeFieldEnd();
        }
        if (this.deviceId != null) {
            output.writeFieldBegin("deviceId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.deviceId);
            output.writeFieldEnd();
        }
        if (this.appId != null) {
            output.writeFieldBegin("appId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.appId);
            output.writeFieldEnd();
        }
        if (this.appVersion != null) {
            output.writeFieldBegin("appVersion", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.appVersion);
            output.writeFieldEnd();
        }
        if (this.appBuildNumber != null) {
            output.writeFieldBegin("appBuildNumber", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.appBuildNumber);
            output.writeFieldEnd();
        }
        if (this.clientStackInfo != null) {
            output.writeFieldBegin("clientStackInfo", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.clientStackInfo);
            output.writeFieldEnd();
        }
        if (this.familyDeviceId != null) {
            output.writeFieldBegin("familyDeviceId", thrift.Thrift.Type.STRING, 7);
            output.writeString(this.familyDeviceId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Endpoint {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.userId = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.deviceId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.appId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.appVersion = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.appBuildNumber = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.clientStackInfo = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.familyDeviceId = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new Endpoint(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
import * as SessionDescription from "./SessionDescription";
import * as ClientMediaStatus from "./ClientMediaStatus";
import * as State from "./State";
export interface IClientMediaUpdateResponseArgs {
    currentVersion?: number | Int64;
    answer?: SessionDescription.SessionDescription;
    mediaStatus?: ClientMediaStatus.ClientMediaStatus;
    sdpOriginLocalId?: string;
    renegotiationOffer?: SessionDescription.SessionDescription;
    mediaPath?: number;
    stateStore?: Map<string, State.State>;
    stateStoreV2?: Map<number, State.State>;
}
export class ClientMediaUpdateResponse {
    public currentVersion?: Int64;
    public answer?: SessionDescription.SessionDescription;
    public mediaStatus?: ClientMediaStatus.ClientMediaStatus;
    public sdpOriginLocalId?: string;
    public renegotiationOffer?: SessionDescription.SessionDescription;
    public mediaPath?: number;
    public stateStore?: Map<string, State.State>;
    public stateStoreV2?: Map<number, State.State>;
    constructor(args?: IClientMediaUpdateResponseArgs) {
        if (args != null && args.currentVersion != null) {
            if (typeof args.currentVersion === "number") {
                this.currentVersion = new Int64(args.currentVersion);
            }
            else {
                this.currentVersion = args.currentVersion;
            }
        }
        if (args != null && args.answer != null) {
            this.answer = args.answer;
        }
        if (args != null && args.mediaStatus != null) {
            this.mediaStatus = args.mediaStatus;
        }
        if (args != null && args.sdpOriginLocalId != null) {
            this.sdpOriginLocalId = args.sdpOriginLocalId;
        }
        if (args != null && args.renegotiationOffer != null) {
            this.renegotiationOffer = args.renegotiationOffer;
        }
        if (args != null && args.mediaPath != null) {
            this.mediaPath = args.mediaPath;
        }
        if (args != null && args.stateStore != null) {
            this.stateStore = args.stateStore;
        }
        if (args != null && args.stateStoreV2 != null) {
            this.stateStoreV2 = args.stateStoreV2;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ClientMediaUpdateResponse");
        if (this.currentVersion != null) {
            output.writeFieldBegin("currentVersion", thrift.Thrift.Type.I64, 1);
            output.writeI64(this.currentVersion);
            output.writeFieldEnd();
        }
        if (this.answer != null) {
            output.writeFieldBegin("answer", thrift.Thrift.Type.STRUCT, 2);
            this.answer.write(output);
            output.writeFieldEnd();
        }
        if (this.mediaStatus != null) {
            output.writeFieldBegin("mediaStatus", thrift.Thrift.Type.STRUCT, 3);
            this.mediaStatus.write(output);
            output.writeFieldEnd();
        }
        if (this.sdpOriginLocalId != null) {
            output.writeFieldBegin("sdpOriginLocalId", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.sdpOriginLocalId);
            output.writeFieldEnd();
        }
        if (this.renegotiationOffer != null) {
            output.writeFieldBegin("renegotiationOffer", thrift.Thrift.Type.STRUCT, 5);
            this.renegotiationOffer.write(output);
            output.writeFieldEnd();
        }
        if (this.mediaPath != null) {
            output.writeFieldBegin("mediaPath", thrift.Thrift.Type.I32, 6);
            output.writeI32(this.mediaPath);
            output.writeFieldEnd();
        }
        if (this.stateStore != null) {
            output.writeFieldBegin("stateStore", thrift.Thrift.Type.MAP, 7);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRUCT, this.stateStore.size);
            this.stateStore.forEach((value_1: State.State, key_1: string): void => {
                output.writeString(key_1);
                value_1.write(output);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.stateStoreV2 != null) {
            output.writeFieldBegin("stateStoreV2", thrift.Thrift.Type.MAP, 8);
            output.writeMapBegin(thrift.Thrift.Type.I32, thrift.Thrift.Type.STRUCT, this.stateStoreV2.size);
            this.stateStoreV2.forEach((value_2: State.State, key_2: number): void => {
                output.writeI32(key_2);
                value_2.write(output);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ClientMediaUpdateResponse {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_3: Int64 = input.readI64();
                        _args.currentVersion = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: SessionDescription.SessionDescription = SessionDescription.SessionDescription.read(input);
                        _args.answer = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_5: ClientMediaStatus.ClientMediaStatus = ClientMediaStatus.ClientMediaStatus.read(input);
                        _args.mediaStatus = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.sdpOriginLocalId = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_7: SessionDescription.SessionDescription = SessionDescription.SessionDescription.read(input);
                        _args.renegotiationOffer = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_8: number = input.readI32();
                        _args.mediaPath = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_9: Map<string, State.State> = new Map<string, State.State>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_3: string = input.readString();
                            const value_10: State.State = State.State.read(input);
                            value_9.set(key_3, value_10);
                        }
                        input.readMapEnd();
                        _args.stateStore = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_11: Map<number, State.State> = new Map<number, State.State>();
                        const metadata_2: thrift.TMap = input.readMapBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const key_4: number = input.readI32();
                            const value_12: State.State = State.State.read(input);
                            value_11.set(key_4, value_12);
                        }
                        input.readMapEnd();
                        _args.stateStoreV2 = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ClientMediaUpdateResponse(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface ISsrcObjectArgs {
    ssrcId?: number;
    cname?: string;
    msid?: string;
    msidAppData?: string;
}
export class SsrcObject {
    public ssrcId?: number;
    public cname?: string;
    public msid?: string;
    public msidAppData?: string;
    constructor(args?: ISsrcObjectArgs) {
        if (args != null && args.ssrcId != null) {
            this.ssrcId = args.ssrcId;
        }
        if (args != null && args.cname != null) {
            this.cname = args.cname;
        }
        if (args != null && args.msid != null) {
            this.msid = args.msid;
        }
        if (args != null && args.msidAppData != null) {
            this.msidAppData = args.msidAppData;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("SsrcObject");
        if (this.ssrcId != null) {
            output.writeFieldBegin("ssrcId", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.ssrcId);
            output.writeFieldEnd();
        }
        if (this.cname != null) {
            output.writeFieldBegin("cname", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.cname);
            output.writeFieldEnd();
        }
        if (this.msid != null) {
            output.writeFieldBegin("msid", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.msid);
            output.writeFieldEnd();
        }
        if (this.msidAppData != null) {
            output.writeFieldBegin("msidAppData", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.msidAppData);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): SsrcObject {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_1: number = input.readI32();
                        _args.ssrcId = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.cname = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.msid = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.msidAppData = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new SsrcObject(_args);
    }
}

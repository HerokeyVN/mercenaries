/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IContextArgs {
    rotation?: number;
    scale?: number;
    x?: number;
    y?: number;
}
export class Context {
    public rotation?: number;
    public scale?: number;
    public x?: number;
    public y?: number;
    constructor(args?: IContextArgs) {
        if (args != null && args.rotation != null) {
            this.rotation = args.rotation;
        }
        if (args != null && args.scale != null) {
            this.scale = args.scale;
        }
        if (args != null && args.x != null) {
            this.x = args.x;
        }
        if (args != null && args.y != null) {
            this.y = args.y;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Context");
        if (this.rotation != null) {
            output.writeFieldBegin("rotation", thrift.Thrift.Type.DOUBLE, 1);
            output.writeDouble(this.rotation);
            output.writeFieldEnd();
        }
        if (this.scale != null) {
            output.writeFieldBegin("scale", thrift.Thrift.Type.DOUBLE, 2);
            output.writeDouble(this.scale);
            output.writeFieldEnd();
        }
        if (this.x != null) {
            output.writeFieldBegin("x", thrift.Thrift.Type.DOUBLE, 3);
            output.writeDouble(this.x);
            output.writeFieldEnd();
        }
        if (this.y != null) {
            output.writeFieldBegin("y", thrift.Thrift.Type.DOUBLE, 4);
            output.writeDouble(this.y);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Context {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.DOUBLE) {
                        const value_1: number = input.readDouble();
                        _args.rotation = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.DOUBLE) {
                        const value_2: number = input.readDouble();
                        _args.scale = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.DOUBLE) {
                        const value_3: number = input.readDouble();
                        _args.x = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.DOUBLE) {
                        const value_4: number = input.readDouble();
                        _args.y = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new Context(_args);
    }
}

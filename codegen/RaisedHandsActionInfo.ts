/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IRaisedHandsActionInfoArgs {
    actor_uuid?: string;
    request_type?: number;
    action_uuid?: string;
    participant_uuids?: Set<string>;
}
export class RaisedHandsActionInfo {
    public actor_uuid?: string;
    public request_type?: number;
    public action_uuid?: string;
    public participant_uuids?: Set<string>;
    constructor(args?: IRaisedHandsActionInfoArgs) {
        if (args != null && args.actor_uuid != null) {
            this.actor_uuid = args.actor_uuid;
        }
        if (args != null && args.request_type != null) {
            this.request_type = args.request_type;
        }
        if (args != null && args.action_uuid != null) {
            this.action_uuid = args.action_uuid;
        }
        if (args != null && args.participant_uuids != null) {
            this.participant_uuids = args.participant_uuids;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RaisedHandsActionInfo");
        if (this.actor_uuid != null) {
            output.writeFieldBegin("actor_uuid", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.actor_uuid);
            output.writeFieldEnd();
        }
        if (this.request_type != null) {
            output.writeFieldBegin("request_type", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.request_type);
            output.writeFieldEnd();
        }
        if (this.action_uuid != null) {
            output.writeFieldBegin("action_uuid", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.action_uuid);
            output.writeFieldEnd();
        }
        if (this.participant_uuids != null) {
            output.writeFieldBegin("participant_uuids", thrift.Thrift.Type.SET, 4);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.participant_uuids.size);
            this.participant_uuids.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RaisedHandsActionInfo {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.actor_uuid = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: number = input.readI32();
                        _args.request_type = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.action_uuid = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_5: Set<string> = new Set<string>();
                        const metadata_1: thrift.TSet = input.readSetBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_6: string = input.readString();
                            value_5.add(value_6);
                        }
                        input.readSetEnd();
                        _args.participant_uuids = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RaisedHandsActionInfo(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as CompanionEndpoint from "./CompanionEndpoint";
export interface ICompanionInputStateArgs {
    companionEndpoint?: CompanionEndpoint.CompanionEndpoint;
    isCompanionJoin?: boolean;
    primaryParticipantId?: string;
}
export class CompanionInputState {
    public companionEndpoint?: CompanionEndpoint.CompanionEndpoint;
    public isCompanionJoin?: boolean;
    public primaryParticipantId?: string;
    constructor(args?: ICompanionInputStateArgs) {
        if (args != null && args.companionEndpoint != null) {
            this.companionEndpoint = args.companionEndpoint;
        }
        if (args != null && args.isCompanionJoin != null) {
            this.isCompanionJoin = args.isCompanionJoin;
        }
        if (args != null && args.primaryParticipantId != null) {
            this.primaryParticipantId = args.primaryParticipantId;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CompanionInputState");
        if (this.companionEndpoint != null) {
            output.writeFieldBegin("companionEndpoint", thrift.Thrift.Type.STRUCT, 1);
            this.companionEndpoint.write(output);
            output.writeFieldEnd();
        }
        if (this.isCompanionJoin != null) {
            output.writeFieldBegin("isCompanionJoin", thrift.Thrift.Type.BOOL, 2);
            output.writeBool(this.isCompanionJoin);
            output.writeFieldEnd();
        }
        if (this.primaryParticipantId != null) {
            output.writeFieldBegin("primaryParticipantId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.primaryParticipantId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CompanionInputState {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_1: CompanionEndpoint.CompanionEndpoint = CompanionEndpoint.CompanionEndpoint.read(input);
                        _args.companionEndpoint = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_2: boolean = input.readBool();
                        _args.isCompanionJoin = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.primaryParticipantId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CompanionInputState(_args);
    }
}

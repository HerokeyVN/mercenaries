/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
export interface ICoplayMatchInputStateArgs {
    matchId?: number | Int64;
    event?: number;
    isEligible?: boolean;
    gameId?: number | Int64;
    creatorId?: number | Int64;
    matchStatus?: number;
}
export class CoplayMatchInputState {
    public matchId?: Int64;
    public event?: number;
    public isEligible?: boolean;
    public gameId?: Int64;
    public creatorId?: Int64;
    public matchStatus?: number;
    constructor(args?: ICoplayMatchInputStateArgs) {
        if (args != null && args.matchId != null) {
            if (typeof args.matchId === "number") {
                this.matchId = new Int64(args.matchId);
            }
            else {
                this.matchId = args.matchId;
            }
        }
        if (args != null && args.event != null) {
            this.event = args.event;
        }
        if (args != null && args.isEligible != null) {
            this.isEligible = args.isEligible;
        }
        if (args != null && args.gameId != null) {
            if (typeof args.gameId === "number") {
                this.gameId = new Int64(args.gameId);
            }
            else {
                this.gameId = args.gameId;
            }
        }
        if (args != null && args.creatorId != null) {
            if (typeof args.creatorId === "number") {
                this.creatorId = new Int64(args.creatorId);
            }
            else {
                this.creatorId = args.creatorId;
            }
        }
        if (args != null && args.matchStatus != null) {
            this.matchStatus = args.matchStatus;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CoplayMatchInputState");
        if (this.matchId != null) {
            output.writeFieldBegin("matchId", thrift.Thrift.Type.I64, 1);
            output.writeI64(this.matchId);
            output.writeFieldEnd();
        }
        if (this.event != null) {
            output.writeFieldBegin("event", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.event);
            output.writeFieldEnd();
        }
        if (this.isEligible != null) {
            output.writeFieldBegin("isEligible", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.isEligible);
            output.writeFieldEnd();
        }
        if (this.gameId != null) {
            output.writeFieldBegin("gameId", thrift.Thrift.Type.I64, 4);
            output.writeI64(this.gameId);
            output.writeFieldEnd();
        }
        if (this.creatorId != null) {
            output.writeFieldBegin("creatorId", thrift.Thrift.Type.I64, 5);
            output.writeI64(this.creatorId);
            output.writeFieldEnd();
        }
        if (this.matchStatus != null) {
            output.writeFieldBegin("matchStatus", thrift.Thrift.Type.I32, 6);
            output.writeI32(this.matchStatus);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CoplayMatchInputState {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_1: Int64 = input.readI64();
                        _args.matchId = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: number = input.readI32();
                        _args.event = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_3: boolean = input.readBool();
                        _args.isEligible = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.gameId = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_5: Int64 = input.readI64();
                        _args.creatorId = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_6: number = input.readI32();
                        _args.matchStatus = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CoplayMatchInputState(_args);
    }
}

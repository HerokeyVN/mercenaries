/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
import * as ParticipantState from "./ParticipantState";
import * as UserProfile from "./UserProfile";
import * as DataMessage from "./DataMessage";
import * as GroupOfUsers from "./GroupOfUsers";
export interface IConferenceStateRequestArgs {
    version?: number | Int64;
    participantStates?: Map<string, ParticipantState.ParticipantState>;
    userProfiles?: Map<string, UserProfile.UserProfile>;
    appMessages?: Array<DataMessage.DataMessage>;
    groupsOfUsers?: Array<GroupOfUsers.GroupOfUsers>;
}
export class ConferenceStateRequest {
    public version?: Int64;
    public participantStates?: Map<string, ParticipantState.ParticipantState>;
    public userProfiles?: Map<string, UserProfile.UserProfile>;
    public appMessages?: Array<DataMessage.DataMessage>;
    public groupsOfUsers?: Array<GroupOfUsers.GroupOfUsers>;
    constructor(args?: IConferenceStateRequestArgs) {
        if (args != null && args.version != null) {
            if (typeof args.version === "number") {
                this.version = new Int64(args.version);
            }
            else {
                this.version = args.version;
            }
        }
        if (args != null && args.participantStates != null) {
            this.participantStates = args.participantStates;
        }
        if (args != null && args.userProfiles != null) {
            this.userProfiles = args.userProfiles;
        }
        if (args != null && args.appMessages != null) {
            this.appMessages = args.appMessages;
        }
        if (args != null && args.groupsOfUsers != null) {
            this.groupsOfUsers = args.groupsOfUsers;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ConferenceStateRequest");
        if (this.version != null) {
            output.writeFieldBegin("version", thrift.Thrift.Type.I64, 1);
            output.writeI64(this.version);
            output.writeFieldEnd();
        }
        if (this.participantStates != null) {
            output.writeFieldBegin("participantStates", thrift.Thrift.Type.MAP, 2);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRUCT, this.participantStates.size);
            this.participantStates.forEach((value_1: ParticipantState.ParticipantState, key_1: string): void => {
                output.writeString(key_1);
                value_1.write(output);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.userProfiles != null) {
            output.writeFieldBegin("userProfiles", thrift.Thrift.Type.MAP, 3);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRUCT, this.userProfiles.size);
            this.userProfiles.forEach((value_2: UserProfile.UserProfile, key_2: string): void => {
                output.writeString(key_2);
                value_2.write(output);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.appMessages != null) {
            output.writeFieldBegin("appMessages", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.appMessages.length);
            this.appMessages.forEach((value_3: DataMessage.DataMessage): void => {
                value_3.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.groupsOfUsers != null) {
            output.writeFieldBegin("groupsOfUsers", thrift.Thrift.Type.LIST, 5);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.groupsOfUsers.length);
            this.groupsOfUsers.forEach((value_4: GroupOfUsers.GroupOfUsers): void => {
                value_4.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ConferenceStateRequest {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_5: Int64 = input.readI64();
                        _args.version = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_6: Map<string, ParticipantState.ParticipantState> = new Map<string, ParticipantState.ParticipantState>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_3: string = input.readString();
                            const value_7: ParticipantState.ParticipantState = ParticipantState.ParticipantState.read(input);
                            value_6.set(key_3, value_7);
                        }
                        input.readMapEnd();
                        _args.participantStates = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_8: Map<string, UserProfile.UserProfile> = new Map<string, UserProfile.UserProfile>();
                        const metadata_2: thrift.TMap = input.readMapBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const key_4: string = input.readString();
                            const value_9: UserProfile.UserProfile = UserProfile.UserProfile.read(input);
                            value_8.set(key_4, value_9);
                        }
                        input.readMapEnd();
                        _args.userProfiles = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_10: Array<DataMessage.DataMessage> = new Array<DataMessage.DataMessage>();
                        const metadata_3: thrift.TList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_11: DataMessage.DataMessage = DataMessage.DataMessage.read(input);
                            value_10.push(value_11);
                        }
                        input.readListEnd();
                        _args.appMessages = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_12: Array<GroupOfUsers.GroupOfUsers> = new Array<GroupOfUsers.GroupOfUsers>();
                        const metadata_4: thrift.TList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_13: GroupOfUsers.GroupOfUsers = GroupOfUsers.GroupOfUsers.read(input);
                            value_12.push(value_13);
                        }
                        input.readListEnd();
                        _args.groupsOfUsers = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ConferenceStateRequest(_args);
    }
}

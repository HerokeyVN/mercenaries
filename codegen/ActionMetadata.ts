/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
import * as AdsMetadata from "./AdsMetadata";
export interface IActionMetadataArgs {
    media_position_ms?: number | Int64;
    action_time_ms?: number | Int64;
    autoplay_action_id?: string;
    tab_source?: string;
    skip_double_write?: boolean;
    ads_metadata?: AdsMetadata.AdsMetadata;
    carousel_item_index?: number;
    play_media_swipe_direction?: number;
    suggested_index?: number;
    cursor?: string;
    suggested_context?: string;
}
export class ActionMetadata {
    public media_position_ms?: Int64;
    public action_time_ms?: Int64;
    public autoplay_action_id?: string;
    public tab_source?: string;
    public skip_double_write?: boolean;
    public ads_metadata?: AdsMetadata.AdsMetadata;
    public carousel_item_index?: number;
    public play_media_swipe_direction?: number;
    public suggested_index?: number;
    public cursor?: string;
    public suggested_context?: string;
    constructor(args?: IActionMetadataArgs) {
        if (args != null && args.media_position_ms != null) {
            if (typeof args.media_position_ms === "number") {
                this.media_position_ms = new Int64(args.media_position_ms);
            }
            else {
                this.media_position_ms = args.media_position_ms;
            }
        }
        if (args != null && args.action_time_ms != null) {
            if (typeof args.action_time_ms === "number") {
                this.action_time_ms = new Int64(args.action_time_ms);
            }
            else {
                this.action_time_ms = args.action_time_ms;
            }
        }
        if (args != null && args.autoplay_action_id != null) {
            this.autoplay_action_id = args.autoplay_action_id;
        }
        if (args != null && args.tab_source != null) {
            this.tab_source = args.tab_source;
        }
        if (args != null && args.skip_double_write != null) {
            this.skip_double_write = args.skip_double_write;
        }
        if (args != null && args.ads_metadata != null) {
            this.ads_metadata = args.ads_metadata;
        }
        if (args != null && args.carousel_item_index != null) {
            this.carousel_item_index = args.carousel_item_index;
        }
        if (args != null && args.play_media_swipe_direction != null) {
            this.play_media_swipe_direction = args.play_media_swipe_direction;
        }
        if (args != null && args.suggested_index != null) {
            this.suggested_index = args.suggested_index;
        }
        if (args != null && args.cursor != null) {
            this.cursor = args.cursor;
        }
        if (args != null && args.suggested_context != null) {
            this.suggested_context = args.suggested_context;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ActionMetadata");
        if (this.media_position_ms != null) {
            output.writeFieldBegin("media_position_ms", thrift.Thrift.Type.I64, 1);
            output.writeI64(this.media_position_ms);
            output.writeFieldEnd();
        }
        if (this.action_time_ms != null) {
            output.writeFieldBegin("action_time_ms", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.action_time_ms);
            output.writeFieldEnd();
        }
        if (this.autoplay_action_id != null) {
            output.writeFieldBegin("autoplay_action_id", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.autoplay_action_id);
            output.writeFieldEnd();
        }
        if (this.tab_source != null) {
            output.writeFieldBegin("tab_source", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.tab_source);
            output.writeFieldEnd();
        }
        if (this.skip_double_write != null) {
            output.writeFieldBegin("skip_double_write", thrift.Thrift.Type.BOOL, 5);
            output.writeBool(this.skip_double_write);
            output.writeFieldEnd();
        }
        if (this.ads_metadata != null) {
            output.writeFieldBegin("ads_metadata", thrift.Thrift.Type.STRUCT, 6);
            this.ads_metadata.write(output);
            output.writeFieldEnd();
        }
        if (this.carousel_item_index != null) {
            output.writeFieldBegin("carousel_item_index", thrift.Thrift.Type.I32, 7);
            output.writeI32(this.carousel_item_index);
            output.writeFieldEnd();
        }
        if (this.play_media_swipe_direction != null) {
            output.writeFieldBegin("play_media_swipe_direction", thrift.Thrift.Type.I32, 8);
            output.writeI32(this.play_media_swipe_direction);
            output.writeFieldEnd();
        }
        if (this.suggested_index != null) {
            output.writeFieldBegin("suggested_index", thrift.Thrift.Type.I32, 9);
            output.writeI32(this.suggested_index);
            output.writeFieldEnd();
        }
        if (this.cursor != null) {
            output.writeFieldBegin("cursor", thrift.Thrift.Type.STRING, 10);
            output.writeString(this.cursor);
            output.writeFieldEnd();
        }
        if (this.suggested_context != null) {
            output.writeFieldBegin("suggested_context", thrift.Thrift.Type.STRING, 11);
            output.writeString(this.suggested_context);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ActionMetadata {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_1: Int64 = input.readI64();
                        _args.media_position_ms = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_2: Int64 = input.readI64();
                        _args.action_time_ms = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.autoplay_action_id = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.tab_source = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_5: boolean = input.readBool();
                        _args.skip_double_write = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_6: AdsMetadata.AdsMetadata = AdsMetadata.AdsMetadata.read(input);
                        _args.ads_metadata = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_7: number = input.readI32();
                        _args.carousel_item_index = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_8: number = input.readI32();
                        _args.play_media_swipe_direction = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_9: number = input.readI32();
                        _args.suggested_index = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_10: string = input.readString();
                        _args.cursor = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_11: string = input.readString();
                        _args.suggested_context = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ActionMetadata(_args);
    }
}

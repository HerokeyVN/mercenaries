/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as CompanionEndpoint from "./CompanionEndpoint";
export interface ICompanionConferenceOutputStateArgs {
    companionEndpoints?: Array<CompanionEndpoint.CompanionEndpoint>;
    primaryParticipantToCompanions?: Map<string, Array<CompanionEndpoint.CompanionEndpoint>>;
}
export class CompanionConferenceOutputState {
    public companionEndpoints?: Array<CompanionEndpoint.CompanionEndpoint>;
    public primaryParticipantToCompanions?: Map<string, Array<CompanionEndpoint.CompanionEndpoint>>;
    constructor(args?: ICompanionConferenceOutputStateArgs) {
        if (args != null && args.companionEndpoints != null) {
            this.companionEndpoints = args.companionEndpoints;
        }
        if (args != null && args.primaryParticipantToCompanions != null) {
            this.primaryParticipantToCompanions = args.primaryParticipantToCompanions;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CompanionConferenceOutputState");
        if (this.companionEndpoints != null) {
            output.writeFieldBegin("companionEndpoints", thrift.Thrift.Type.LIST, 1);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.companionEndpoints.length);
            this.companionEndpoints.forEach((value_1: CompanionEndpoint.CompanionEndpoint): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.primaryParticipantToCompanions != null) {
            output.writeFieldBegin("primaryParticipantToCompanions", thrift.Thrift.Type.MAP, 2);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.LIST, this.primaryParticipantToCompanions.size);
            this.primaryParticipantToCompanions.forEach((value_2: Array<CompanionEndpoint.CompanionEndpoint>, key_1: string): void => {
                output.writeString(key_1);
                output.writeListBegin(thrift.Thrift.Type.STRUCT, value_2.length);
                value_2.forEach((value_3: CompanionEndpoint.CompanionEndpoint): void => {
                    value_3.write(output);
                });
                output.writeListEnd();
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CompanionConferenceOutputState {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_4: Array<CompanionEndpoint.CompanionEndpoint> = new Array<CompanionEndpoint.CompanionEndpoint>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_5: CompanionEndpoint.CompanionEndpoint = CompanionEndpoint.CompanionEndpoint.read(input);
                            value_4.push(value_5);
                        }
                        input.readListEnd();
                        _args.companionEndpoints = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_6: Map<string, Array<CompanionEndpoint.CompanionEndpoint>> = new Map<string, Array<CompanionEndpoint.CompanionEndpoint>>();
                        const metadata_2: thrift.TMap = input.readMapBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const key_2: string = input.readString();
                            const value_7: Array<CompanionEndpoint.CompanionEndpoint> = new Array<CompanionEndpoint.CompanionEndpoint>();
                            const metadata_3: thrift.TList = input.readListBegin();
                            const size_3: number = metadata_3.size;
                            for (let i_3: number = 0; i_3 < size_3; i_3++) {
                                const value_8: CompanionEndpoint.CompanionEndpoint = CompanionEndpoint.CompanionEndpoint.read(input);
                                value_7.push(value_8);
                            }
                            input.readListEnd();
                            value_6.set(key_2, value_7);
                        }
                        input.readMapEnd();
                        _args.primaryParticipantToCompanions = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CompanionConferenceOutputState(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as IdentityKeyInfo from "./IdentityKeyInfo";
export interface IE2eeEndpointInfoArgs {
    preKeyBundle?: string;
    identityKeyInfo?: IdentityKeyInfo.IdentityKeyInfo;
    deviceId?: number;
}
export class E2eeEndpointInfo {
    public preKeyBundle?: string;
    public identityKeyInfo?: IdentityKeyInfo.IdentityKeyInfo;
    public deviceId?: number;
    constructor(args?: IE2eeEndpointInfoArgs) {
        if (args != null && args.preKeyBundle != null) {
            this.preKeyBundle = args.preKeyBundle;
        }
        if (args != null && args.identityKeyInfo != null) {
            this.identityKeyInfo = args.identityKeyInfo;
        }
        if (args != null && args.deviceId != null) {
            this.deviceId = args.deviceId;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("E2eeEndpointInfo");
        if (this.preKeyBundle != null) {
            output.writeFieldBegin("preKeyBundle", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.preKeyBundle);
            output.writeFieldEnd();
        }
        if (this.identityKeyInfo != null) {
            output.writeFieldBegin("identityKeyInfo", thrift.Thrift.Type.STRUCT, 2);
            this.identityKeyInfo.write(output);
            output.writeFieldEnd();
        }
        if (this.deviceId != null) {
            output.writeFieldBegin("deviceId", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.deviceId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): E2eeEndpointInfo {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.preKeyBundle = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: IdentityKeyInfo.IdentityKeyInfo = IdentityKeyInfo.IdentityKeyInfo.read(input);
                        _args.identityKeyInfo = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: number = input.readI32();
                        _args.deviceId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new E2eeEndpointInfo(_args);
    }
}

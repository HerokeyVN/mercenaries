/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
export interface ILiveStreamExtensionInputStateArgs {
    broadcastId?: number | Int64;
    liveStreamStatus?: number;
    broadcastParticipants?: Array<string>;
}
export class LiveStreamExtensionInputState {
    public broadcastId?: Int64;
    public liveStreamStatus?: number;
    public broadcastParticipants?: Array<string>;
    constructor(args?: ILiveStreamExtensionInputStateArgs) {
        if (args != null && args.broadcastId != null) {
            if (typeof args.broadcastId === "number") {
                this.broadcastId = new Int64(args.broadcastId);
            }
            else {
                this.broadcastId = args.broadcastId;
            }
        }
        if (args != null && args.liveStreamStatus != null) {
            this.liveStreamStatus = args.liveStreamStatus;
        }
        if (args != null && args.broadcastParticipants != null) {
            this.broadcastParticipants = args.broadcastParticipants;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("LiveStreamExtensionInputState");
        if (this.broadcastId != null) {
            output.writeFieldBegin("broadcastId", thrift.Thrift.Type.I64, 1);
            output.writeI64(this.broadcastId);
            output.writeFieldEnd();
        }
        if (this.liveStreamStatus != null) {
            output.writeFieldBegin("liveStreamStatus", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.liveStreamStatus);
            output.writeFieldEnd();
        }
        if (this.broadcastParticipants != null) {
            output.writeFieldBegin("broadcastParticipants", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.broadcastParticipants.length);
            this.broadcastParticipants.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): LiveStreamExtensionInputState {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_2: Int64 = input.readI64();
                        _args.broadcastId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: number = input.readI32();
                        _args.liveStreamStatus = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_4: Array<string> = new Array<string>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_5: string = input.readString();
                            value_4.push(value_5);
                        }
                        input.readListEnd();
                        _args.broadcastParticipants = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new LiveStreamExtensionInputState(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
import * as CoplayParticipantInfo from "./CoplayParticipantInfo";
export interface ICoplayMatchStateArgs {
    matchId?: number | Int64;
    appId?: number | Int64;
    matchStatus?: number;
    participants?: Array<CoplayParticipantInfo.CoplayParticipantInfo>;
    creatorId?: number | Int64;
}
export class CoplayMatchState {
    public matchId?: Int64;
    public appId?: Int64;
    public matchStatus?: number;
    public participants?: Array<CoplayParticipantInfo.CoplayParticipantInfo>;
    public creatorId?: Int64;
    constructor(args?: ICoplayMatchStateArgs) {
        if (args != null && args.matchId != null) {
            if (typeof args.matchId === "number") {
                this.matchId = new Int64(args.matchId);
            }
            else {
                this.matchId = args.matchId;
            }
        }
        if (args != null && args.appId != null) {
            if (typeof args.appId === "number") {
                this.appId = new Int64(args.appId);
            }
            else {
                this.appId = args.appId;
            }
        }
        if (args != null && args.matchStatus != null) {
            this.matchStatus = args.matchStatus;
        }
        if (args != null && args.participants != null) {
            this.participants = args.participants;
        }
        if (args != null && args.creatorId != null) {
            if (typeof args.creatorId === "number") {
                this.creatorId = new Int64(args.creatorId);
            }
            else {
                this.creatorId = args.creatorId;
            }
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CoplayMatchState");
        if (this.matchId != null) {
            output.writeFieldBegin("matchId", thrift.Thrift.Type.I64, 1);
            output.writeI64(this.matchId);
            output.writeFieldEnd();
        }
        if (this.appId != null) {
            output.writeFieldBegin("appId", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.appId);
            output.writeFieldEnd();
        }
        if (this.matchStatus != null) {
            output.writeFieldBegin("matchStatus", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.matchStatus);
            output.writeFieldEnd();
        }
        if (this.participants != null) {
            output.writeFieldBegin("participants", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.participants.length);
            this.participants.forEach((value_1: CoplayParticipantInfo.CoplayParticipantInfo): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.creatorId != null) {
            output.writeFieldBegin("creatorId", thrift.Thrift.Type.I64, 5);
            output.writeI64(this.creatorId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CoplayMatchState {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_2: Int64 = input.readI64();
                        _args.matchId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_3: Int64 = input.readI64();
                        _args.appId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_4: number = input.readI32();
                        _args.matchStatus = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_5: Array<CoplayParticipantInfo.CoplayParticipantInfo> = new Array<CoplayParticipantInfo.CoplayParticipantInfo>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_6: CoplayParticipantInfo.CoplayParticipantInfo = CoplayParticipantInfo.CoplayParticipantInfo.read(input);
                            value_5.push(value_6);
                        }
                        input.readListEnd();
                        _args.participants = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_7: Int64 = input.readI64();
                        _args.creatorId = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CoplayMatchState(_args);
    }
}

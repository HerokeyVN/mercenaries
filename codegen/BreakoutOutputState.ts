/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as BreakoutSession from "./BreakoutSession";
export interface IBreakoutOutputStateArgs {
    breakoutSession?: BreakoutSession.BreakoutSession;
    isBreakoutFeatureEnabled?: boolean;
    canViewerStartBreakout?: boolean;
    participantsSupportingBreakout?: Set<string>;
    lastActionID?: number;
}
export class BreakoutOutputState {
    public breakoutSession?: BreakoutSession.BreakoutSession;
    public isBreakoutFeatureEnabled?: boolean;
    public canViewerStartBreakout?: boolean;
    public participantsSupportingBreakout?: Set<string>;
    public lastActionID?: number;
    constructor(args?: IBreakoutOutputStateArgs) {
        if (args != null && args.breakoutSession != null) {
            this.breakoutSession = args.breakoutSession;
        }
        if (args != null && args.isBreakoutFeatureEnabled != null) {
            this.isBreakoutFeatureEnabled = args.isBreakoutFeatureEnabled;
        }
        if (args != null && args.canViewerStartBreakout != null) {
            this.canViewerStartBreakout = args.canViewerStartBreakout;
        }
        if (args != null && args.participantsSupportingBreakout != null) {
            this.participantsSupportingBreakout = args.participantsSupportingBreakout;
        }
        if (args != null && args.lastActionID != null) {
            this.lastActionID = args.lastActionID;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("BreakoutOutputState");
        if (this.breakoutSession != null) {
            output.writeFieldBegin("breakoutSession", thrift.Thrift.Type.STRUCT, 1);
            this.breakoutSession.write(output);
            output.writeFieldEnd();
        }
        if (this.isBreakoutFeatureEnabled != null) {
            output.writeFieldBegin("isBreakoutFeatureEnabled", thrift.Thrift.Type.BOOL, 2);
            output.writeBool(this.isBreakoutFeatureEnabled);
            output.writeFieldEnd();
        }
        if (this.canViewerStartBreakout != null) {
            output.writeFieldBegin("canViewerStartBreakout", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.canViewerStartBreakout);
            output.writeFieldEnd();
        }
        if (this.participantsSupportingBreakout != null) {
            output.writeFieldBegin("participantsSupportingBreakout", thrift.Thrift.Type.SET, 4);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.participantsSupportingBreakout.size);
            this.participantsSupportingBreakout.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.lastActionID != null) {
            output.writeFieldBegin("lastActionID", thrift.Thrift.Type.I32, 5);
            output.writeI32(this.lastActionID);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): BreakoutOutputState {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: BreakoutSession.BreakoutSession = BreakoutSession.BreakoutSession.read(input);
                        _args.breakoutSession = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_3: boolean = input.readBool();
                        _args.isBreakoutFeatureEnabled = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_4: boolean = input.readBool();
                        _args.canViewerStartBreakout = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_5: Set<string> = new Set<string>();
                        const metadata_1: thrift.TSet = input.readSetBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_6: string = input.readString();
                            value_5.add(value_6);
                        }
                        input.readSetEnd();
                        _args.participantsSupportingBreakout = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_7: number = input.readI32();
                        _args.lastActionID = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new BreakoutOutputState(_args);
    }
}

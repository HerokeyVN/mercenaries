/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
export interface IQuickExperimentExposureLoggingEventArgs {
    conditionFbid?: number | Int64;
    userFbid?: number | Int64;
    universeName?: string;
    unitId?: string;
}
export class QuickExperimentExposureLoggingEvent {
    public conditionFbid?: Int64;
    public userFbid?: Int64;
    public universeName?: string;
    public unitId?: string;
    constructor(args?: IQuickExperimentExposureLoggingEventArgs) {
        if (args != null && args.conditionFbid != null) {
            if (typeof args.conditionFbid === "number") {
                this.conditionFbid = new Int64(args.conditionFbid);
            }
            else {
                this.conditionFbid = args.conditionFbid;
            }
        }
        if (args != null && args.userFbid != null) {
            if (typeof args.userFbid === "number") {
                this.userFbid = new Int64(args.userFbid);
            }
            else {
                this.userFbid = args.userFbid;
            }
        }
        if (args != null && args.universeName != null) {
            this.universeName = args.universeName;
        }
        if (args != null && args.unitId != null) {
            this.unitId = args.unitId;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("QuickExperimentExposureLoggingEvent");
        if (this.conditionFbid != null) {
            output.writeFieldBegin("conditionFbid", thrift.Thrift.Type.I64, 1);
            output.writeI64(this.conditionFbid);
            output.writeFieldEnd();
        }
        if (this.userFbid != null) {
            output.writeFieldBegin("userFbid", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.userFbid);
            output.writeFieldEnd();
        }
        if (this.universeName != null) {
            output.writeFieldBegin("universeName", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.universeName);
            output.writeFieldEnd();
        }
        if (this.unitId != null) {
            output.writeFieldBegin("unitId", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.unitId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): QuickExperimentExposureLoggingEvent {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_1: Int64 = input.readI64();
                        _args.conditionFbid = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_2: Int64 = input.readI64();
                        _args.userFbid = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.universeName = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.unitId = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new QuickExperimentExposureLoggingEvent(_args);
    }
}

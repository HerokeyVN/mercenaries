/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IParticipantPermissionsUpsertInputArgs {
    participant_id?: string;
    permissions?: Set<number>;
}
export class ParticipantPermissionsUpsertInput {
    public participant_id?: string;
    public permissions?: Set<number>;
    constructor(args?: IParticipantPermissionsUpsertInputArgs) {
        if (args != null && args.participant_id != null) {
            this.participant_id = args.participant_id;
        }
        if (args != null && args.permissions != null) {
            this.permissions = args.permissions;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ParticipantPermissionsUpsertInput");
        if (this.participant_id != null) {
            output.writeFieldBegin("participant_id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.participant_id);
            output.writeFieldEnd();
        }
        if (this.permissions != null) {
            output.writeFieldBegin("permissions", thrift.Thrift.Type.SET, 2);
            output.writeSetBegin(thrift.Thrift.Type.I32, this.permissions.size);
            this.permissions.forEach((value_1: number): void => {
                output.writeI32(value_1);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ParticipantPermissionsUpsertInput {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.participant_id = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_3: Set<number> = new Set<number>();
                        const metadata_1: thrift.TSet = input.readSetBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_4: number = input.readI32();
                            value_3.add(value_4);
                        }
                        input.readSetEnd();
                        _args.permissions = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ParticipantPermissionsUpsertInput(_args);
    }
}

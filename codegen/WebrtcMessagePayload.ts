/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as OfferPayload from "./OfferPayload";
import * as OfferAckPayload from "./OfferAckPayload";
import * as AnswerPayload from "./AnswerPayload";
import * as AnswerAckPayload from "./AnswerAckPayload";
import * as IceCandidatePayload from "./IceCandidatePayload";
import * as OkPayload from "./OkPayload";
import * as HangUpPayload from "./HangUpPayload";
import * as OtherDismissPayload from "./OtherDismissPayload";
import * as PranswerPayload from "./PranswerPayload";
import * as NotifyMediaStatePayload from "./NotifyMediaStatePayload";
import * as AckPayload from "./AckPayload";
import * as OfferNackPayload from "./OfferNackPayload";
import * as NackPayload from "./NackPayload";
import * as VideoRequestPayload from "./VideoRequestPayload";
import * as SdpUpdatePayload from "./SdpUpdatePayload";
import * as SwitchToMultiwayPayload from "./SwitchToMultiwayPayload";
import * as SdpNegotiatePayload from "./SdpNegotiatePayload";
import * as RingPayload from "./RingPayload";
import * as PrOfferAckPayload from "./PrOfferAckPayload";
import * as ClientReportedEventPayload from "./ClientReportedEventPayload";
export interface IWebrtcMessagePayloadArgs {
    offerPayload?: OfferPayload.OfferPayload;
    offerAckPayload?: OfferAckPayload.OfferAckPayload;
    answerPayload?: AnswerPayload.AnswerPayload;
    answerAckPayload?: AnswerAckPayload.AnswerAckPayload;
    iceCandidatePayloads?: Array<IceCandidatePayload.IceCandidatePayload>;
    okPayload?: OkPayload.OkPayload;
    hangUpPayload?: HangUpPayload.HangUpPayload;
    otherDismissPayload?: OtherDismissPayload.OtherDismissPayload;
    pranswerPayload?: PranswerPayload.PranswerPayload;
    notifyMediaStatePayload?: NotifyMediaStatePayload.NotifyMediaStatePayload;
    ackPayload?: AckPayload.AckPayload;
    offerNackPayload?: OfferNackPayload.OfferNackPayload;
    nackPayload?: NackPayload.NackPayload;
    videoRequestPayload?: VideoRequestPayload.VideoRequestPayload;
    sdpUpdatePayload?: SdpUpdatePayload.SdpUpdatePayload;
    switchToMultiwayPayload?: SwitchToMultiwayPayload.SwitchToMultiwayPayload;
    sdpNegotiatePayload?: SdpNegotiatePayload.SdpNegotiatePayload;
    ringPayload?: RingPayload.RingPayload;
    prOfferAckPayload?: PrOfferAckPayload.PrOfferAckPayload;
    clientReportedEventPayload?: ClientReportedEventPayload.ClientReportedEventPayload;
}
export class WebrtcMessagePayload {
    public offerPayload?: OfferPayload.OfferPayload;
    public offerAckPayload?: OfferAckPayload.OfferAckPayload;
    public answerPayload?: AnswerPayload.AnswerPayload;
    public answerAckPayload?: AnswerAckPayload.AnswerAckPayload;
    public iceCandidatePayloads?: Array<IceCandidatePayload.IceCandidatePayload>;
    public okPayload?: OkPayload.OkPayload;
    public hangUpPayload?: HangUpPayload.HangUpPayload;
    public otherDismissPayload?: OtherDismissPayload.OtherDismissPayload;
    public pranswerPayload?: PranswerPayload.PranswerPayload;
    public notifyMediaStatePayload?: NotifyMediaStatePayload.NotifyMediaStatePayload;
    public ackPayload?: AckPayload.AckPayload;
    public offerNackPayload?: OfferNackPayload.OfferNackPayload;
    public nackPayload?: NackPayload.NackPayload;
    public videoRequestPayload?: VideoRequestPayload.VideoRequestPayload;
    public sdpUpdatePayload?: SdpUpdatePayload.SdpUpdatePayload;
    public switchToMultiwayPayload?: SwitchToMultiwayPayload.SwitchToMultiwayPayload;
    public sdpNegotiatePayload?: SdpNegotiatePayload.SdpNegotiatePayload;
    public ringPayload?: RingPayload.RingPayload;
    public prOfferAckPayload?: PrOfferAckPayload.PrOfferAckPayload;
    public clientReportedEventPayload?: ClientReportedEventPayload.ClientReportedEventPayload;
    constructor(args?: IWebrtcMessagePayloadArgs) {
        if (args != null && args.offerPayload != null) {
            this.offerPayload = args.offerPayload;
        }
        if (args != null && args.offerAckPayload != null) {
            this.offerAckPayload = args.offerAckPayload;
        }
        if (args != null && args.answerPayload != null) {
            this.answerPayload = args.answerPayload;
        }
        if (args != null && args.answerAckPayload != null) {
            this.answerAckPayload = args.answerAckPayload;
        }
        if (args != null && args.iceCandidatePayloads != null) {
            this.iceCandidatePayloads = args.iceCandidatePayloads;
        }
        if (args != null && args.okPayload != null) {
            this.okPayload = args.okPayload;
        }
        if (args != null && args.hangUpPayload != null) {
            this.hangUpPayload = args.hangUpPayload;
        }
        if (args != null && args.otherDismissPayload != null) {
            this.otherDismissPayload = args.otherDismissPayload;
        }
        if (args != null && args.pranswerPayload != null) {
            this.pranswerPayload = args.pranswerPayload;
        }
        if (args != null && args.notifyMediaStatePayload != null) {
            this.notifyMediaStatePayload = args.notifyMediaStatePayload;
        }
        if (args != null && args.ackPayload != null) {
            this.ackPayload = args.ackPayload;
        }
        if (args != null && args.offerNackPayload != null) {
            this.offerNackPayload = args.offerNackPayload;
        }
        if (args != null && args.nackPayload != null) {
            this.nackPayload = args.nackPayload;
        }
        if (args != null && args.videoRequestPayload != null) {
            this.videoRequestPayload = args.videoRequestPayload;
        }
        if (args != null && args.sdpUpdatePayload != null) {
            this.sdpUpdatePayload = args.sdpUpdatePayload;
        }
        if (args != null && args.switchToMultiwayPayload != null) {
            this.switchToMultiwayPayload = args.switchToMultiwayPayload;
        }
        if (args != null && args.sdpNegotiatePayload != null) {
            this.sdpNegotiatePayload = args.sdpNegotiatePayload;
        }
        if (args != null && args.ringPayload != null) {
            this.ringPayload = args.ringPayload;
        }
        if (args != null && args.prOfferAckPayload != null) {
            this.prOfferAckPayload = args.prOfferAckPayload;
        }
        if (args != null && args.clientReportedEventPayload != null) {
            this.clientReportedEventPayload = args.clientReportedEventPayload;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("WebrtcMessagePayload");
        if (this.offerPayload != null) {
            output.writeFieldBegin("offerPayload", thrift.Thrift.Type.STRUCT, 1);
            this.offerPayload.write(output);
            output.writeFieldEnd();
        }
        if (this.offerAckPayload != null) {
            output.writeFieldBegin("offerAckPayload", thrift.Thrift.Type.STRUCT, 2);
            this.offerAckPayload.write(output);
            output.writeFieldEnd();
        }
        if (this.answerPayload != null) {
            output.writeFieldBegin("answerPayload", thrift.Thrift.Type.STRUCT, 3);
            this.answerPayload.write(output);
            output.writeFieldEnd();
        }
        if (this.answerAckPayload != null) {
            output.writeFieldBegin("answerAckPayload", thrift.Thrift.Type.STRUCT, 4);
            this.answerAckPayload.write(output);
            output.writeFieldEnd();
        }
        if (this.iceCandidatePayloads != null) {
            output.writeFieldBegin("iceCandidatePayloads", thrift.Thrift.Type.LIST, 5);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.iceCandidatePayloads.length);
            this.iceCandidatePayloads.forEach((value_1: IceCandidatePayload.IceCandidatePayload): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.okPayload != null) {
            output.writeFieldBegin("okPayload", thrift.Thrift.Type.STRUCT, 6);
            this.okPayload.write(output);
            output.writeFieldEnd();
        }
        if (this.hangUpPayload != null) {
            output.writeFieldBegin("hangUpPayload", thrift.Thrift.Type.STRUCT, 7);
            this.hangUpPayload.write(output);
            output.writeFieldEnd();
        }
        if (this.otherDismissPayload != null) {
            output.writeFieldBegin("otherDismissPayload", thrift.Thrift.Type.STRUCT, 8);
            this.otherDismissPayload.write(output);
            output.writeFieldEnd();
        }
        if (this.pranswerPayload != null) {
            output.writeFieldBegin("pranswerPayload", thrift.Thrift.Type.STRUCT, 9);
            this.pranswerPayload.write(output);
            output.writeFieldEnd();
        }
        if (this.notifyMediaStatePayload != null) {
            output.writeFieldBegin("notifyMediaStatePayload", thrift.Thrift.Type.STRUCT, 13);
            this.notifyMediaStatePayload.write(output);
            output.writeFieldEnd();
        }
        if (this.ackPayload != null) {
            output.writeFieldBegin("ackPayload", thrift.Thrift.Type.STRUCT, 14);
            this.ackPayload.write(output);
            output.writeFieldEnd();
        }
        if (this.offerNackPayload != null) {
            output.writeFieldBegin("offerNackPayload", thrift.Thrift.Type.STRUCT, 15);
            this.offerNackPayload.write(output);
            output.writeFieldEnd();
        }
        if (this.nackPayload != null) {
            output.writeFieldBegin("nackPayload", thrift.Thrift.Type.STRUCT, 16);
            this.nackPayload.write(output);
            output.writeFieldEnd();
        }
        if (this.videoRequestPayload != null) {
            output.writeFieldBegin("videoRequestPayload", thrift.Thrift.Type.STRUCT, 17);
            this.videoRequestPayload.write(output);
            output.writeFieldEnd();
        }
        if (this.sdpUpdatePayload != null) {
            output.writeFieldBegin("sdpUpdatePayload", thrift.Thrift.Type.STRUCT, 18);
            this.sdpUpdatePayload.write(output);
            output.writeFieldEnd();
        }
        if (this.switchToMultiwayPayload != null) {
            output.writeFieldBegin("switchToMultiwayPayload", thrift.Thrift.Type.STRUCT, 24);
            this.switchToMultiwayPayload.write(output);
            output.writeFieldEnd();
        }
        if (this.sdpNegotiatePayload != null) {
            output.writeFieldBegin("sdpNegotiatePayload", thrift.Thrift.Type.STRUCT, 26);
            this.sdpNegotiatePayload.write(output);
            output.writeFieldEnd();
        }
        if (this.ringPayload != null) {
            output.writeFieldBegin("ringPayload", thrift.Thrift.Type.STRUCT, 27);
            this.ringPayload.write(output);
            output.writeFieldEnd();
        }
        if (this.prOfferAckPayload != null) {
            output.writeFieldBegin("prOfferAckPayload", thrift.Thrift.Type.STRUCT, 28);
            this.prOfferAckPayload.write(output);
            output.writeFieldEnd();
        }
        if (this.clientReportedEventPayload != null) {
            output.writeFieldBegin("clientReportedEventPayload", thrift.Thrift.Type.STRUCT, 29);
            this.clientReportedEventPayload.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): WebrtcMessagePayload {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: OfferPayload.OfferPayload = OfferPayload.OfferPayload.read(input);
                        _args.offerPayload = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: OfferAckPayload.OfferAckPayload = OfferAckPayload.OfferAckPayload.read(input);
                        _args.offerAckPayload = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: AnswerPayload.AnswerPayload = AnswerPayload.AnswerPayload.read(input);
                        _args.answerPayload = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_5: AnswerAckPayload.AnswerAckPayload = AnswerAckPayload.AnswerAckPayload.read(input);
                        _args.answerAckPayload = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_6: Array<IceCandidatePayload.IceCandidatePayload> = new Array<IceCandidatePayload.IceCandidatePayload>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_7: IceCandidatePayload.IceCandidatePayload = IceCandidatePayload.IceCandidatePayload.read(input);
                            value_6.push(value_7);
                        }
                        input.readListEnd();
                        _args.iceCandidatePayloads = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_8: OkPayload.OkPayload = OkPayload.OkPayload.read(input);
                        _args.okPayload = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_9: HangUpPayload.HangUpPayload = HangUpPayload.HangUpPayload.read(input);
                        _args.hangUpPayload = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_10: OtherDismissPayload.OtherDismissPayload = OtherDismissPayload.OtherDismissPayload.read(input);
                        _args.otherDismissPayload = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_11: PranswerPayload.PranswerPayload = PranswerPayload.PranswerPayload.read(input);
                        _args.pranswerPayload = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_12: NotifyMediaStatePayload.NotifyMediaStatePayload = NotifyMediaStatePayload.NotifyMediaStatePayload.read(input);
                        _args.notifyMediaStatePayload = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_13: AckPayload.AckPayload = AckPayload.AckPayload.read(input);
                        _args.ackPayload = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_14: OfferNackPayload.OfferNackPayload = OfferNackPayload.OfferNackPayload.read(input);
                        _args.offerNackPayload = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_15: NackPayload.NackPayload = NackPayload.NackPayload.read(input);
                        _args.nackPayload = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_16: VideoRequestPayload.VideoRequestPayload = VideoRequestPayload.VideoRequestPayload.read(input);
                        _args.videoRequestPayload = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_17: SdpUpdatePayload.SdpUpdatePayload = SdpUpdatePayload.SdpUpdatePayload.read(input);
                        _args.sdpUpdatePayload = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 24:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_18: SwitchToMultiwayPayload.SwitchToMultiwayPayload = SwitchToMultiwayPayload.SwitchToMultiwayPayload.read(input);
                        _args.switchToMultiwayPayload = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 26:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_19: SdpNegotiatePayload.SdpNegotiatePayload = SdpNegotiatePayload.SdpNegotiatePayload.read(input);
                        _args.sdpNegotiatePayload = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 27:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_20: RingPayload.RingPayload = RingPayload.RingPayload.read(input);
                        _args.ringPayload = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 28:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_21: PrOfferAckPayload.PrOfferAckPayload = PrOfferAckPayload.PrOfferAckPayload.read(input);
                        _args.prOfferAckPayload = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 29:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_22: ClientReportedEventPayload.ClientReportedEventPayload = ClientReportedEventPayload.ClientReportedEventPayload.read(input);
                        _args.clientReportedEventPayload = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new WebrtcMessagePayload(_args);
    }
}

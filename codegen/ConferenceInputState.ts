/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as AutoplayInput from "./AutoplayInput";
import * as AutoplayOutput from "./AutoplayOutput";
export interface IConferenceInputStateArgs {
    autoplay?: AutoplayInput.AutoplayInput;
    participantOutputs?: Map<string, AutoplayOutput.AutoplayOutput>;
}
export class ConferenceInputState {
    public autoplay?: AutoplayInput.AutoplayInput;
    public participantOutputs?: Map<string, AutoplayOutput.AutoplayOutput>;
    constructor(args?: IConferenceInputStateArgs) {
        if (args != null && args.autoplay != null) {
            this.autoplay = args.autoplay;
        }
        if (args != null && args.participantOutputs != null) {
            this.participantOutputs = args.participantOutputs;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ConferenceInputState");
        if (this.autoplay != null) {
            output.writeFieldBegin("autoplay", thrift.Thrift.Type.STRUCT, 1);
            this.autoplay.write(output);
            output.writeFieldEnd();
        }
        if (this.participantOutputs != null) {
            output.writeFieldBegin("participantOutputs", thrift.Thrift.Type.MAP, 2);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRUCT, this.participantOutputs.size);
            this.participantOutputs.forEach((value_1: AutoplayOutput.AutoplayOutput, key_1: string): void => {
                output.writeString(key_1);
                value_1.write(output);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ConferenceInputState {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: AutoplayInput.AutoplayInput = AutoplayInput.AutoplayInput.read(input);
                        _args.autoplay = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_3: Map<string, AutoplayOutput.AutoplayOutput> = new Map<string, AutoplayOutput.AutoplayOutput>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_2: string = input.readString();
                            const value_4: AutoplayOutput.AutoplayOutput = AutoplayOutput.AutoplayOutput.read(input);
                            value_3.set(key_2, value_4);
                        }
                        input.readMapEnd();
                        _args.participantOutputs = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ConferenceInputState(_args);
    }
}

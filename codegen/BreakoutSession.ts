/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as BreakoutRoom from "./BreakoutRoom";
import * as MainRoom from "./MainRoom";
export interface IBreakoutSessionArgs {
    status?: number;
    startTime?: number;
    endTime?: number;
    childRooms?: Array<BreakoutRoom.BreakoutRoom>;
    mainRoom?: MainRoom.MainRoom;
    id?: string;
    creatorID?: string;
}
export class BreakoutSession {
    public status?: number;
    public startTime?: number;
    public endTime?: number;
    public childRooms?: Array<BreakoutRoom.BreakoutRoom>;
    public mainRoom?: MainRoom.MainRoom;
    public id?: string;
    public creatorID?: string;
    constructor(args?: IBreakoutSessionArgs) {
        if (args != null && args.status != null) {
            this.status = args.status;
        }
        if (args != null && args.startTime != null) {
            this.startTime = args.startTime;
        }
        if (args != null && args.endTime != null) {
            this.endTime = args.endTime;
        }
        if (args != null && args.childRooms != null) {
            this.childRooms = args.childRooms;
        }
        if (args != null && args.mainRoom != null) {
            this.mainRoom = args.mainRoom;
        }
        if (args != null && args.id != null) {
            this.id = args.id;
        }
        if (args != null && args.creatorID != null) {
            this.creatorID = args.creatorID;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("BreakoutSession");
        if (this.status != null) {
            output.writeFieldBegin("status", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.status);
            output.writeFieldEnd();
        }
        if (this.startTime != null) {
            output.writeFieldBegin("startTime", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.startTime);
            output.writeFieldEnd();
        }
        if (this.endTime != null) {
            output.writeFieldBegin("endTime", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.endTime);
            output.writeFieldEnd();
        }
        if (this.childRooms != null) {
            output.writeFieldBegin("childRooms", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.childRooms.length);
            this.childRooms.forEach((value_1: BreakoutRoom.BreakoutRoom): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.mainRoom != null) {
            output.writeFieldBegin("mainRoom", thrift.Thrift.Type.STRUCT, 5);
            this.mainRoom.write(output);
            output.writeFieldEnd();
        }
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.id);
            output.writeFieldEnd();
        }
        if (this.creatorID != null) {
            output.writeFieldBegin("creatorID", thrift.Thrift.Type.STRING, 7);
            output.writeString(this.creatorID);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): BreakoutSession {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: number = input.readI32();
                        _args.status = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: number = input.readI32();
                        _args.startTime = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_4: number = input.readI32();
                        _args.endTime = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_5: Array<BreakoutRoom.BreakoutRoom> = new Array<BreakoutRoom.BreakoutRoom>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_6: BreakoutRoom.BreakoutRoom = BreakoutRoom.BreakoutRoom.read(input);
                            value_5.push(value_6);
                        }
                        input.readListEnd();
                        _args.childRooms = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_7: MainRoom.MainRoom = MainRoom.MainRoom.read(input);
                        _args.mainRoom = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.id = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.creatorID = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new BreakoutSession(_args);
    }
}

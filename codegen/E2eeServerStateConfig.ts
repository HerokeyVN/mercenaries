/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IE2eeServerStateConfigArgs {
    keyNegotiationMode?: number;
    removeFrameDecryptorDelayMs?: number;
    keepFrameDecryptors?: boolean;
    senderKeyUpdateDelayMs?: number;
    keyTtlMs?: number;
    ratchetSpace?: number;
    keyOverMediaDataChannelNumSends?: number;
    keyOverMediaDataChannelRetryDelayMs?: number;
    enableH264V2?: boolean;
    requiredCapabilities?: Array<number>;
    disableE2eeAckThroughSignalingChannel?: boolean;
    signalingKeyMessageProtocol?: number;
}
export class E2eeServerStateConfig {
    public keyNegotiationMode?: number;
    public removeFrameDecryptorDelayMs?: number;
    public keepFrameDecryptors?: boolean;
    public senderKeyUpdateDelayMs?: number;
    public keyTtlMs?: number;
    public ratchetSpace?: number;
    public keyOverMediaDataChannelNumSends?: number;
    public keyOverMediaDataChannelRetryDelayMs?: number;
    public enableH264V2?: boolean;
    public requiredCapabilities?: Array<number>;
    public disableE2eeAckThroughSignalingChannel?: boolean;
    public signalingKeyMessageProtocol?: number;
    constructor(args?: IE2eeServerStateConfigArgs) {
        if (args != null && args.keyNegotiationMode != null) {
            this.keyNegotiationMode = args.keyNegotiationMode;
        }
        if (args != null && args.removeFrameDecryptorDelayMs != null) {
            this.removeFrameDecryptorDelayMs = args.removeFrameDecryptorDelayMs;
        }
        if (args != null && args.keepFrameDecryptors != null) {
            this.keepFrameDecryptors = args.keepFrameDecryptors;
        }
        if (args != null && args.senderKeyUpdateDelayMs != null) {
            this.senderKeyUpdateDelayMs = args.senderKeyUpdateDelayMs;
        }
        if (args != null && args.keyTtlMs != null) {
            this.keyTtlMs = args.keyTtlMs;
        }
        if (args != null && args.ratchetSpace != null) {
            this.ratchetSpace = args.ratchetSpace;
        }
        if (args != null && args.keyOverMediaDataChannelNumSends != null) {
            this.keyOverMediaDataChannelNumSends = args.keyOverMediaDataChannelNumSends;
        }
        if (args != null && args.keyOverMediaDataChannelRetryDelayMs != null) {
            this.keyOverMediaDataChannelRetryDelayMs = args.keyOverMediaDataChannelRetryDelayMs;
        }
        if (args != null && args.enableH264V2 != null) {
            this.enableH264V2 = args.enableH264V2;
        }
        if (args != null && args.requiredCapabilities != null) {
            this.requiredCapabilities = args.requiredCapabilities;
        }
        if (args != null && args.disableE2eeAckThroughSignalingChannel != null) {
            this.disableE2eeAckThroughSignalingChannel = args.disableE2eeAckThroughSignalingChannel;
        }
        if (args != null && args.signalingKeyMessageProtocol != null) {
            this.signalingKeyMessageProtocol = args.signalingKeyMessageProtocol;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("E2eeServerStateConfig");
        if (this.keyNegotiationMode != null) {
            output.writeFieldBegin("keyNegotiationMode", thrift.Thrift.Type.I16, 1);
            output.writeI16(this.keyNegotiationMode);
            output.writeFieldEnd();
        }
        if (this.removeFrameDecryptorDelayMs != null) {
            output.writeFieldBegin("removeFrameDecryptorDelayMs", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.removeFrameDecryptorDelayMs);
            output.writeFieldEnd();
        }
        if (this.keepFrameDecryptors != null) {
            output.writeFieldBegin("keepFrameDecryptors", thrift.Thrift.Type.BOOL, 5);
            output.writeBool(this.keepFrameDecryptors);
            output.writeFieldEnd();
        }
        if (this.senderKeyUpdateDelayMs != null) {
            output.writeFieldBegin("senderKeyUpdateDelayMs", thrift.Thrift.Type.I32, 6);
            output.writeI32(this.senderKeyUpdateDelayMs);
            output.writeFieldEnd();
        }
        if (this.keyTtlMs != null) {
            output.writeFieldBegin("keyTtlMs", thrift.Thrift.Type.I32, 7);
            output.writeI32(this.keyTtlMs);
            output.writeFieldEnd();
        }
        if (this.ratchetSpace != null) {
            output.writeFieldBegin("ratchetSpace", thrift.Thrift.Type.I16, 8);
            output.writeI16(this.ratchetSpace);
            output.writeFieldEnd();
        }
        if (this.keyOverMediaDataChannelNumSends != null) {
            output.writeFieldBegin("keyOverMediaDataChannelNumSends", thrift.Thrift.Type.I32, 9);
            output.writeI32(this.keyOverMediaDataChannelNumSends);
            output.writeFieldEnd();
        }
        if (this.keyOverMediaDataChannelRetryDelayMs != null) {
            output.writeFieldBegin("keyOverMediaDataChannelRetryDelayMs", thrift.Thrift.Type.I32, 10);
            output.writeI32(this.keyOverMediaDataChannelRetryDelayMs);
            output.writeFieldEnd();
        }
        if (this.enableH264V2 != null) {
            output.writeFieldBegin("enableH264V2", thrift.Thrift.Type.BOOL, 11);
            output.writeBool(this.enableH264V2);
            output.writeFieldEnd();
        }
        if (this.requiredCapabilities != null) {
            output.writeFieldBegin("requiredCapabilities", thrift.Thrift.Type.LIST, 12);
            output.writeListBegin(thrift.Thrift.Type.I32, this.requiredCapabilities.length);
            this.requiredCapabilities.forEach((value_1: number): void => {
                output.writeI32(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.disableE2eeAckThroughSignalingChannel != null) {
            output.writeFieldBegin("disableE2eeAckThroughSignalingChannel", thrift.Thrift.Type.BOOL, 13);
            output.writeBool(this.disableE2eeAckThroughSignalingChannel);
            output.writeFieldEnd();
        }
        if (this.signalingKeyMessageProtocol != null) {
            output.writeFieldBegin("signalingKeyMessageProtocol", thrift.Thrift.Type.I32, 14);
            output.writeI32(this.signalingKeyMessageProtocol);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): E2eeServerStateConfig {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I16) {
                        const value_2: number = input.readI16();
                        _args.keyNegotiationMode = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: number = input.readI32();
                        _args.removeFrameDecryptorDelayMs = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_4: boolean = input.readBool();
                        _args.keepFrameDecryptors = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: number = input.readI32();
                        _args.senderKeyUpdateDelayMs = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_6: number = input.readI32();
                        _args.keyTtlMs = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I16) {
                        const value_7: number = input.readI16();
                        _args.ratchetSpace = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_8: number = input.readI32();
                        _args.keyOverMediaDataChannelNumSends = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_9: number = input.readI32();
                        _args.keyOverMediaDataChannelRetryDelayMs = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_10: boolean = input.readBool();
                        _args.enableH264V2 = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_11: Array<number> = new Array<number>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_12: number = input.readI32();
                            value_11.push(value_12);
                        }
                        input.readListEnd();
                        _args.requiredCapabilities = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_13: boolean = input.readBool();
                        _args.disableE2eeAckThroughSignalingChannel = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_14: number = input.readI32();
                        _args.signalingKeyMessageProtocol = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new E2eeServerStateConfig(_args);
    }
}

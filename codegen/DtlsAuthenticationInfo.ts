/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as IdentityKeyPublicInfo from "./IdentityKeyPublicInfo";
export interface IDtlsAuthenticationInfoArgs {
    protocolVersion?: number;
    identityKeyPublicInfo?: IdentityKeyPublicInfo.IdentityKeyPublicInfo;
    signature?: Buffer;
}
export class DtlsAuthenticationInfo {
    public protocolVersion?: number;
    public identityKeyPublicInfo?: IdentityKeyPublicInfo.IdentityKeyPublicInfo;
    public signature?: Buffer;
    constructor(args?: IDtlsAuthenticationInfoArgs) {
        if (args != null && args.protocolVersion != null) {
            this.protocolVersion = args.protocolVersion;
        }
        if (args != null && args.identityKeyPublicInfo != null) {
            this.identityKeyPublicInfo = args.identityKeyPublicInfo;
        }
        if (args != null && args.signature != null) {
            this.signature = args.signature;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DtlsAuthenticationInfo");
        if (this.protocolVersion != null) {
            output.writeFieldBegin("protocolVersion", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.protocolVersion);
            output.writeFieldEnd();
        }
        if (this.identityKeyPublicInfo != null) {
            output.writeFieldBegin("identityKeyPublicInfo", thrift.Thrift.Type.STRUCT, 2);
            this.identityKeyPublicInfo.write(output);
            output.writeFieldEnd();
        }
        if (this.signature != null) {
            output.writeFieldBegin("signature", thrift.Thrift.Type.STRING, 3);
            output.writeBinary(this.signature);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DtlsAuthenticationInfo {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_1: number = input.readI32();
                        _args.protocolVersion = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: IdentityKeyPublicInfo.IdentityKeyPublicInfo = IdentityKeyPublicInfo.IdentityKeyPublicInfo.read(input);
                        _args.identityKeyPublicInfo = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: Buffer = input.readBinary();
                        _args.signature = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DtlsAuthenticationInfo(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IRtcExceptionArgs {
    message?: string;
    responseStatusCode?: number;
    responseSubCode?: number;
    apiStatusCode?: number;
    rtcLogSeverity?: number;
}
export class RtcException {
    public message?: string;
    public responseStatusCode?: number;
    public responseSubCode?: number;
    public apiStatusCode?: number;
    public rtcLogSeverity?: number;
    constructor(args?: IRtcExceptionArgs) {
        if (args != null && args.message != null) {
            this.message = args.message;
        }
        if (args != null && args.responseStatusCode != null) {
            this.responseStatusCode = args.responseStatusCode;
        }
        if (args != null && args.responseSubCode != null) {
            this.responseSubCode = args.responseSubCode;
        }
        if (args != null && args.apiStatusCode != null) {
            this.apiStatusCode = args.apiStatusCode;
        }
        if (args != null && args.rtcLogSeverity != null) {
            this.rtcLogSeverity = args.rtcLogSeverity;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RtcException");
        if (this.message != null) {
            output.writeFieldBegin("message", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.message);
            output.writeFieldEnd();
        }
        if (this.responseStatusCode != null) {
            output.writeFieldBegin("responseStatusCode", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.responseStatusCode);
            output.writeFieldEnd();
        }
        if (this.responseSubCode != null) {
            output.writeFieldBegin("responseSubCode", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.responseSubCode);
            output.writeFieldEnd();
        }
        if (this.apiStatusCode != null) {
            output.writeFieldBegin("apiStatusCode", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.apiStatusCode);
            output.writeFieldEnd();
        }
        if (this.rtcLogSeverity != null) {
            output.writeFieldBegin("rtcLogSeverity", thrift.Thrift.Type.I32, 5);
            output.writeI32(this.rtcLogSeverity);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RtcException {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.message = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: number = input.readI32();
                        _args.responseStatusCode = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: number = input.readI32();
                        _args.responseSubCode = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_4: number = input.readI32();
                        _args.apiStatusCode = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: number = input.readI32();
                        _args.rtcLogSeverity = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RtcException(_args);
    }
}

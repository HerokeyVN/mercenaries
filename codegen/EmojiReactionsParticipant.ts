/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
import * as Emoji from "./Emoji";
import * as Reaction from "./Reaction";
export interface IEmojiReactionsParticipantArgs {
    participant_id?: string;
    emoji?: Emoji.Emoji;
    emoji_expiry_time?: number | Int64;
    reactions?: Array<Reaction.Reaction>;
}
export class EmojiReactionsParticipant {
    public participant_id?: string;
    public emoji?: Emoji.Emoji;
    public emoji_expiry_time?: Int64;
    public reactions?: Array<Reaction.Reaction>;
    constructor(args?: IEmojiReactionsParticipantArgs) {
        if (args != null && args.participant_id != null) {
            this.participant_id = args.participant_id;
        }
        if (args != null && args.emoji != null) {
            this.emoji = args.emoji;
        }
        if (args != null && args.emoji_expiry_time != null) {
            if (typeof args.emoji_expiry_time === "number") {
                this.emoji_expiry_time = new Int64(args.emoji_expiry_time);
            }
            else {
                this.emoji_expiry_time = args.emoji_expiry_time;
            }
        }
        if (args != null && args.reactions != null) {
            this.reactions = args.reactions;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("EmojiReactionsParticipant");
        if (this.participant_id != null) {
            output.writeFieldBegin("participant_id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.participant_id);
            output.writeFieldEnd();
        }
        if (this.emoji != null) {
            output.writeFieldBegin("emoji", thrift.Thrift.Type.STRUCT, 2);
            this.emoji.write(output);
            output.writeFieldEnd();
        }
        if (this.emoji_expiry_time != null) {
            output.writeFieldBegin("emoji_expiry_time", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.emoji_expiry_time);
            output.writeFieldEnd();
        }
        if (this.reactions != null) {
            output.writeFieldBegin("reactions", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.reactions.length);
            this.reactions.forEach((value_1: Reaction.Reaction): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): EmojiReactionsParticipant {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.participant_id = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: Emoji.Emoji = Emoji.Emoji.read(input);
                        _args.emoji = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.emoji_expiry_time = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_5: Array<Reaction.Reaction> = new Array<Reaction.Reaction>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_6: Reaction.Reaction = Reaction.Reaction.read(input);
                            value_5.push(value_6);
                        }
                        input.readListEnd();
                        _args.reactions = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new EmojiReactionsParticipant(_args);
    }
}

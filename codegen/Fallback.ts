/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as Video from "./Video";
export interface IFallbackArgs {
    content_id?: string;
    cover_image_url?: string;
    message?: string;
    video?: Video.Video;
    attribution_image_url?: string;
    attribution?: string;
    aspect_ratio?: number;
}
export class Fallback {
    public content_id?: string;
    public cover_image_url?: string;
    public message?: string;
    public video?: Video.Video;
    public attribution_image_url?: string;
    public attribution?: string;
    public aspect_ratio?: number;
    constructor(args?: IFallbackArgs) {
        if (args != null && args.content_id != null) {
            this.content_id = args.content_id;
        }
        if (args != null && args.cover_image_url != null) {
            this.cover_image_url = args.cover_image_url;
        }
        if (args != null && args.message != null) {
            this.message = args.message;
        }
        if (args != null && args.video != null) {
            this.video = args.video;
        }
        if (args != null && args.attribution_image_url != null) {
            this.attribution_image_url = args.attribution_image_url;
        }
        if (args != null && args.attribution != null) {
            this.attribution = args.attribution;
        }
        if (args != null && args.aspect_ratio != null) {
            this.aspect_ratio = args.aspect_ratio;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Fallback");
        if (this.content_id != null) {
            output.writeFieldBegin("content_id", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.content_id);
            output.writeFieldEnd();
        }
        if (this.cover_image_url != null) {
            output.writeFieldBegin("cover_image_url", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.cover_image_url);
            output.writeFieldEnd();
        }
        if (this.message != null) {
            output.writeFieldBegin("message", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.message);
            output.writeFieldEnd();
        }
        if (this.video != null) {
            output.writeFieldBegin("video", thrift.Thrift.Type.STRUCT, 4);
            this.video.write(output);
            output.writeFieldEnd();
        }
        if (this.attribution_image_url != null) {
            output.writeFieldBegin("attribution_image_url", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.attribution_image_url);
            output.writeFieldEnd();
        }
        if (this.attribution != null) {
            output.writeFieldBegin("attribution", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.attribution);
            output.writeFieldEnd();
        }
        if (this.aspect_ratio != null) {
            output.writeFieldBegin("aspect_ratio", thrift.Thrift.Type.DOUBLE, 7);
            output.writeDouble(this.aspect_ratio);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Fallback {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.content_id = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.cover_image_url = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.message = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: Video.Video = Video.Video.read(input);
                        _args.video = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.attribution_image_url = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.attribution = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.DOUBLE) {
                        const value_7: number = input.readDouble();
                        _args.aspect_ratio = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new Fallback(_args);
    }
}

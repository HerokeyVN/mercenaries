/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
import * as MediaSyncInputState from "./MediaSyncInputState";
import * as HistoryRecord from "./HistoryRecord";
export interface IMediaSyncConferenceOutputStateArgs {
    latest_input?: MediaSyncInputState.MediaSyncInputState;
    latest_actor_id?: string;
    latest_new_content_start_time_ms?: number | Int64;
    history?: Array<HistoryRecord.HistoryRecord>;
}
export class MediaSyncConferenceOutputState {
    public latest_input?: MediaSyncInputState.MediaSyncInputState;
    public latest_actor_id?: string;
    public latest_new_content_start_time_ms?: Int64;
    public history?: Array<HistoryRecord.HistoryRecord>;
    constructor(args?: IMediaSyncConferenceOutputStateArgs) {
        if (args != null && args.latest_input != null) {
            this.latest_input = args.latest_input;
        }
        if (args != null && args.latest_actor_id != null) {
            this.latest_actor_id = args.latest_actor_id;
        }
        if (args != null && args.latest_new_content_start_time_ms != null) {
            if (typeof args.latest_new_content_start_time_ms === "number") {
                this.latest_new_content_start_time_ms = new Int64(args.latest_new_content_start_time_ms);
            }
            else {
                this.latest_new_content_start_time_ms = args.latest_new_content_start_time_ms;
            }
        }
        if (args != null && args.history != null) {
            this.history = args.history;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("MediaSyncConferenceOutputState");
        if (this.latest_input != null) {
            output.writeFieldBegin("latest_input", thrift.Thrift.Type.STRUCT, 1);
            this.latest_input.write(output);
            output.writeFieldEnd();
        }
        if (this.latest_actor_id != null) {
            output.writeFieldBegin("latest_actor_id", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.latest_actor_id);
            output.writeFieldEnd();
        }
        if (this.latest_new_content_start_time_ms != null) {
            output.writeFieldBegin("latest_new_content_start_time_ms", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.latest_new_content_start_time_ms);
            output.writeFieldEnd();
        }
        if (this.history != null) {
            output.writeFieldBegin("history", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.history.length);
            this.history.forEach((value_1: HistoryRecord.HistoryRecord): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): MediaSyncConferenceOutputState {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: MediaSyncInputState.MediaSyncInputState = MediaSyncInputState.MediaSyncInputState.read(input);
                        _args.latest_input = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.latest_actor_id = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.latest_new_content_start_time_ms = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_5: Array<HistoryRecord.HistoryRecord> = new Array<HistoryRecord.HistoryRecord>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_6: HistoryRecord.HistoryRecord = HistoryRecord.HistoryRecord.read(input);
                            value_5.push(value_6);
                        }
                        input.readListEnd();
                        _args.history = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new MediaSyncConferenceOutputState(_args);
    }
}

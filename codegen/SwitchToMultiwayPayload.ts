/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface ISwitchToMultiwayPayloadArgs {
    conferenceName?: string;
    serverInfoData?: string;
    usersInvited?: Set<string>;
}
export class SwitchToMultiwayPayload {
    public conferenceName?: string;
    public serverInfoData?: string;
    public usersInvited?: Set<string>;
    constructor(args?: ISwitchToMultiwayPayloadArgs) {
        if (args != null && args.conferenceName != null) {
            this.conferenceName = args.conferenceName;
        }
        if (args != null && args.serverInfoData != null) {
            this.serverInfoData = args.serverInfoData;
        }
        if (args != null && args.usersInvited != null) {
            this.usersInvited = args.usersInvited;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("SwitchToMultiwayPayload");
        if (this.conferenceName != null) {
            output.writeFieldBegin("conferenceName", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.conferenceName);
            output.writeFieldEnd();
        }
        if (this.serverInfoData != null) {
            output.writeFieldBegin("serverInfoData", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.serverInfoData);
            output.writeFieldEnd();
        }
        if (this.usersInvited != null) {
            output.writeFieldBegin("usersInvited", thrift.Thrift.Type.SET, 3);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.usersInvited.size);
            this.usersInvited.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): SwitchToMultiwayPayload {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.conferenceName = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.serverInfoData = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_4: Set<string> = new Set<string>();
                        const metadata_1: thrift.TSet = input.readSetBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_5: string = input.readString();
                            value_4.add(value_5);
                        }
                        input.readSetEnd();
                        _args.usersInvited = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new SwitchToMultiwayPayload(_args);
    }
}

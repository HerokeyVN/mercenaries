/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IDeviceStatsArgs {
    cpuPercentage?: number;
    batteryLeftPercentage?: number;
    thermalStatusCode?: number;
    connectionType?: number;
}
export class DeviceStats {
    public cpuPercentage?: number;
    public batteryLeftPercentage?: number;
    public thermalStatusCode?: number;
    public connectionType?: number;
    constructor(args?: IDeviceStatsArgs) {
        if (args != null && args.cpuPercentage != null) {
            this.cpuPercentage = args.cpuPercentage;
        }
        if (args != null && args.batteryLeftPercentage != null) {
            this.batteryLeftPercentage = args.batteryLeftPercentage;
        }
        if (args != null && args.thermalStatusCode != null) {
            this.thermalStatusCode = args.thermalStatusCode;
        }
        if (args != null && args.connectionType != null) {
            this.connectionType = args.connectionType;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("DeviceStats");
        if (this.cpuPercentage != null) {
            output.writeFieldBegin("cpuPercentage", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.cpuPercentage);
            output.writeFieldEnd();
        }
        if (this.batteryLeftPercentage != null) {
            output.writeFieldBegin("batteryLeftPercentage", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.batteryLeftPercentage);
            output.writeFieldEnd();
        }
        if (this.thermalStatusCode != null) {
            output.writeFieldBegin("thermalStatusCode", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.thermalStatusCode);
            output.writeFieldEnd();
        }
        if (this.connectionType != null) {
            output.writeFieldBegin("connectionType", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.connectionType);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): DeviceStats {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_1: number = input.readI32();
                        _args.cpuPercentage = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: number = input.readI32();
                        _args.batteryLeftPercentage = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: number = input.readI32();
                        _args.thermalStatusCode = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_4: number = input.readI32();
                        _args.connectionType = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new DeviceStats(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as LayoutInfo from "./LayoutInfo";
import * as ScreenShareInfo from "./ScreenShareInfo";
import * as DominantSpeakerInfo from "./DominantSpeakerInfo";
export interface ILiveStreamExtensionOutputStateArgs {
    layoutInfo?: LayoutInfo.LayoutInfo;
    screenShareInfo?: ScreenShareInfo.ScreenShareInfo;
    dominantSpeakerInfo?: DominantSpeakerInfo.DominantSpeakerInfo;
}
export class LiveStreamExtensionOutputState {
    public layoutInfo?: LayoutInfo.LayoutInfo;
    public screenShareInfo?: ScreenShareInfo.ScreenShareInfo;
    public dominantSpeakerInfo?: DominantSpeakerInfo.DominantSpeakerInfo;
    constructor(args?: ILiveStreamExtensionOutputStateArgs) {
        if (args != null && args.layoutInfo != null) {
            this.layoutInfo = args.layoutInfo;
        }
        if (args != null && args.screenShareInfo != null) {
            this.screenShareInfo = args.screenShareInfo;
        }
        if (args != null && args.dominantSpeakerInfo != null) {
            this.dominantSpeakerInfo = args.dominantSpeakerInfo;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("LiveStreamExtensionOutputState");
        if (this.layoutInfo != null) {
            output.writeFieldBegin("layoutInfo", thrift.Thrift.Type.STRUCT, 1);
            this.layoutInfo.write(output);
            output.writeFieldEnd();
        }
        if (this.screenShareInfo != null) {
            output.writeFieldBegin("screenShareInfo", thrift.Thrift.Type.STRUCT, 2);
            this.screenShareInfo.write(output);
            output.writeFieldEnd();
        }
        if (this.dominantSpeakerInfo != null) {
            output.writeFieldBegin("dominantSpeakerInfo", thrift.Thrift.Type.STRUCT, 3);
            this.dominantSpeakerInfo.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): LiveStreamExtensionOutputState {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_1: LayoutInfo.LayoutInfo = LayoutInfo.LayoutInfo.read(input);
                        _args.layoutInfo = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: ScreenShareInfo.ScreenShareInfo = ScreenShareInfo.ScreenShareInfo.read(input);
                        _args.screenShareInfo = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: DominantSpeakerInfo.DominantSpeakerInfo = DominantSpeakerInfo.DominantSpeakerInfo.read(input);
                        _args.dominantSpeakerInfo = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new LiveStreamExtensionOutputState(_args);
    }
}

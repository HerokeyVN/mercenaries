/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IIceCandidateSdpArgs {
    foundation?: string;
    componentId?: number;
    transport?: number;
    priority?: number;
    address?: string;
    port?: number;
    protocolType?: number;
    relatedAddress?: string;
    relatedPort?: number;
    username?: string;
    password?: string;
    generation?: number;
    tcptype?: number;
    networkId?: number;
    networkCost?: number;
}
export class IceCandidateSdp {
    public foundation?: string;
    public componentId?: number;
    public transport?: number;
    public priority?: number;
    public address?: string;
    public port?: number;
    public protocolType?: number;
    public relatedAddress?: string;
    public relatedPort?: number;
    public username?: string;
    public password?: string;
    public generation?: number;
    public tcptype?: number;
    public networkId?: number;
    public networkCost?: number;
    constructor(args?: IIceCandidateSdpArgs) {
        if (args != null && args.foundation != null) {
            this.foundation = args.foundation;
        }
        if (args != null && args.componentId != null) {
            this.componentId = args.componentId;
        }
        if (args != null && args.transport != null) {
            this.transport = args.transport;
        }
        if (args != null && args.priority != null) {
            this.priority = args.priority;
        }
        if (args != null && args.address != null) {
            this.address = args.address;
        }
        if (args != null && args.port != null) {
            this.port = args.port;
        }
        if (args != null && args.protocolType != null) {
            this.protocolType = args.protocolType;
        }
        if (args != null && args.relatedAddress != null) {
            this.relatedAddress = args.relatedAddress;
        }
        if (args != null && args.relatedPort != null) {
            this.relatedPort = args.relatedPort;
        }
        if (args != null && args.username != null) {
            this.username = args.username;
        }
        if (args != null && args.password != null) {
            this.password = args.password;
        }
        if (args != null && args.generation != null) {
            this.generation = args.generation;
        }
        if (args != null && args.tcptype != null) {
            this.tcptype = args.tcptype;
        }
        if (args != null && args.networkId != null) {
            this.networkId = args.networkId;
        }
        if (args != null && args.networkCost != null) {
            this.networkCost = args.networkCost;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("IceCandidateSdp");
        if (this.foundation != null) {
            output.writeFieldBegin("foundation", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.foundation);
            output.writeFieldEnd();
        }
        if (this.componentId != null) {
            output.writeFieldBegin("componentId", thrift.Thrift.Type.BYTE, 2);
            output.writeByte(this.componentId);
            output.writeFieldEnd();
        }
        if (this.transport != null) {
            output.writeFieldBegin("transport", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.transport);
            output.writeFieldEnd();
        }
        if (this.priority != null) {
            output.writeFieldBegin("priority", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.priority);
            output.writeFieldEnd();
        }
        if (this.address != null) {
            output.writeFieldBegin("address", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.address);
            output.writeFieldEnd();
        }
        if (this.port != null) {
            output.writeFieldBegin("port", thrift.Thrift.Type.I32, 6);
            output.writeI32(this.port);
            output.writeFieldEnd();
        }
        if (this.protocolType != null) {
            output.writeFieldBegin("protocolType", thrift.Thrift.Type.I32, 7);
            output.writeI32(this.protocolType);
            output.writeFieldEnd();
        }
        if (this.relatedAddress != null) {
            output.writeFieldBegin("relatedAddress", thrift.Thrift.Type.STRING, 8);
            output.writeString(this.relatedAddress);
            output.writeFieldEnd();
        }
        if (this.relatedPort != null) {
            output.writeFieldBegin("relatedPort", thrift.Thrift.Type.I32, 9);
            output.writeI32(this.relatedPort);
            output.writeFieldEnd();
        }
        if (this.username != null) {
            output.writeFieldBegin("username", thrift.Thrift.Type.STRING, 10);
            output.writeString(this.username);
            output.writeFieldEnd();
        }
        if (this.password != null) {
            output.writeFieldBegin("password", thrift.Thrift.Type.STRING, 11);
            output.writeString(this.password);
            output.writeFieldEnd();
        }
        if (this.generation != null) {
            output.writeFieldBegin("generation", thrift.Thrift.Type.I32, 12);
            output.writeI32(this.generation);
            output.writeFieldEnd();
        }
        if (this.tcptype != null) {
            output.writeFieldBegin("tcptype", thrift.Thrift.Type.I32, 13);
            output.writeI32(this.tcptype);
            output.writeFieldEnd();
        }
        if (this.networkId != null) {
            output.writeFieldBegin("networkId", thrift.Thrift.Type.I16, 14);
            output.writeI16(this.networkId);
            output.writeFieldEnd();
        }
        if (this.networkCost != null) {
            output.writeFieldBegin("networkCost", thrift.Thrift.Type.I16, 15);
            output.writeI16(this.networkCost);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): IceCandidateSdp {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.foundation = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.BYTE) {
                        const value_2: number = input.readByte();
                        _args.componentId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: number = input.readI32();
                        _args.transport = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_4: number = input.readI32();
                        _args.priority = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.address = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_6: number = input.readI32();
                        _args.port = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_7: number = input.readI32();
                        _args.protocolType = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.relatedAddress = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_9: number = input.readI32();
                        _args.relatedPort = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_10: string = input.readString();
                        _args.username = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_11: string = input.readString();
                        _args.password = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_12: number = input.readI32();
                        _args.generation = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_13: number = input.readI32();
                        _args.tcptype = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.I16) {
                        const value_14: number = input.readI16();
                        _args.networkId = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.I16) {
                        const value_15: number = input.readI16();
                        _args.networkCost = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new IceCandidateSdp(_args);
    }
}

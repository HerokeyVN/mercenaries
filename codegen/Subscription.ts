/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as SubscriptionOptions from "./SubscriptionOptions";
export interface ISubscriptionArgs {
    cname?: string;
    options?: SubscriptionOptions.SubscriptionOptions;
    type?: number;
    trackId?: string;
}
export class Subscription {
    public cname?: string;
    public options?: SubscriptionOptions.SubscriptionOptions;
    public type?: number;
    public trackId?: string;
    constructor(args?: ISubscriptionArgs) {
        if (args != null && args.cname != null) {
            this.cname = args.cname;
        }
        if (args != null && args.options != null) {
            this.options = args.options;
        }
        if (args != null && args.type != null) {
            this.type = args.type;
        }
        if (args != null && args.trackId != null) {
            this.trackId = args.trackId;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Subscription");
        if (this.cname != null) {
            output.writeFieldBegin("cname", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.cname);
            output.writeFieldEnd();
        }
        if (this.options != null) {
            output.writeFieldBegin("options", thrift.Thrift.Type.STRUCT, 2);
            this.options.write(output);
            output.writeFieldEnd();
        }
        if (this.type != null) {
            output.writeFieldBegin("type", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.type);
            output.writeFieldEnd();
        }
        if (this.trackId != null) {
            output.writeFieldBegin("trackId", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.trackId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Subscription {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.cname = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: SubscriptionOptions.SubscriptionOptions = SubscriptionOptions.SubscriptionOptions.read(input);
                        _args.options = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: number = input.readI32();
                        _args.type = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.trackId = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new Subscription(_args);
    }
}

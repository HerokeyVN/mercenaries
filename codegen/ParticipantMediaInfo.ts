/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as VideoSize from "./VideoSize";
export interface IParticipantMediaInfoArgs {
    mosaic_grid_capable?: boolean;
    video_size?: VideoSize.VideoSize;
}
export class ParticipantMediaInfo {
    public mosaic_grid_capable?: boolean;
    public video_size?: VideoSize.VideoSize;
    constructor(args?: IParticipantMediaInfoArgs) {
        if (args != null && args.mosaic_grid_capable != null) {
            this.mosaic_grid_capable = args.mosaic_grid_capable;
        }
        if (args != null && args.video_size != null) {
            this.video_size = args.video_size;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ParticipantMediaInfo");
        if (this.mosaic_grid_capable != null) {
            output.writeFieldBegin("mosaic_grid_capable", thrift.Thrift.Type.BOOL, 1);
            output.writeBool(this.mosaic_grid_capable);
            output.writeFieldEnd();
        }
        if (this.video_size != null) {
            output.writeFieldBegin("video_size", thrift.Thrift.Type.STRUCT, 2);
            this.video_size.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ParticipantMediaInfo {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_1: boolean = input.readBool();
                        _args.mosaic_grid_capable = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: VideoSize.VideoSize = VideoSize.VideoSize.read(input);
                        _args.video_size = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ParticipantMediaInfo(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
export interface IDatagramArgs {
    sender?: number | Int64;
    receivers?: Set<number | Int64>;
    payload?: Buffer;
}
export class Datagram {
    public sender?: Int64;
    public receivers?: Set<Int64>;
    public payload?: Buffer;
    constructor(args?: IDatagramArgs) {
        if (args != null && args.sender != null) {
            if (typeof args.sender === "number") {
                this.sender = new Int64(args.sender);
            }
            else {
                this.sender = args.sender;
            }
        }
        if (args != null && args.receivers != null) {
            this.receivers = args.receivers;
        }
        if (args != null && args.payload != null) {
            this.payload = args.payload;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Datagram");
        if (this.sender != null) {
            output.writeFieldBegin("sender", thrift.Thrift.Type.I64, 1);
            output.writeI64(this.sender);
            output.writeFieldEnd();
        }
        if (this.receivers != null) {
            output.writeFieldBegin("receivers", thrift.Thrift.Type.SET, 2);
            output.writeSetBegin(thrift.Thrift.Type.I64, this.receivers.size);
            this.receivers.forEach((value_1: Int64): void => {
                output.writeI64(value_1);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.payload != null) {
            output.writeFieldBegin("payload", thrift.Thrift.Type.STRING, 3);
            output.writeBinary(this.payload);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Datagram {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_2: Int64 = input.readI64();
                        _args.sender = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_3: Set<Int64> = new Set<Int64>();
                        const metadata_1: thrift.TSet = input.readSetBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_4: Int64 = input.readI64();
                            value_3.add(value_4);
                        }
                        input.readSetEnd();
                        _args.receivers = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: Buffer = input.readBinary();
                        _args.payload = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new Datagram(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
import * as FloorParticipant from "./FloorParticipant";
export interface IScreenshareFloorControlOutputStateArgs {
    floorParticipants?: Array<FloorParticipant.FloorParticipant>;
    session_id?: string;
    session_start_time_ms?: number | Int64;
}
export class ScreenshareFloorControlOutputState {
    public floorParticipants?: Array<FloorParticipant.FloorParticipant>;
    public session_id?: string;
    public session_start_time_ms?: Int64;
    constructor(args?: IScreenshareFloorControlOutputStateArgs) {
        if (args != null && args.floorParticipants != null) {
            this.floorParticipants = args.floorParticipants;
        }
        if (args != null && args.session_id != null) {
            this.session_id = args.session_id;
        }
        if (args != null && args.session_start_time_ms != null) {
            if (typeof args.session_start_time_ms === "number") {
                this.session_start_time_ms = new Int64(args.session_start_time_ms);
            }
            else {
                this.session_start_time_ms = args.session_start_time_ms;
            }
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ScreenshareFloorControlOutputState");
        if (this.floorParticipants != null) {
            output.writeFieldBegin("floorParticipants", thrift.Thrift.Type.LIST, 1);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.floorParticipants.length);
            this.floorParticipants.forEach((value_1: FloorParticipant.FloorParticipant): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.session_id != null) {
            output.writeFieldBegin("session_id", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.session_id);
            output.writeFieldEnd();
        }
        if (this.session_start_time_ms != null) {
            output.writeFieldBegin("session_start_time_ms", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.session_start_time_ms);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ScreenshareFloorControlOutputState {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_2: Array<FloorParticipant.FloorParticipant> = new Array<FloorParticipant.FloorParticipant>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_3: FloorParticipant.FloorParticipant = FloorParticipant.FloorParticipant.read(input);
                            value_2.push(value_3);
                        }
                        input.readListEnd();
                        _args.floorParticipants = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.session_id = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_5: Int64 = input.readI64();
                        _args.session_start_time_ms = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ScreenshareFloorControlOutputState(_args);
    }
}

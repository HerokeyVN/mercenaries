/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IParticipantCapabilityInfoArgs {
    is_moderator?: boolean;
    action_capabilities_as_moderator?: Set<number>;
    action_capabilities_as_participant?: Set<number>;
    conference_capabilities_as_moderator?: Set<number>;
}
export class ParticipantCapabilityInfo {
    public is_moderator?: boolean;
    public action_capabilities_as_moderator?: Set<number>;
    public action_capabilities_as_participant?: Set<number>;
    public conference_capabilities_as_moderator?: Set<number>;
    constructor(args?: IParticipantCapabilityInfoArgs) {
        if (args != null && args.is_moderator != null) {
            this.is_moderator = args.is_moderator;
        }
        if (args != null && args.action_capabilities_as_moderator != null) {
            this.action_capabilities_as_moderator = args.action_capabilities_as_moderator;
        }
        if (args != null && args.action_capabilities_as_participant != null) {
            this.action_capabilities_as_participant = args.action_capabilities_as_participant;
        }
        if (args != null && args.conference_capabilities_as_moderator != null) {
            this.conference_capabilities_as_moderator = args.conference_capabilities_as_moderator;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ParticipantCapabilityInfo");
        if (this.is_moderator != null) {
            output.writeFieldBegin("is_moderator", thrift.Thrift.Type.BOOL, 1);
            output.writeBool(this.is_moderator);
            output.writeFieldEnd();
        }
        if (this.action_capabilities_as_moderator != null) {
            output.writeFieldBegin("action_capabilities_as_moderator", thrift.Thrift.Type.SET, 2);
            output.writeSetBegin(thrift.Thrift.Type.I32, this.action_capabilities_as_moderator.size);
            this.action_capabilities_as_moderator.forEach((value_1: number): void => {
                output.writeI32(value_1);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.action_capabilities_as_participant != null) {
            output.writeFieldBegin("action_capabilities_as_participant", thrift.Thrift.Type.SET, 3);
            output.writeSetBegin(thrift.Thrift.Type.I32, this.action_capabilities_as_participant.size);
            this.action_capabilities_as_participant.forEach((value_2: number): void => {
                output.writeI32(value_2);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.conference_capabilities_as_moderator != null) {
            output.writeFieldBegin("conference_capabilities_as_moderator", thrift.Thrift.Type.SET, 4);
            output.writeSetBegin(thrift.Thrift.Type.I32, this.conference_capabilities_as_moderator.size);
            this.conference_capabilities_as_moderator.forEach((value_3: number): void => {
                output.writeI32(value_3);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ParticipantCapabilityInfo {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_4: boolean = input.readBool();
                        _args.is_moderator = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_5: Set<number> = new Set<number>();
                        const metadata_1: thrift.TSet = input.readSetBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_6: number = input.readI32();
                            value_5.add(value_6);
                        }
                        input.readSetEnd();
                        _args.action_capabilities_as_moderator = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_7: Set<number> = new Set<number>();
                        const metadata_2: thrift.TSet = input.readSetBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_8: number = input.readI32();
                            value_7.add(value_8);
                        }
                        input.readSetEnd();
                        _args.action_capabilities_as_participant = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_9: Set<number> = new Set<number>();
                        const metadata_3: thrift.TSet = input.readSetBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_10: number = input.readI32();
                            value_9.add(value_10);
                        }
                        input.readSetEnd();
                        _args.conference_capabilities_as_moderator = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ParticipantCapabilityInfo(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
import * as WebrtcMessageEndpoint from "./WebrtcMessageEndpoint";
export interface IWebrtcMessageHeaderArgs {
    protocolVersion?: number;
    messageId?: number | Int64;
    callId?: number | Int64;
    sender?: number | Int64;
    receiver?: number | Int64;
    capabilities?: number | Int64;
    payloadType?: number;
    retryCount?: number;
    pranswerSupported?: boolean;
    ackMessageType?: number;
    source?: WebrtcMessageEndpoint.WebrtcMessageEndpoint;
    destination?: WebrtcMessageEndpoint.WebrtcMessageEndpoint;
    rtcHandle?: string;
    clientStack?: number;
    serverMsgTime?: number | Int64;
}
export class WebrtcMessageHeader {
    public protocolVersion?: number;
    public messageId?: Int64;
    public callId?: Int64;
    public sender?: Int64;
    public receiver?: Int64;
    public capabilities?: Int64;
    public payloadType?: number;
    public retryCount?: number;
    public pranswerSupported?: boolean;
    public ackMessageType?: number;
    public source?: WebrtcMessageEndpoint.WebrtcMessageEndpoint;
    public destination?: WebrtcMessageEndpoint.WebrtcMessageEndpoint;
    public rtcHandle?: string;
    public clientStack?: number;
    public serverMsgTime?: Int64;
    constructor(args?: IWebrtcMessageHeaderArgs) {
        if (args != null && args.protocolVersion != null) {
            this.protocolVersion = args.protocolVersion;
        }
        if (args != null && args.messageId != null) {
            if (typeof args.messageId === "number") {
                this.messageId = new Int64(args.messageId);
            }
            else {
                this.messageId = args.messageId;
            }
        }
        if (args != null && args.callId != null) {
            if (typeof args.callId === "number") {
                this.callId = new Int64(args.callId);
            }
            else {
                this.callId = args.callId;
            }
        }
        if (args != null && args.sender != null) {
            if (typeof args.sender === "number") {
                this.sender = new Int64(args.sender);
            }
            else {
                this.sender = args.sender;
            }
        }
        if (args != null && args.receiver != null) {
            if (typeof args.receiver === "number") {
                this.receiver = new Int64(args.receiver);
            }
            else {
                this.receiver = args.receiver;
            }
        }
        if (args != null && args.capabilities != null) {
            if (typeof args.capabilities === "number") {
                this.capabilities = new Int64(args.capabilities);
            }
            else {
                this.capabilities = args.capabilities;
            }
        }
        if (args != null && args.payloadType != null) {
            this.payloadType = args.payloadType;
        }
        if (args != null && args.retryCount != null) {
            this.retryCount = args.retryCount;
        }
        if (args != null && args.pranswerSupported != null) {
            this.pranswerSupported = args.pranswerSupported;
        }
        if (args != null && args.ackMessageType != null) {
            this.ackMessageType = args.ackMessageType;
        }
        if (args != null && args.source != null) {
            this.source = args.source;
        }
        if (args != null && args.destination != null) {
            this.destination = args.destination;
        }
        if (args != null && args.rtcHandle != null) {
            this.rtcHandle = args.rtcHandle;
        }
        if (args != null && args.clientStack != null) {
            this.clientStack = args.clientStack;
        }
        if (args != null && args.serverMsgTime != null) {
            if (typeof args.serverMsgTime === "number") {
                this.serverMsgTime = new Int64(args.serverMsgTime);
            }
            else {
                this.serverMsgTime = args.serverMsgTime;
            }
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("WebrtcMessageHeader");
        if (this.protocolVersion != null) {
            output.writeFieldBegin("protocolVersion", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.protocolVersion);
            output.writeFieldEnd();
        }
        if (this.messageId != null) {
            output.writeFieldBegin("messageId", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.messageId);
            output.writeFieldEnd();
        }
        if (this.callId != null) {
            output.writeFieldBegin("callId", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.callId);
            output.writeFieldEnd();
        }
        if (this.sender != null) {
            output.writeFieldBegin("sender", thrift.Thrift.Type.I64, 4);
            output.writeI64(this.sender);
            output.writeFieldEnd();
        }
        if (this.receiver != null) {
            output.writeFieldBegin("receiver", thrift.Thrift.Type.I64, 5);
            output.writeI64(this.receiver);
            output.writeFieldEnd();
        }
        if (this.capabilities != null) {
            output.writeFieldBegin("capabilities", thrift.Thrift.Type.I64, 6);
            output.writeI64(this.capabilities);
            output.writeFieldEnd();
        }
        if (this.payloadType != null) {
            output.writeFieldBegin("payloadType", thrift.Thrift.Type.I32, 7);
            output.writeI32(this.payloadType);
            output.writeFieldEnd();
        }
        if (this.retryCount != null) {
            output.writeFieldBegin("retryCount", thrift.Thrift.Type.BYTE, 8);
            output.writeByte(this.retryCount);
            output.writeFieldEnd();
        }
        if (this.pranswerSupported != null) {
            output.writeFieldBegin("pranswerSupported", thrift.Thrift.Type.BOOL, 9);
            output.writeBool(this.pranswerSupported);
            output.writeFieldEnd();
        }
        if (this.ackMessageType != null) {
            output.writeFieldBegin("ackMessageType", thrift.Thrift.Type.I32, 10);
            output.writeI32(this.ackMessageType);
            output.writeFieldEnd();
        }
        if (this.source != null) {
            output.writeFieldBegin("source", thrift.Thrift.Type.STRUCT, 11);
            this.source.write(output);
            output.writeFieldEnd();
        }
        if (this.destination != null) {
            output.writeFieldBegin("destination", thrift.Thrift.Type.STRUCT, 12);
            this.destination.write(output);
            output.writeFieldEnd();
        }
        if (this.rtcHandle != null) {
            output.writeFieldBegin("rtcHandle", thrift.Thrift.Type.STRING, 13);
            output.writeString(this.rtcHandle);
            output.writeFieldEnd();
        }
        if (this.clientStack != null) {
            output.writeFieldBegin("clientStack", thrift.Thrift.Type.I32, 14);
            output.writeI32(this.clientStack);
            output.writeFieldEnd();
        }
        if (this.serverMsgTime != null) {
            output.writeFieldBegin("serverMsgTime", thrift.Thrift.Type.I64, 15);
            output.writeI64(this.serverMsgTime);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): WebrtcMessageHeader {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_1: number = input.readI32();
                        _args.protocolVersion = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_2: Int64 = input.readI64();
                        _args.messageId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_3: Int64 = input.readI64();
                        _args.callId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.sender = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_5: Int64 = input.readI64();
                        _args.receiver = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_6: Int64 = input.readI64();
                        _args.capabilities = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_7: number = input.readI32();
                        _args.payloadType = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.BYTE) {
                        const value_8: number = input.readByte();
                        _args.retryCount = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_9: boolean = input.readBool();
                        _args.pranswerSupported = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_10: number = input.readI32();
                        _args.ackMessageType = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_11: WebrtcMessageEndpoint.WebrtcMessageEndpoint = WebrtcMessageEndpoint.WebrtcMessageEndpoint.read(input);
                        _args.source = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_12: WebrtcMessageEndpoint.WebrtcMessageEndpoint = WebrtcMessageEndpoint.WebrtcMessageEndpoint.read(input);
                        _args.destination = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_13: string = input.readString();
                        _args.rtcHandle = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_14: number = input.readI32();
                        _args.clientStack = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_15: Int64 = input.readI64();
                        _args.serverMsgTime = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new WebrtcMessageHeader(_args);
    }
}

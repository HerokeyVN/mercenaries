/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IEdgerayInfoArgs {
    edgerayType?: number;
    ipv4?: string;
    ipv6?: string;
    token?: string;
    tokenIdx?: number;
    secret?: string;
    secretIdx?: number;
}
export class EdgerayInfo {
    public edgerayType?: number;
    public ipv4?: string;
    public ipv6?: string;
    public token?: string;
    public tokenIdx?: number;
    public secret?: string;
    public secretIdx?: number;
    constructor(args?: IEdgerayInfoArgs) {
        if (args != null && args.edgerayType != null) {
            this.edgerayType = args.edgerayType;
        }
        if (args != null && args.ipv4 != null) {
            this.ipv4 = args.ipv4;
        }
        if (args != null && args.ipv6 != null) {
            this.ipv6 = args.ipv6;
        }
        if (args != null && args.token != null) {
            this.token = args.token;
        }
        if (args != null && args.tokenIdx != null) {
            this.tokenIdx = args.tokenIdx;
        }
        if (args != null && args.secret != null) {
            this.secret = args.secret;
        }
        if (args != null && args.secretIdx != null) {
            this.secretIdx = args.secretIdx;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("EdgerayInfo");
        if (this.edgerayType != null) {
            output.writeFieldBegin("edgerayType", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.edgerayType);
            output.writeFieldEnd();
        }
        if (this.ipv4 != null) {
            output.writeFieldBegin("ipv4", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.ipv4);
            output.writeFieldEnd();
        }
        if (this.ipv6 != null) {
            output.writeFieldBegin("ipv6", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.ipv6);
            output.writeFieldEnd();
        }
        if (this.token != null) {
            output.writeFieldBegin("token", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.token);
            output.writeFieldEnd();
        }
        if (this.tokenIdx != null) {
            output.writeFieldBegin("tokenIdx", thrift.Thrift.Type.I32, 5);
            output.writeI32(this.tokenIdx);
            output.writeFieldEnd();
        }
        if (this.secret != null) {
            output.writeFieldBegin("secret", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.secret);
            output.writeFieldEnd();
        }
        if (this.secretIdx != null) {
            output.writeFieldBegin("secretIdx", thrift.Thrift.Type.I32, 7);
            output.writeI32(this.secretIdx);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): EdgerayInfo {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_1: number = input.readI32();
                        _args.edgerayType = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.ipv4 = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.ipv6 = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.token = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: number = input.readI32();
                        _args.tokenIdx = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.secret = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_7: number = input.readI32();
                        _args.secretIdx = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new EdgerayInfo(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as CountdownTimer from "./CountdownTimer";
export interface ICountdownTimerConferenceOutputStateArgs {
    current_timer?: CountdownTimer.CountdownTimer;
    is_countdown_timer_feature_enabled?: boolean;
    moderator_uids_if_empty_means_everyone_is_moderator?: Set<string>;
}
export class CountdownTimerConferenceOutputState {
    public current_timer?: CountdownTimer.CountdownTimer;
    public is_countdown_timer_feature_enabled?: boolean;
    public moderator_uids_if_empty_means_everyone_is_moderator?: Set<string>;
    constructor(args?: ICountdownTimerConferenceOutputStateArgs) {
        if (args != null && args.current_timer != null) {
            this.current_timer = args.current_timer;
        }
        if (args != null && args.is_countdown_timer_feature_enabled != null) {
            this.is_countdown_timer_feature_enabled = args.is_countdown_timer_feature_enabled;
        }
        if (args != null && args.moderator_uids_if_empty_means_everyone_is_moderator != null) {
            this.moderator_uids_if_empty_means_everyone_is_moderator = args.moderator_uids_if_empty_means_everyone_is_moderator;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("CountdownTimerConferenceOutputState");
        if (this.current_timer != null) {
            output.writeFieldBegin("current_timer", thrift.Thrift.Type.STRUCT, 1);
            this.current_timer.write(output);
            output.writeFieldEnd();
        }
        if (this.is_countdown_timer_feature_enabled != null) {
            output.writeFieldBegin("is_countdown_timer_feature_enabled", thrift.Thrift.Type.BOOL, 2);
            output.writeBool(this.is_countdown_timer_feature_enabled);
            output.writeFieldEnd();
        }
        if (this.moderator_uids_if_empty_means_everyone_is_moderator != null) {
            output.writeFieldBegin("moderator_uids_if_empty_means_everyone_is_moderator", thrift.Thrift.Type.SET, 3);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.moderator_uids_if_empty_means_everyone_is_moderator.size);
            this.moderator_uids_if_empty_means_everyone_is_moderator.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): CountdownTimerConferenceOutputState {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: CountdownTimer.CountdownTimer = CountdownTimer.CountdownTimer.read(input);
                        _args.current_timer = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_3: boolean = input.readBool();
                        _args.is_countdown_timer_feature_enabled = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_4: Set<string> = new Set<string>();
                        const metadata_1: thrift.TSet = input.readSetBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_5: string = input.readString();
                            value_4.add(value_5);
                        }
                        input.readSetEnd();
                        _args.moderator_uids_if_empty_means_everyone_is_moderator = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new CountdownTimerConferenceOutputState(_args);
    }
}

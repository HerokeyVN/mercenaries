/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as RaisedHandsQueuerStateInfo from "./RaisedHandsQueuerStateInfo";
export interface IRaisedHandsQueuerArgs {
    uid?: string;
    state_info_history?: Array<RaisedHandsQueuerStateInfo.RaisedHandsQueuerStateInfo>;
}
export class RaisedHandsQueuer {
    public uid?: string;
    public state_info_history?: Array<RaisedHandsQueuerStateInfo.RaisedHandsQueuerStateInfo>;
    constructor(args?: IRaisedHandsQueuerArgs) {
        if (args != null && args.uid != null) {
            this.uid = args.uid;
        }
        if (args != null && args.state_info_history != null) {
            this.state_info_history = args.state_info_history;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RaisedHandsQueuer");
        if (this.uid != null) {
            output.writeFieldBegin("uid", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.uid);
            output.writeFieldEnd();
        }
        if (this.state_info_history != null) {
            output.writeFieldBegin("state_info_history", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.state_info_history.length);
            this.state_info_history.forEach((value_1: RaisedHandsQueuerStateInfo.RaisedHandsQueuerStateInfo): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RaisedHandsQueuer {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.uid = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_3: Array<RaisedHandsQueuerStateInfo.RaisedHandsQueuerStateInfo> = new Array<RaisedHandsQueuerStateInfo.RaisedHandsQueuerStateInfo>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_4: RaisedHandsQueuerStateInfo.RaisedHandsQueuerStateInfo = RaisedHandsQueuerStateInfo.RaisedHandsQueuerStateInfo.read(input);
                            value_3.push(value_4);
                        }
                        input.readListEnd();
                        _args.state_info_history = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RaisedHandsQueuer(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as Sdp from "./Sdp";
import * as VideoRequestPayload from "./VideoRequestPayload";
import * as NotifyMediaStatePayload from "./NotifyMediaStatePayload";
import * as GenericDataMessage from "./GenericDataMessage";
import * as StreamInfo from "./StreamInfo";
import * as TrackInfo from "./TrackInfo";
import * as P2PSfuAllocation from "./P2PSfuAllocation";
export interface IOfferPayloadArgs {
    sdpThrift?: Sdp.Sdp;
    uploadLogLevel?: number;
    offeredFbExperiments?: string;
    videoRequestPayload?: VideoRequestPayload.VideoRequestPayload;
    initialMediaState?: NotifyMediaStatePayload.NotifyMediaStatePayload;
    callType?: string;
    offerEscalationSupport?: boolean;
    escalationConferenceName?: string;
    sdpString?: string;
    userCapabilities?: string;
    callTrigger?: string;
    sdpNegotiationSupport?: boolean;
    extraParams?: Array<GenericDataMessage.GenericDataMessage>;
    streamInfos_DEPRECATED?: Map<string, StreamInfo.StreamInfo>;
    collisionContext?: string;
    trackInfos?: Map<string, TrackInfo.TrackInfo>;
    isLegacyCall?: boolean;
    sfuAllocation?: P2PSfuAllocation.P2PSfuAllocation;
}
export class OfferPayload {
    public sdpThrift?: Sdp.Sdp;
    public uploadLogLevel?: number;
    public offeredFbExperiments?: string;
    public videoRequestPayload?: VideoRequestPayload.VideoRequestPayload;
    public initialMediaState?: NotifyMediaStatePayload.NotifyMediaStatePayload;
    public callType?: string;
    public offerEscalationSupport?: boolean;
    public escalationConferenceName?: string;
    public sdpString?: string;
    public userCapabilities?: string;
    public callTrigger?: string;
    public sdpNegotiationSupport?: boolean;
    public extraParams?: Array<GenericDataMessage.GenericDataMessage>;
    public streamInfos_DEPRECATED?: Map<string, StreamInfo.StreamInfo>;
    public collisionContext?: string;
    public trackInfos?: Map<string, TrackInfo.TrackInfo>;
    public isLegacyCall?: boolean;
    public sfuAllocation?: P2PSfuAllocation.P2PSfuAllocation;
    constructor(args?: IOfferPayloadArgs) {
        if (args != null && args.sdpThrift != null) {
            this.sdpThrift = args.sdpThrift;
        }
        if (args != null && args.uploadLogLevel != null) {
            this.uploadLogLevel = args.uploadLogLevel;
        }
        if (args != null && args.offeredFbExperiments != null) {
            this.offeredFbExperiments = args.offeredFbExperiments;
        }
        if (args != null && args.videoRequestPayload != null) {
            this.videoRequestPayload = args.videoRequestPayload;
        }
        if (args != null && args.initialMediaState != null) {
            this.initialMediaState = args.initialMediaState;
        }
        if (args != null && args.callType != null) {
            this.callType = args.callType;
        }
        if (args != null && args.offerEscalationSupport != null) {
            this.offerEscalationSupport = args.offerEscalationSupport;
        }
        if (args != null && args.escalationConferenceName != null) {
            this.escalationConferenceName = args.escalationConferenceName;
        }
        if (args != null && args.sdpString != null) {
            this.sdpString = args.sdpString;
        }
        if (args != null && args.userCapabilities != null) {
            this.userCapabilities = args.userCapabilities;
        }
        if (args != null && args.callTrigger != null) {
            this.callTrigger = args.callTrigger;
        }
        if (args != null && args.sdpNegotiationSupport != null) {
            this.sdpNegotiationSupport = args.sdpNegotiationSupport;
        }
        if (args != null && args.extraParams != null) {
            this.extraParams = args.extraParams;
        }
        if (args != null && args.streamInfos_DEPRECATED != null) {
            this.streamInfos_DEPRECATED = args.streamInfos_DEPRECATED;
        }
        if (args != null && args.collisionContext != null) {
            this.collisionContext = args.collisionContext;
        }
        if (args != null && args.trackInfos != null) {
            this.trackInfos = args.trackInfos;
        }
        if (args != null && args.isLegacyCall != null) {
            this.isLegacyCall = args.isLegacyCall;
        }
        if (args != null && args.sfuAllocation != null) {
            this.sfuAllocation = args.sfuAllocation;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("OfferPayload");
        if (this.sdpThrift != null) {
            output.writeFieldBegin("sdpThrift", thrift.Thrift.Type.STRUCT, 1);
            this.sdpThrift.write(output);
            output.writeFieldEnd();
        }
        if (this.uploadLogLevel != null) {
            output.writeFieldBegin("uploadLogLevel", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.uploadLogLevel);
            output.writeFieldEnd();
        }
        if (this.offeredFbExperiments != null) {
            output.writeFieldBegin("offeredFbExperiments", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.offeredFbExperiments);
            output.writeFieldEnd();
        }
        if (this.videoRequestPayload != null) {
            output.writeFieldBegin("videoRequestPayload", thrift.Thrift.Type.STRUCT, 8);
            this.videoRequestPayload.write(output);
            output.writeFieldEnd();
        }
        if (this.initialMediaState != null) {
            output.writeFieldBegin("initialMediaState", thrift.Thrift.Type.STRUCT, 10);
            this.initialMediaState.write(output);
            output.writeFieldEnd();
        }
        if (this.callType != null) {
            output.writeFieldBegin("callType", thrift.Thrift.Type.STRING, 11);
            output.writeString(this.callType);
            output.writeFieldEnd();
        }
        if (this.offerEscalationSupport != null) {
            output.writeFieldBegin("offerEscalationSupport", thrift.Thrift.Type.BOOL, 14);
            output.writeBool(this.offerEscalationSupport);
            output.writeFieldEnd();
        }
        if (this.escalationConferenceName != null) {
            output.writeFieldBegin("escalationConferenceName", thrift.Thrift.Type.STRING, 15);
            output.writeString(this.escalationConferenceName);
            output.writeFieldEnd();
        }
        if (this.sdpString != null) {
            output.writeFieldBegin("sdpString", thrift.Thrift.Type.STRING, 16);
            output.writeString(this.sdpString);
            output.writeFieldEnd();
        }
        if (this.userCapabilities != null) {
            output.writeFieldBegin("userCapabilities", thrift.Thrift.Type.STRING, 17);
            output.writeString(this.userCapabilities);
            output.writeFieldEnd();
        }
        if (this.callTrigger != null) {
            output.writeFieldBegin("callTrigger", thrift.Thrift.Type.STRING, 18);
            output.writeString(this.callTrigger);
            output.writeFieldEnd();
        }
        if (this.sdpNegotiationSupport != null) {
            output.writeFieldBegin("sdpNegotiationSupport", thrift.Thrift.Type.BOOL, 19);
            output.writeBool(this.sdpNegotiationSupport);
            output.writeFieldEnd();
        }
        if (this.extraParams != null) {
            output.writeFieldBegin("extraParams", thrift.Thrift.Type.LIST, 20);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.extraParams.length);
            this.extraParams.forEach((value_1: GenericDataMessage.GenericDataMessage): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.streamInfos_DEPRECATED != null) {
            output.writeFieldBegin("streamInfos_DEPRECATED", thrift.Thrift.Type.MAP, 21);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRUCT, this.streamInfos_DEPRECATED.size);
            this.streamInfos_DEPRECATED.forEach((value_2: StreamInfo.StreamInfo, key_1: string): void => {
                output.writeString(key_1);
                value_2.write(output);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.collisionContext != null) {
            output.writeFieldBegin("collisionContext", thrift.Thrift.Type.STRING, 22);
            output.writeString(this.collisionContext);
            output.writeFieldEnd();
        }
        if (this.trackInfos != null) {
            output.writeFieldBegin("trackInfos", thrift.Thrift.Type.MAP, 23);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRUCT, this.trackInfos.size);
            this.trackInfos.forEach((value_3: TrackInfo.TrackInfo, key_2: string): void => {
                output.writeString(key_2);
                value_3.write(output);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.isLegacyCall != null) {
            output.writeFieldBegin("isLegacyCall", thrift.Thrift.Type.BOOL, 24);
            output.writeBool(this.isLegacyCall);
            output.writeFieldEnd();
        }
        if (this.sfuAllocation != null) {
            output.writeFieldBegin("sfuAllocation", thrift.Thrift.Type.STRUCT, 25);
            this.sfuAllocation.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): OfferPayload {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: Sdp.Sdp = Sdp.Sdp.read(input);
                        _args.sdpThrift = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: number = input.readI32();
                        _args.uploadLogLevel = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.offeredFbExperiments = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_7: VideoRequestPayload.VideoRequestPayload = VideoRequestPayload.VideoRequestPayload.read(input);
                        _args.videoRequestPayload = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_8: NotifyMediaStatePayload.NotifyMediaStatePayload = NotifyMediaStatePayload.NotifyMediaStatePayload.read(input);
                        _args.initialMediaState = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.callType = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_10: boolean = input.readBool();
                        _args.offerEscalationSupport = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_11: string = input.readString();
                        _args.escalationConferenceName = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_12: string = input.readString();
                        _args.sdpString = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_13: string = input.readString();
                        _args.userCapabilities = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_14: string = input.readString();
                        _args.callTrigger = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_15: boolean = input.readBool();
                        _args.sdpNegotiationSupport = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_16: Array<GenericDataMessage.GenericDataMessage> = new Array<GenericDataMessage.GenericDataMessage>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_17: GenericDataMessage.GenericDataMessage = GenericDataMessage.GenericDataMessage.read(input);
                            value_16.push(value_17);
                        }
                        input.readListEnd();
                        _args.extraParams = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 21:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_18: Map<string, StreamInfo.StreamInfo> = new Map<string, StreamInfo.StreamInfo>();
                        const metadata_2: thrift.TMap = input.readMapBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const key_3: string = input.readString();
                            const value_19: StreamInfo.StreamInfo = StreamInfo.StreamInfo.read(input);
                            value_18.set(key_3, value_19);
                        }
                        input.readMapEnd();
                        _args.streamInfos_DEPRECATED = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 22:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_20: string = input.readString();
                        _args.collisionContext = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 23:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_21: Map<string, TrackInfo.TrackInfo> = new Map<string, TrackInfo.TrackInfo>();
                        const metadata_3: thrift.TMap = input.readMapBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const key_4: string = input.readString();
                            const value_22: TrackInfo.TrackInfo = TrackInfo.TrackInfo.read(input);
                            value_21.set(key_4, value_22);
                        }
                        input.readMapEnd();
                        _args.trackInfos = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 24:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_23: boolean = input.readBool();
                        _args.isLegacyCall = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 25:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_24: P2PSfuAllocation.P2PSfuAllocation = P2PSfuAllocation.P2PSfuAllocation.read(input);
                        _args.sfuAllocation = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new OfferPayload(_args);
    }
}

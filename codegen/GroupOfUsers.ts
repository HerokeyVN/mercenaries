/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IGroupOfUsersArgs {
    users?: Set<string>;
    allowMultipleJoins?: boolean;
    dismissOthersOnFirstJoin?: boolean;
    aliasId?: string;
}
export class GroupOfUsers {
    public users?: Set<string>;
    public allowMultipleJoins?: boolean;
    public dismissOthersOnFirstJoin?: boolean;
    public aliasId?: string;
    constructor(args?: IGroupOfUsersArgs) {
        if (args != null && args.users != null) {
            this.users = args.users;
        }
        if (args != null && args.allowMultipleJoins != null) {
            this.allowMultipleJoins = args.allowMultipleJoins;
        }
        if (args != null && args.dismissOthersOnFirstJoin != null) {
            this.dismissOthersOnFirstJoin = args.dismissOthersOnFirstJoin;
        }
        if (args != null && args.aliasId != null) {
            this.aliasId = args.aliasId;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GroupOfUsers");
        if (this.users != null) {
            output.writeFieldBegin("users", thrift.Thrift.Type.SET, 1);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.users.size);
            this.users.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.allowMultipleJoins != null) {
            output.writeFieldBegin("allowMultipleJoins", thrift.Thrift.Type.BOOL, 2);
            output.writeBool(this.allowMultipleJoins);
            output.writeFieldEnd();
        }
        if (this.dismissOthersOnFirstJoin != null) {
            output.writeFieldBegin("dismissOthersOnFirstJoin", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.dismissOthersOnFirstJoin);
            output.writeFieldEnd();
        }
        if (this.aliasId != null) {
            output.writeFieldBegin("aliasId", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.aliasId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GroupOfUsers {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_2: Set<string> = new Set<string>();
                        const metadata_1: thrift.TSet = input.readSetBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_3: string = input.readString();
                            value_2.add(value_3);
                        }
                        input.readSetEnd();
                        _args.users = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_4: boolean = input.readBool();
                        _args.allowMultipleJoins = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_5: boolean = input.readBool();
                        _args.dismissOthersOnFirstJoin = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.aliasId = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GroupOfUsers(_args);
    }
}

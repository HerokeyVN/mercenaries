/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IApprovalRequestArgs {
    approvalStatus?: number;
    targetUsers?: Set<string>;
}
export class ApprovalRequest {
    public approvalStatus?: number;
    public targetUsers?: Set<string>;
    constructor(args?: IApprovalRequestArgs) {
        if (args != null && args.approvalStatus != null) {
            this.approvalStatus = args.approvalStatus;
        }
        if (args != null && args.targetUsers != null) {
            this.targetUsers = args.targetUsers;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ApprovalRequest");
        if (this.approvalStatus != null) {
            output.writeFieldBegin("approvalStatus", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.approvalStatus);
            output.writeFieldEnd();
        }
        if (this.targetUsers != null) {
            output.writeFieldBegin("targetUsers", thrift.Thrift.Type.SET, 3);
            output.writeSetBegin(thrift.Thrift.Type.STRING, this.targetUsers.size);
            this.targetUsers.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ApprovalRequest {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: number = input.readI32();
                        _args.approvalStatus = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_3: Set<string> = new Set<string>();
                        const metadata_1: thrift.TSet = input.readSetBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_4: string = input.readString();
                            value_3.add(value_4);
                        }
                        input.readSetEnd();
                        _args.targetUsers = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ApprovalRequest(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
import * as SizedUrl from "./SizedUrl";
export interface IVideoArgs {
    dash_manifest?: string;
    duration_ms?: number | Int64;
    aspect_ratio?: number;
    url?: SizedUrl.SizedUrl;
}
export class Video {
    public dash_manifest?: string;
    public duration_ms?: Int64;
    public aspect_ratio?: number;
    public url?: SizedUrl.SizedUrl;
    constructor(args?: IVideoArgs) {
        if (args != null && args.dash_manifest != null) {
            this.dash_manifest = args.dash_manifest;
        }
        if (args != null && args.duration_ms != null) {
            if (typeof args.duration_ms === "number") {
                this.duration_ms = new Int64(args.duration_ms);
            }
            else {
                this.duration_ms = args.duration_ms;
            }
        }
        if (args != null && args.aspect_ratio != null) {
            this.aspect_ratio = args.aspect_ratio;
        }
        if (args != null && args.url != null) {
            this.url = args.url;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Video");
        if (this.dash_manifest != null) {
            output.writeFieldBegin("dash_manifest", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.dash_manifest);
            output.writeFieldEnd();
        }
        if (this.duration_ms != null) {
            output.writeFieldBegin("duration_ms", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.duration_ms);
            output.writeFieldEnd();
        }
        if (this.aspect_ratio != null) {
            output.writeFieldBegin("aspect_ratio", thrift.Thrift.Type.DOUBLE, 4);
            output.writeDouble(this.aspect_ratio);
            output.writeFieldEnd();
        }
        if (this.url != null) {
            output.writeFieldBegin("url", thrift.Thrift.Type.STRUCT, 5);
            this.url.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Video {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.dash_manifest = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_2: Int64 = input.readI64();
                        _args.duration_ms = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.DOUBLE) {
                        const value_3: number = input.readDouble();
                        _args.aspect_ratio = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: SizedUrl.SizedUrl = SizedUrl.SizedUrl.read(input);
                        _args.url = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new Video(_args);
    }
}

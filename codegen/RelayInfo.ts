/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as TurnInfo from "./TurnInfo";
import * as EdgerayInfo from "./EdgerayInfo";
export interface IRelayInfoArgs {
    turns?: Array<TurnInfo.TurnInfo>;
    edgerays?: Array<EdgerayInfo.EdgerayInfo>;
    turnUsername?: string;
    turnPassword?: string;
}
export class RelayInfo {
    public turns?: Array<TurnInfo.TurnInfo>;
    public edgerays?: Array<EdgerayInfo.EdgerayInfo>;
    public turnUsername?: string;
    public turnPassword?: string;
    constructor(args?: IRelayInfoArgs) {
        if (args != null && args.turns != null) {
            this.turns = args.turns;
        }
        if (args != null && args.edgerays != null) {
            this.edgerays = args.edgerays;
        }
        if (args != null && args.turnUsername != null) {
            this.turnUsername = args.turnUsername;
        }
        if (args != null && args.turnPassword != null) {
            this.turnPassword = args.turnPassword;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RelayInfo");
        if (this.turns != null) {
            output.writeFieldBegin("turns", thrift.Thrift.Type.LIST, 1);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.turns.length);
            this.turns.forEach((value_1: TurnInfo.TurnInfo): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.edgerays != null) {
            output.writeFieldBegin("edgerays", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.edgerays.length);
            this.edgerays.forEach((value_2: EdgerayInfo.EdgerayInfo): void => {
                value_2.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.turnUsername != null) {
            output.writeFieldBegin("turnUsername", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.turnUsername);
            output.writeFieldEnd();
        }
        if (this.turnPassword != null) {
            output.writeFieldBegin("turnPassword", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.turnPassword);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RelayInfo {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_3: Array<TurnInfo.TurnInfo> = new Array<TurnInfo.TurnInfo>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_4: TurnInfo.TurnInfo = TurnInfo.TurnInfo.read(input);
                            value_3.push(value_4);
                        }
                        input.readListEnd();
                        _args.turns = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_5: Array<EdgerayInfo.EdgerayInfo> = new Array<EdgerayInfo.EdgerayInfo>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_6: EdgerayInfo.EdgerayInfo = EdgerayInfo.EdgerayInfo.read(input);
                            value_5.push(value_6);
                        }
                        input.readListEnd();
                        _args.edgerays = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.turnUsername = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: string = input.readString();
                        _args.turnPassword = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RelayInfo(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as IceCandidateSdp from "./IceCandidateSdp";
export interface IIceCandidatePayloadArgs {
    sdpThrift?: IceCandidateSdp.IceCandidateSdp;
    sdpMediaLineIndex?: number;
    sdpMediaId?: string;
    sdpString?: string;
}
export class IceCandidatePayload {
    public sdpThrift?: IceCandidateSdp.IceCandidateSdp;
    public sdpMediaLineIndex?: number;
    public sdpMediaId?: string;
    public sdpString?: string;
    constructor(args?: IIceCandidatePayloadArgs) {
        if (args != null && args.sdpThrift != null) {
            this.sdpThrift = args.sdpThrift;
        }
        if (args != null && args.sdpMediaLineIndex != null) {
            this.sdpMediaLineIndex = args.sdpMediaLineIndex;
        }
        if (args != null && args.sdpMediaId != null) {
            this.sdpMediaId = args.sdpMediaId;
        }
        if (args != null && args.sdpString != null) {
            this.sdpString = args.sdpString;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("IceCandidatePayload");
        if (this.sdpThrift != null) {
            output.writeFieldBegin("sdpThrift", thrift.Thrift.Type.STRUCT, 1);
            this.sdpThrift.write(output);
            output.writeFieldEnd();
        }
        if (this.sdpMediaLineIndex != null) {
            output.writeFieldBegin("sdpMediaLineIndex", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.sdpMediaLineIndex);
            output.writeFieldEnd();
        }
        if (this.sdpMediaId != null) {
            output.writeFieldBegin("sdpMediaId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.sdpMediaId);
            output.writeFieldEnd();
        }
        if (this.sdpString != null) {
            output.writeFieldBegin("sdpString", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.sdpString);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): IceCandidatePayload {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_1: IceCandidateSdp.IceCandidateSdp = IceCandidateSdp.IceCandidateSdp.read(input);
                        _args.sdpThrift = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: number = input.readI32();
                        _args.sdpMediaLineIndex = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.sdpMediaId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.sdpString = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new IceCandidatePayload(_args);
    }
}

/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
import * as ClientMediaUpdate from "./ClientMediaUpdate";
import * as SessionDescription from "./SessionDescription";
export interface IClientMediaUpdateRequestArgs {
    fromVersion?: number | Int64;
    toVersion?: number | Int64;
    mediaUpdates?: Array<ClientMediaUpdate.ClientMediaUpdate>;
    offer?: SessionDescription.SessionDescription;
}
export class ClientMediaUpdateRequest {
    public fromVersion?: Int64;
    public toVersion?: Int64;
    public mediaUpdates?: Array<ClientMediaUpdate.ClientMediaUpdate>;
    public offer?: SessionDescription.SessionDescription;
    constructor(args?: IClientMediaUpdateRequestArgs) {
        if (args != null && args.fromVersion != null) {
            if (typeof args.fromVersion === "number") {
                this.fromVersion = new Int64(args.fromVersion);
            }
            else {
                this.fromVersion = args.fromVersion;
            }
        }
        if (args != null && args.toVersion != null) {
            if (typeof args.toVersion === "number") {
                this.toVersion = new Int64(args.toVersion);
            }
            else {
                this.toVersion = args.toVersion;
            }
        }
        if (args != null && args.mediaUpdates != null) {
            this.mediaUpdates = args.mediaUpdates;
        }
        if (args != null && args.offer != null) {
            this.offer = args.offer;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ClientMediaUpdateRequest");
        if (this.fromVersion != null) {
            output.writeFieldBegin("fromVersion", thrift.Thrift.Type.I64, 1);
            output.writeI64(this.fromVersion);
            output.writeFieldEnd();
        }
        if (this.toVersion != null) {
            output.writeFieldBegin("toVersion", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.toVersion);
            output.writeFieldEnd();
        }
        if (this.mediaUpdates != null) {
            output.writeFieldBegin("mediaUpdates", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.mediaUpdates.length);
            this.mediaUpdates.forEach((value_1: ClientMediaUpdate.ClientMediaUpdate): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.offer != null) {
            output.writeFieldBegin("offer", thrift.Thrift.Type.STRUCT, 4);
            this.offer.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ClientMediaUpdateRequest {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_2: Int64 = input.readI64();
                        _args.fromVersion = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_3: Int64 = input.readI64();
                        _args.toVersion = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_4: Array<ClientMediaUpdate.ClientMediaUpdate> = new Array<ClientMediaUpdate.ClientMediaUpdate>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_5: ClientMediaUpdate.ClientMediaUpdate = ClientMediaUpdate.ClientMediaUpdate.read(input);
                            value_4.push(value_5);
                        }
                        input.readListEnd();
                        _args.mediaUpdates = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_6: SessionDescription.SessionDescription = SessionDescription.SessionDescription.read(input);
                        _args.offer = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ClientMediaUpdateRequest(_args);
    }
}
